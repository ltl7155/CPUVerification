
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={5,rS,rT,offset}                           Premise(F3)
	S2= GPR[rS]=a                                               Premise(F4)
	S3= GPR[rT]=b                                               Premise(F5)

IF	S4= PC.Out=addr                                             PC-Out(S0)
	S5= PC.Out=>ICache.IEA                                      Premise(F10)
	S6= ICache.IEA=addr                                         Path(S4,S5)
	S7= ICache.Out={5,rS,rT,offset}                             ICache-Search(S6,S1)
	S8= ICache.Out=>IR.In                                       Premise(F11)
	S9= IR.In={5,rS,rT,offset}                                  Path(S7,S8)
	S10= CtrlPC=0                                               Premise(F19)
	S11= CtrlPCInc=1                                            Premise(F20)
	S12= PC[CIA]=addr                                           PC-Inc(S0,S10,S11)
	S13= CtrlIR=1                                               Premise(F23)
	S14= [IR]={5,rS,rT,offset}                                  IR-Write(S9,S13)
	S15= CtrlGPR=0                                              Premise(F27)
	S16= GPR[rS]=a                                              GPR-Hold(S2,S15)
	S17= GPR[rT]=b                                              GPR-Hold(S3,S15)

ID	S18= IR.Out25_21=rS                                         IR-Out(S14)
	S19= IR.Out20_16=rT                                         IR-Out(S14)
	S20= IR.Out25_21=>GPR.RReg1                                 Premise(F51)
	S21= GPR.RReg1=rS                                           Path(S18,S20)
	S22= GPR.Rdata1=a                                           GPR-Read(S21,S16)
	S23= IR.Out20_16=>GPR.RReg2                                 Premise(F52)
	S24= GPR.RReg2=rT                                           Path(S19,S23)
	S25= GPR.Rdata2=b                                           GPR-Read(S24,S17)
	S26= GPR.Rdata1=>A.In                                       Premise(F53)
	S27= A.In=a                                                 Path(S22,S26)
	S28= GPR.Rdata2=>B.In                                       Premise(F54)
	S29= B.In=b                                                 Path(S25,S28)
	S30= CtrlPCInc=0                                            Premise(F61)
	S31= PC[CIA]=addr                                           PC-Hold(S12,S30)
	S32= CtrlIR=0                                               Premise(F64)
	S33= [IR]={5,rS,rT,offset}                                  IR-Hold(S14,S32)
	S34= CtrlA=1                                                Premise(F69)
	S35= [A]=a                                                  A-Write(S27,S34)
	S36= CtrlB=1                                                Premise(F70)
	S37= [B]=b                                                  B-Write(S29,S36)

EX	S38= PC.CIA=addr                                            PC-Out(S31)
	S39= IR.Out15_0=offset                                      IR-Out(S33)
	S40= A.Out=a                                                A-Out(S35)
	S41= B.Out=b                                                B-Out(S37)
	S42= IR.Out15_0=>SEXT.In                                    Premise(F73)
	S43= SEXT.In=offset                                         Path(S39,S42)
	S44= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S43)
	S45= PC.CIA=>ALU.A                                          Premise(F74)
	S46= ALU.A=addr                                             Path(S38,S45)
	S47= SEXT.Out=>ALU.B                                        Premise(F75)
	S48= ALU.B={14{offset[15]},offset,2{0}}                     Path(S44,S47)
	S49= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S46,S48)
	S50= ALU.Out=>ALUOut.In                                     Premise(F77)
	S51= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S49,S50)
	S52= A.Out=>CMPU.A                                          Premise(F78)
	S53= CMPU.A=a                                               Path(S40,S52)
	S54= B.Out=>CMPU.B                                          Premise(F79)
	S55= CMPU.B=b                                               Path(S41,S54)
	S56= CMPU.zero=CompareS(a,b)                                CMPU-CMPS(S53,S55)
	S57= CMPU.zero=>ConditionReg.In                             Premise(F81)
	S58= ConditionReg.In=CompareS(a,b)                          Path(S56,S57)
	S59= CtrlALUOut=1                                           Premise(F98)
	S60= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S51,S59)
	S61= CtrlConditionReg=1                                     Premise(F99)
	S62= [ConditionReg]=CompareS(a,b)                           ConditionReg-Write(S58,S61)

MEM	S63= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S60)
	S64= ALUOut.Out=>PC.In                                      Premise(F100)
	S65= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S63,S64)
	S66= CtrlPC=1                                               Premise(F107)
	S67= CtrlPCInc=0                                            Premise(F108)
	S68= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S65,S66,S67)
	S69= CtrlConditionReg=0                                     Premise(F119)
	S70= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S62,S69)

WB	S71= CtrlPC=0                                               Premise(F161)
	S72= CtrlPCInc=0                                            Premise(F162)
	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S68,S71,S72)
	S74= CtrlConditionReg=0                                     Premise(F173)
	S75= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S70,S74)

POST	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S68,S71,S72)
	S75= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S70,S74)

