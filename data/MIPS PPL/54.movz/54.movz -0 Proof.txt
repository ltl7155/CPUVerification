
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                      Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PC.Out=>IMem.RAddr                                      Premise(F5)
	S8= IMem.RAddr=addr                                         Path(S6,S7)
	S9= CP0.ASID=>IMem.ASID                                     Premise(F6)
	S10= IMem.ASID=pid                                          Path(S5,S9)
	S11= IMem.Out={0,rS,rT,rD,0,10}                             IMem-Read(S10,S8,S2)
	S12= IMem.Out=>IR_ID.In                                     Premise(F8)
	S13= IR_ID.In={0,rS,rT,rD,0,10}                             Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F50)
	S15= CtrlPCInc=1                                            Premise(F51)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR_ID=1                                            Premise(F57)
	S18= [IR_ID]={0,rS,rT,rD,0,10}                              IR_ID-Write(S13,S17)
	S19= CtrlGPR=0                                              Premise(F58)
	S20= GPR[rS]=a                                              GPR-Hold(S3,S19)
	S21= GPR[rT]=b                                              GPR-Hold(S4,S19)

ID	S22= IR_ID.Out={0,rS,rT,rD,0,10}                            IR-Out(S18)
	S23= IR_ID.Out25_21=rS                                      IR-Out(S18)
	S24= IR_ID.Out20_16=rT                                      IR-Out(S18)
	S25= IR_ID.Out25_21=>GPR.RReg1                              Premise(F76)
	S26= GPR.RReg1=rS                                           Path(S23,S25)
	S27= GPR.Rdata1=a                                           GPR-Read(S26,S20)
	S28= IR_ID.Out20_16=>GPR.RReg2                              Premise(F77)
	S29= GPR.RReg2=rT                                           Path(S24,S28)
	S30= GPR.Rdata2=b                                           GPR-Read(S29,S21)
	S31= GPR.Rdata1=>FU.InID1                                   Premise(F79)
	S32= FU.InID1=a                                             Path(S27,S31)
	S33= FU.OutID1=FU(a)                                        FU-Forward(S32)
	S34= FU.OutID1=>A_EX.In                                     Premise(F81)
	S35= A_EX.In=FU(a)                                          Path(S33,S34)
	S36= GPR.Rdata2=>FU.InID2                                   Premise(F82)
	S37= FU.InID2=b                                             Path(S30,S36)
	S38= FU.OutID2=FU(b)                                        FU-Forward(S37)
	S39= FU.OutID2=>B_EX.In                                     Premise(F84)
	S40= B_EX.In=FU(b)                                          Path(S38,S39)
	S41= IR_ID.Out=>IR_EX.In                                    Premise(F85)
	S42= IR_EX.In={0,rS,rT,rD,0,10}                             Path(S22,S41)
	S43= CtrlPC=0                                               Premise(F113)
	S44= CtrlPCInc=0                                            Premise(F114)
	S45= PC[Out]=addr+4                                         PC-Hold(S16,S43,S44)
	S46= CtrlA_EX=1                                             Premise(F122)
	S47= [A_EX]=FU(a)                                           A_EX-Write(S35,S46)
	S48= CtrlB_EX=1                                             Premise(F123)
	S49= [B_EX]=FU(b)                                           B_EX-Write(S40,S48)
	S50= CtrlIR_EX=1                                            Premise(F124)
	S51= [IR_EX]={0,rS,rT,rD,0,10}                              IR_EX-Write(S42,S50)

EX	S52= A_EX.Out=FU(a)                                         A_EX-Out(S47)
	S53= B_EX.Out=FU(b)                                         B_EX-Out(S49)
	S54= IR_EX.Out={0,rS,rT,rD,0,10}                            IR_EX-Out(S51)
	S55= CMPU.A=32'b0                                           Premise(F154)
	S56= B_EX.Out=>CMPU.B                                       Premise(F155)
	S57= CMPU.B=FU(b)                                           Path(S53,S56)
	S58= CMPU.zero=CompareS(32'b0,FU(b))                        CMPU-CMPS(S55,S57)
	S59= CMPU.zero=>ConditionReg_MEM.In                         Premise(F157)
	S60= ConditionReg_MEM.In=CompareS(32'b0,FU(b))              Path(S58,S59)
	S61= A_EX.Out=>ALUOut_MEM.In                                Premise(F158)
	S62= ALUOut_MEM.In=FU(a)                                    Path(S52,S61)
	S63= IR_EX.Out=>IR_MEM.In                                   Premise(F161)
	S64= IR_MEM.In={0,rS,rT,rD,0,10}                            Path(S54,S63)
	S65= CtrlPC=0                                               Premise(F178)
	S66= CtrlPCInc=0                                            Premise(F179)
	S67= PC[Out]=addr+4                                         PC-Hold(S45,S65,S66)
	S68= CtrlConditionReg_MEM=1                                 Premise(F190)
	S69= [ConditionReg_MEM]=CompareS(32'b0,FU(b))               ConditionReg_MEM-Write(S60,S68)
	S70= CtrlALUOut_MEM=1                                       Premise(F191)
	S71= [ALUOut_MEM]=FU(a)                                     ALUOut_MEM-Write(S62,S70)
	S72= CtrlIR_MEM=1                                           Premise(F192)
	S73= [IR_MEM]={0,rS,rT,rD,0,10}                             IR_MEM-Write(S64,S72)

MEM	S74= ConditionReg_MEM.Out=CompareS(32'b0,FU(b))             ConditionReg_MEM-Out(S69)
	S75= ALUOut_MEM.Out=FU(a)                                   ALUOut_MEM-Out(S71)
	S76= IR_MEM.Out={0,rS,rT,rD,0,10}                           IR_MEM-Out(S73)
	S77= IR_MEM.Out=>IR_WB.In                                   Premise(F228)
	S78= IR_WB.In={0,rS,rT,rD,0,10}                             Path(S76,S77)
	S79= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F229)
	S80= ALUOut_WB.In=FU(a)                                     Path(S75,S79)
	S81= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F232)
	S82= ConditionReg_WB.In=CompareS(32'b0,FU(b))               Path(S74,S81)
	S83= CtrlPC=0                                               Premise(F241)
	S84= CtrlPCInc=0                                            Premise(F242)
	S85= PC[Out]=addr+4                                         PC-Hold(S67,S83,S84)
	S86= CtrlIR_WB=1                                            Premise(F256)
	S87= [IR_WB]={0,rS,rT,rD,0,10}                              IR_WB-Write(S78,S86)
	S88= CtrlALUOut_WB=1                                        Premise(F257)
	S89= [ALUOut_WB]=FU(a)                                      ALUOut_WB-Write(S80,S88)
	S90= CtrlConditionReg_WB=1                                  Premise(F258)
	S91= [ConditionReg_WB]=CompareS(32'b0,FU(b))                ConditionReg_WB-Write(S82,S90)

WB	S92= IR_WB.Out15_11=rD                                      IR-Out(S87)
	S93= ALUOut_WB.Out=FU(a)                                    ALUOut_WB-Out(S89)
	S94= IR_WB.Out15_11=>GPR.WReg                               Premise(F299)
	S95= GPR.WReg=rD                                            Path(S92,S94)
	S96= ALUOut_WB.Out=>GPR.WData                               Premise(F300)
	S97= GPR.WData=FU(a)                                        Path(S93,S96)
	S98= CtrlPC=0                                               Premise(F304)
	S99= CtrlPCInc=0                                            Premise(F305)
	S100= PC[Out]=addr+4                                        PC-Hold(S85,S98,S99)
	S101= CtrlGPR=1                                             Premise(F312)
	S102= GPR[rD]=FU(a)                                         GPR-Write(S95,S97,S101)
	S103= CtrlConditionReg_WB=0                                 Premise(F321)
	S104= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S91,S103)

POST	S100= PC[Out]=addr+4                                        PC-Hold(S85,S98,S99)
	S102= GPR[rD]=FU(a)                                         GPR-Write(S95,S97,S101)
	S104= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S91,S103)

