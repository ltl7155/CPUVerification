
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F51)
	S20= GPR[rT]=b                                              Premise(F52)

IF(IMMU)	S21= PC.Out=addr                                            PC-Out(S14)
	S22= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F56)
	S24= IMem.RAddr={pid,addr}                                  Path(S22,S23)
	S25= IMem.Out={5,rS,rT,offset}                              IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F57)
	S28= IRMux.MemData={5,rS,rT,offset}                         Path(S25,S27)
	S29= IRMux.Out={5,rS,rT,offset}                             IRMux-Select2(S28)
	S30= IRMux.Out=>IR_ID.In                                    Premise(F61)
	S31= IR_ID.In={5,rS,rT,offset}                              Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F62)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= PC.Out=>ICache.IEA                                     Premise(F63)
	S35= ICache.IEA=addr                                        Path(S21,S34)
	S36= CtrlICache=1                                           Premise(F74)
	S37= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S35,S33,S36)
	S38= CtrlIR_ID=1                                            Premise(F77)
	S39= [IR_ID]={5,rS,rT,offset}                               IR_ID-Write(S31,S38)
	S40= CtrlGPR=0                                              Premise(F80)
	S41= GPR[rS]=a                                              GPR-Hold(S19,S40)
	S42= GPR[rT]=b                                              GPR-Hold(S20,S40)

ID	S43= IR_ID.Out25_21=rS                                      IR-Out(S39)
	S44= IR_ID.Out20_16=rT                                      IR-Out(S39)
	S45= IR_ID.Out25_21=>GPR.RReg1                              Premise(F102)
	S46= GPR.RReg1=rS                                           Path(S43,S45)
	S47= GPR.Rdata1=a                                           GPR-Read(S46,S41)
	S48= IR_ID.Out20_16=>GPR.RReg2                              Premise(F103)
	S49= GPR.RReg2=rT                                           Path(S44,S48)
	S50= GPR.Rdata2=b                                           GPR-Read(S49,S42)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F104)
	S52= FU.InID1=a                                             Path(S47,S51)
	S53= FU.OutID1=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID1=>A_EX.In                                     Premise(F106)
	S55= A_EX.In=FU(a)                                          Path(S53,S54)
	S56= GPR.Rdata2=>FU.InID2                                   Premise(F107)
	S57= FU.InID2=b                                             Path(S50,S56)
	S58= FU.OutID2=FU(b)                                        FU-Forward(S57)
	S59= FU.OutID2=>B_EX.In                                     Premise(F109)
	S60= B_EX.In=FU(b)                                          Path(S58,S59)
	S61= CtrlICache=0                                           Premise(F121)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S37,S61)
	S63= CtrlA_EX=1                                             Premise(F128)
	S64= [A_EX]=FU(a)                                           A_EX-Write(S55,S63)
	S65= CtrlB_EX=1                                             Premise(F129)
	S66= [B_EX]=FU(b)                                           B_EX-Write(S60,S65)

EX	S67= A_EX.Out=FU(a)                                         A_EX-Out(S64)
	S68= B_EX.Out=FU(b)                                         B_EX-Out(S66)
	S69= A_EX.Out=>CMPU.A                                       Premise(F154)
	S70= CMPU.A=FU(a)                                           Path(S67,S69)
	S71= B_EX.Out=>CMPU.B                                       Premise(F155)
	S72= CMPU.B=FU(b)                                           Path(S68,S71)
	S73= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S70,S72)
	S74= CMPU.zero=>ConditionReg_MEM.In                         Premise(F157)
	S75= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S73,S74)
	S76= CtrlICache=0                                           Premise(F168)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S76)
	S78= CtrlConditionReg_MEM=1                                 Premise(F179)
	S79= [ConditionReg_MEM]=CompareS(FU(a),FU(b))               ConditionReg_MEM-Write(S75,S78)

MEM	S80= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))             ConditionReg_MEM-Out(S79)
	S81= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F206)
	S82= ConditionReg_WB.In=CompareS(FU(a),FU(b))               Path(S80,S81)
	S83= CtrlICache=0                                           Premise(F218)
	S84= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S77,S83)
	S85= CtrlConditionReg_WB=1                                  Premise(F239)
	S86= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Write(S82,S85)

WB	S87= CtrlICache=0                                           Premise(F334)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S87)
	S89= CtrlConditionReg_WB=0                                  Premise(F355)
	S90= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Hold(S86,S89)

POST	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S87)
	S90= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Hold(S86,S89)

