
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={37,rS,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F51)
	S14= CtrlPCInc=0                                            Premise(F52)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F53)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F58)
	S19= IMem[{pid,addr}]={37,rS,rA,d}                          IMem-Hold(S2,S18)
	S20= CtrlGPRegs=0                                           Premise(F61)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F77)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F82)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={37,rS,rA,d}                                  IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F83)
	S31= IRMux.MemData={37,rS,rA,d}                             Path(S28,S30)
	S32= IRMux.Out={37,rS,rA,d}                                 IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F87)
	S34= IR.In={37,rS,rA,d}                                     Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F88)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F119)
	S38= CtrlPCInc=1                                            Premise(F120)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F123)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F128)
	S43= [IR]={37,rS,rA,d}                                      IR-Write(S34,S42)
	S44= CtrlGPRegs=0                                           Premise(F129)
	S45= GPRegs[rA]=a                                           GPRegs-Hold(S21,S44)

ID	S46= IR.Out11_15=rA                                         IR-Out(S43)
	S47= IR.Out16_31=d                                          IR-Out(S43)
	S48= IR.Out11_15=>GPRegs.RReg2                              Premise(F159)
	S49= GPRegs.RReg2=rA                                        Path(S46,S48)
	S50= GPRegs.Rdata2=a                                        GPRegs-Read(S49,S45)
	S51= GPRegs.Rdata2=>A.In                                    Premise(F160)
	S52= A.In=a                                                 Path(S50,S51)
	S53= IR.Out16_31=>IMMEXT.In                                 Premise(F161)
	S54= IMMEXT.In=d                                            Path(S47,S53)
	S55= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S54)
	S56= IMMEXT.Out=>B.In                                       Premise(F162)
	S57= B.In={16{d[0]},d}                                      Path(S55,S56)
	S58= CtrlPC=0                                               Premise(F187)
	S59= CtrlPCInc=0                                            Premise(F188)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F191)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlIR=0                                               Premise(F196)
	S64= [IR]={37,rS,rA,d}                                      IR-Hold(S43,S63)
	S65= CtrlA=1                                                Premise(F198)
	S66= [A]=a                                                  A-Write(S52,S65)
	S67= CtrlB=1                                                Premise(F199)
	S68= [B]={16{d[0]},d}                                       B-Write(S57,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= B.Out={16{d[0]},d}                                     B-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F235)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= B.Out=>ALU.B                                           Premise(F236)
	S74= ALU.B={16{d[0]},d}                                     Path(S70,S73)
	S75= ALU.Out=a+{16{d[0]},d}                                 ALU(S72,S74)
	S76= ALU.Out=>ALUOut.In                                     Premise(F238)
	S77= ALUOut.In=a+{16{d[0]},d}                               Path(S75,S76)
	S78= CtrlPC=0                                               Premise(F255)
	S79= CtrlPCInc=0                                            Premise(F256)
	S80= PC[Out]=addr+4                                         PC-Hold(S60,S78,S79)
	S81= CtrlICache=0                                           Premise(F259)
	S82= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S81)
	S83= CtrlIR=0                                               Premise(F264)
	S84= [IR]={37,rS,rA,d}                                      IR-Hold(S64,S83)
	S85= CtrlALUOut=1                                           Premise(F269)
	S86= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Write(S77,S85)

MEM	S87= CtrlPC=0                                               Premise(F323)
	S88= CtrlPCInc=0                                            Premise(F324)
	S89= PC[Out]=addr+4                                         PC-Hold(S80,S87,S88)
	S90= CtrlICache=0                                           Premise(F327)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S82,S90)
	S92= CtrlIR=0                                               Premise(F332)
	S93= [IR]={37,rS,rA,d}                                      IR-Hold(S84,S92)
	S94= CtrlALUOut=0                                           Premise(F337)
	S95= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Hold(S86,S94)

DMMU1	S96= CtrlPC=0                                               Premise(F391)
	S97= CtrlPCInc=0                                            Premise(F392)
	S98= PC[Out]=addr+4                                         PC-Hold(S89,S96,S97)
	S99= CtrlICache=0                                           Premise(F395)
	S100= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S99)
	S101= CtrlIR=0                                              Premise(F400)
	S102= [IR]={37,rS,rA,d}                                     IR-Hold(S93,S101)
	S103= CtrlALUOut=0                                          Premise(F405)
	S104= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S95,S103)

DMMU2	S105= CtrlPC=0                                              Premise(F459)
	S106= CtrlPCInc=0                                           Premise(F460)
	S107= PC[Out]=addr+4                                        PC-Hold(S98,S105,S106)
	S108= CtrlICache=0                                          Premise(F463)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S108)
	S110= CtrlIR=0                                              Premise(F468)
	S111= [IR]={37,rS,rA,d}                                     IR-Hold(S102,S110)
	S112= CtrlALUOut=0                                          Premise(F473)
	S113= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S104,S112)

WB	S114= IR.Out11_15=rA                                        IR-Out(S111)
	S115= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S113)
	S116= ALUOut.Out=>GPRegs.WData                              Premise(F523)
	S117= GPRegs.WData=a+{16{d[0]},d}                           Path(S115,S116)
	S118= IR.Out11_15=>GPRegs.WReg                              Premise(F524)
	S119= GPRegs.WReg=rA                                        Path(S114,S118)
	S120= CtrlPC=0                                              Premise(F527)
	S121= CtrlPCInc=0                                           Premise(F528)
	S122= PC[Out]=addr+4                                        PC-Hold(S107,S120,S121)
	S123= CtrlICache=0                                          Premise(F531)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S123)
	S125= CtrlGPRegs=1                                          Premise(F537)
	S126= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S119,S117,S125)

POST	S122= PC[Out]=addr+4                                        PC-Hold(S107,S120,S121)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S123)
	S126= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S119,S117,S125)

