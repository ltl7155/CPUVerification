
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,8,cc,0,0,offset}                   Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Hit=IMMUHit(pid,addr)                             IMMU-Search(S6,S8)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S12= IAddrReg.In={pid,addr}                                 Path(S9,S11)
	S13= IMMU.Hit=>CU.IMMUHit                                   Premise(F6)
	S14= CU.IMMUHit=IMMUHit(pid,addr)                           Path(S10,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F7)
	S16= ICache.IEA=addr                                        Path(S4,S15)
	S17= ICache.Hit=ICacheHit(addr)                             ICache-Search(S16)
	S18= ICache.Out=>IR.In                                      Premise(F8)
	S19= ICache.Out=>ICacheReg.In                               Premise(F9)
	S20= ICache.Hit=>CU.ICacheHit                               Premise(F10)
	S21= CU.ICacheHit=ICacheHit(addr)                           Path(S17,S20)
	S22= CtrlASIDIn=0                                           Premise(F11)
	S23= CtrlCP0=0                                              Premise(F12)
	S24= CP0[ASID]=pid                                          CP0-Hold(S0,S23)
	S25= CtrlEPCIn=0                                            Premise(F13)
	S26= CtrlExCodeIn=0                                         Premise(F14)
	S27= CtrlIMMU=0                                             Premise(F15)
	S28= CtrlPC=0                                               Premise(F16)
	S29= CtrlPCInc=0                                            Premise(F17)
	S30= PC[Out]=addr                                           PC-Hold(S1,S28,S29)
	S31= CtrlIAddrReg=1                                         Premise(F18)
	S32= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S31)
	S33= CtrlICache=0                                           Premise(F19)
	S34= CtrlIR=0                                               Premise(F20)
	S35= CtrlICacheReg=1                                        Premise(F21)
	S36= CtrlIMem=0                                             Premise(F22)
	S37= IMem[{pid,addr}]={17,8,cc,0,0,offset}                  IMem-Hold(S2,S36)
	S38= CtrlIRMux=0                                            Premise(F23)
	S39= CtrlA=0                                                Premise(F24)
	S40= CtrlALUOut=0                                           Premise(F25)
	S41= CtrlCP1=0                                              Premise(F26)
	S42= CtrlConditionReg=0                                     Premise(F27)

IF(IMMU)	S43= CP0.ASID=pid                                           CP0-Read-ASID(S24)
	S44= PC.Out=addr                                            PC-Out(S30)
	S45= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S32)
	S46= IAddrReg.Out1_0={{pid,addr}}[1:0]                      IAddrReg-Out(S32)
	S47= IAddrReg.Out4_0={{pid,addr}}[4:0]                      IAddrReg-Out(S32)
	S48= CU.IMMUHit=>CU.IMMUHit                                 Premise(F28)
	S49= CU.ICacheHit=>CU.ICacheHit                             Premise(F29)
	S50= IAddrReg.Out=>IMem.RAddr                               Premise(F30)
	S51= IMem.RAddr={pid,addr}                                  Path(S45,S50)
	S52= IMem.Out={17,8,cc,0,0,offset}                          IMem-Read(S51,S37)
	S53= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S51,S37)
	S54= IMem.Out=>IRMux.MemData                                Premise(F31)
	S55= IRMux.MemData={17,8,cc,0,0,offset}                     Path(S52,S54)
	S56= IRMux.Out={17,8,cc,0,0,offset}                         IRMux-Select2(S55)
	S57= ICacheReg.Out=>IRMux.CacheData                         Premise(F32)
	S58= CU.IMMUHit=>IRMux.MemSel                               Premise(F33)
	S59= CU.ICacheHit=>IRMux.CacheSel                           Premise(F34)
	S60= IRMux.Out=>IR.In                                       Premise(F35)
	S61= IR.In={17,8,cc,0,0,offset}                             Path(S56,S60)
	S62= IMem.MEM8WordOut=>ICache.WData                         Premise(F36)
	S63= ICache.WData=IMemGet8Word({pid,addr})                  Path(S53,S62)
	S64= PC.Out=>ICache.IEA                                     Premise(F37)
	S65= ICache.IEA=addr                                        Path(S44,S64)
	S66= ICache.Hit=ICacheHit(addr)                             ICache-Search(S65)
	S67= CtrlASIDIn=0                                           Premise(F38)
	S68= CtrlCP0=0                                              Premise(F39)
	S69= CP0[ASID]=pid                                          CP0-Hold(S24,S68)
	S70= CtrlEPCIn=0                                            Premise(F40)
	S71= CtrlExCodeIn=0                                         Premise(F41)
	S72= CtrlIMMU=0                                             Premise(F42)
	S73= CtrlPC=0                                               Premise(F43)
	S74= CtrlPCInc=1                                            Premise(F44)
	S75= PC[Out]=addr+4                                         PC-Inc(S30,S73,S74)
	S76= PC[CIA]=addr                                           PC-Inc(S30,S73,S74)
	S77= CtrlIAddrReg=0                                         Premise(F45)
	S78= [IAddrReg]={pid,addr}                                  IAddrReg-Hold(S32,S77)
	S79= CtrlICache=1                                           Premise(F46)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S65,S63,S79)
	S81= CtrlIR=1                                               Premise(F47)
	S82= [IR]={17,8,cc,0,0,offset}                              IR-Write(S61,S81)
	S83= CtrlICacheReg=0                                        Premise(F48)
	S84= CtrlIMem=0                                             Premise(F49)
	S85= IMem[{pid,addr}]={17,8,cc,0,0,offset}                  IMem-Hold(S37,S84)
	S86= CtrlIRMux=0                                            Premise(F50)
	S87= CtrlA=0                                                Premise(F51)
	S88= CtrlALUOut=0                                           Premise(F52)
	S89= CtrlCP1=0                                              Premise(F53)
	S90= CtrlConditionReg=0                                     Premise(F54)

ID	S91= CP0.ASID=pid                                           CP0-Read-ASID(S69)
	S92= PC.Out=addr+4                                          PC-Out(S75)
	S93= PC.CIA=addr                                            PC-Out(S76)
	S94= PC.CIA31_28=addr[31:28]                                PC-Out(S76)
	S95= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S78)
	S96= IAddrReg.Out1_0={{pid,addr}}[1:0]                      IAddrReg-Out(S78)
	S97= IAddrReg.Out4_0={{pid,addr}}[4:0]                      IAddrReg-Out(S78)
	S98= IR.Out={17,8,cc,0,0,offset}                            IR-Out(S82)
	S99= IR.Out31_26=17                                         IR-Out(S82)
	S100= IR.Out25_21=8                                         IR-Out(S82)
	S101= IR.Out20_18=cc                                        IR-Out(S82)
	S102= IR.Out17=0                                            IR-Out(S82)
	S103= IR.Out16=0                                            IR-Out(S82)
	S104= IR.Out15_0=offset                                     IR-Out(S82)
	S105= IR.Out31_26=>CU.Op                                    Premise(F55)
	S106= CU.Op=17                                              Path(S99,S105)
	S107= IR.Out25_21=>CU.IRFunc2                               Premise(F56)
	S108= CU.IRFunc2=8                                          Path(S100,S107)
	S109= CU.Func=alu_add                                       CU(S106,S108)
	S110= IR.Out15_0=>SEXT.In                                   Premise(F57)
	S111= SEXT.In=offset                                        Path(S104,S110)
	S112= SEXT.Out={14{offset[15]},offset,2{0}}                 SEXT(S111)
	S113= SEXT.Out=>A.In                                        Premise(F58)
	S114= A.In={14{offset[15]},offset,2{0}}                     Path(S112,S113)
	S115= CtrlASIDIn=0                                          Premise(F59)
	S116= CtrlCP0=0                                             Premise(F60)
	S117= CP0[ASID]=pid                                         CP0-Hold(S69,S116)
	S118= CtrlEPCIn=0                                           Premise(F61)
	S119= CtrlExCodeIn=0                                        Premise(F62)
	S120= CtrlIMMU=0                                            Premise(F63)
	S121= CtrlPC=0                                              Premise(F64)
	S122= CtrlPCInc=0                                           Premise(F65)
	S123= PC[CIA]=addr                                          PC-Hold(S76,S122)
	S124= PC[Out]=addr+4                                        PC-Hold(S75,S121,S122)
	S125= CtrlIAddrReg=0                                        Premise(F66)
	S126= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S78,S125)
	S127= CtrlICache=0                                          Premise(F67)
	S128= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S80,S127)
	S129= CtrlIR=0                                              Premise(F68)
	S130= [IR]={17,8,cc,0,0,offset}                             IR-Hold(S82,S129)
	S131= CtrlICacheReg=0                                       Premise(F69)
	S132= CtrlIMem=0                                            Premise(F70)
	S133= IMem[{pid,addr}]={17,8,cc,0,0,offset}                 IMem-Hold(S85,S132)
	S134= CtrlIRMux=0                                           Premise(F71)
	S135= CtrlA=1                                               Premise(F72)
	S136= [A]={14{offset[15]},offset,2{0}}                      A-Write(S114,S135)
	S137= CtrlALUOut=0                                          Premise(F73)
	S138= CtrlCP1=0                                             Premise(F74)
	S139= CtrlConditionReg=0                                    Premise(F75)

EX	S140= CP0.ASID=pid                                          CP0-Read-ASID(S117)
	S141= PC.CIA=addr                                           PC-Out(S123)
	S142= PC.CIA31_28=addr[31:28]                               PC-Out(S123)
	S143= PC.Out=addr+4                                         PC-Out(S124)
	S144= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S126)
	S145= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S126)
	S146= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S126)
	S147= IR.Out={17,8,cc,0,0,offset}                           IR-Out(S130)
	S148= IR.Out31_26=17                                        IR-Out(S130)
	S149= IR.Out25_21=8                                         IR-Out(S130)
	S150= IR.Out20_18=cc                                        IR-Out(S130)
	S151= IR.Out17=0                                            IR-Out(S130)
	S152= IR.Out16=0                                            IR-Out(S130)
	S153= IR.Out15_0=offset                                     IR-Out(S130)
	S154= A.Out={14{offset[15]},offset,2{0}}                    A-Out(S136)
	S155= A.Out1_0={{14{offset[15]},offset,2{0}}}[1:0]          A-Out(S136)
	S156= A.Out4_0={{14{offset[15]},offset,2{0}}}[4:0]          A-Out(S136)
	S157= PC.CIA=>ALU.A                                         Premise(F76)
	S158= ALU.A=addr                                            Path(S141,S157)
	S159= A.Out=>ALU.B                                          Premise(F77)
	S160= ALU.B={14{offset[15]},offset,2{0}}                    Path(S154,S159)
	S161= ALU.Func=6'b010010                                    Premise(F78)
	S162= ALU.Out=addr+{14{offset[15]},offset,2{0}}             ALU(S158,S160)
	S163= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]   ALU(S158,S160)
	S164= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})   ALU(S158,S160)
	S165= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})    ALU(S158,S160)
	S166= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})       ALU(S158,S160)
	S167= ALU.Out=>ALUOut.In                                    Premise(F79)
	S168= ALUOut.In=addr+{14{offset[15]},offset,2{0}}           Path(S162,S167)
	S169= CtrlASIDIn=0                                          Premise(F80)
	S170= CtrlCP0=0                                             Premise(F81)
	S171= CP0[ASID]=pid                                         CP0-Hold(S117,S170)
	S172= CtrlEPCIn=0                                           Premise(F82)
	S173= CtrlExCodeIn=0                                        Premise(F83)
	S174= CtrlIMMU=0                                            Premise(F84)
	S175= CtrlPC=0                                              Premise(F85)
	S176= CtrlPCInc=0                                           Premise(F86)
	S177= PC[CIA]=addr                                          PC-Hold(S123,S176)
	S178= PC[Out]=addr+4                                        PC-Hold(S124,S175,S176)
	S179= CtrlIAddrReg=0                                        Premise(F87)
	S180= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S126,S179)
	S181= CtrlICache=0                                          Premise(F88)
	S182= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S128,S181)
	S183= CtrlIR=0                                              Premise(F89)
	S184= [IR]={17,8,cc,0,0,offset}                             IR-Hold(S130,S183)
	S185= CtrlICacheReg=0                                       Premise(F90)
	S186= CtrlIMem=0                                            Premise(F91)
	S187= IMem[{pid,addr}]={17,8,cc,0,0,offset}                 IMem-Hold(S133,S186)
	S188= CtrlIRMux=0                                           Premise(F92)
	S189= CtrlA=0                                               Premise(F93)
	S190= [A]={14{offset[15]},offset,2{0}}                      A-Hold(S136,S189)
	S191= CtrlALUOut=1                                          Premise(F94)
	S192= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Write(S168,S191)
	S193= CtrlCP1=0                                             Premise(F95)
	S194= CtrlConditionReg=0                                    Premise(F96)

MEM	S195= CP0.ASID=pid                                          CP0-Read-ASID(S171)
	S196= PC.CIA=addr                                           PC-Out(S177)
	S197= PC.CIA31_28=addr[31:28]                               PC-Out(S177)
	S198= PC.Out=addr+4                                         PC-Out(S178)
	S199= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S180)
	S200= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S180)
	S201= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S180)
	S202= IR.Out={17,8,cc,0,0,offset}                           IR-Out(S184)
	S203= IR.Out31_26=17                                        IR-Out(S184)
	S204= IR.Out25_21=8                                         IR-Out(S184)
	S205= IR.Out20_18=cc                                        IR-Out(S184)
	S206= IR.Out17=0                                            IR-Out(S184)
	S207= IR.Out16=0                                            IR-Out(S184)
	S208= IR.Out15_0=offset                                     IR-Out(S184)
	S209= A.Out={14{offset[15]},offset,2{0}}                    A-Out(S190)
	S210= A.Out1_0={{14{offset[15]},offset,2{0}}}[1:0]          A-Out(S190)
	S211= A.Out4_0={{14{offset[15]},offset,2{0}}}[4:0]          A-Out(S190)
	S212= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S192)
	S213= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S192)
	S214= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S192)
	S215= IR.Out20_18=>CP1.cc                                   Premise(F97)
	S216= CP1.cc=cc                                             Path(S205,S215)
	S217= IR.Out16=>CP1.tf                                      Premise(F98)
	S218= CP1.tf=0                                              Path(S207,S217)
	S219= CP1.fp=FPConditionCode(cc,0)                          FP-PRODUCT(S216,S218)
	S220= CP1.fp=>ConditionReg.In                               Premise(F99)
	S221= ConditionReg.In=FPConditionCode(cc,0)                 Path(S219,S220)
	S222= CtrlASIDIn=0                                          Premise(F100)
	S223= CtrlCP0=0                                             Premise(F101)
	S224= CP0[ASID]=pid                                         CP0-Hold(S171,S223)
	S225= CtrlEPCIn=0                                           Premise(F102)
	S226= CtrlExCodeIn=0                                        Premise(F103)
	S227= CtrlIMMU=0                                            Premise(F104)
	S228= CtrlPC=0                                              Premise(F105)
	S229= CtrlPCInc=0                                           Premise(F106)
	S230= PC[CIA]=addr                                          PC-Hold(S177,S229)
	S231= PC[Out]=addr+4                                        PC-Hold(S178,S228,S229)
	S232= CtrlIAddrReg=0                                        Premise(F107)
	S233= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S180,S232)
	S234= CtrlICache=0                                          Premise(F108)
	S235= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S182,S234)
	S236= CtrlIR=0                                              Premise(F109)
	S237= [IR]={17,8,cc,0,0,offset}                             IR-Hold(S184,S236)
	S238= CtrlICacheReg=0                                       Premise(F110)
	S239= CtrlIMem=0                                            Premise(F111)
	S240= IMem[{pid,addr}]={17,8,cc,0,0,offset}                 IMem-Hold(S187,S239)
	S241= CtrlIRMux=0                                           Premise(F112)
	S242= CtrlA=0                                               Premise(F113)
	S243= [A]={14{offset[15]},offset,2{0}}                      A-Hold(S190,S242)
	S244= CtrlALUOut=0                                          Premise(F114)
	S245= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S192,S244)
	S246= CtrlCP1=0                                             Premise(F115)
	S247= CtrlConditionReg=1                                    Premise(F116)
	S248= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Write(S221,S247)

WB	S249= CP0.ASID=pid                                          CP0-Read-ASID(S224)
	S250= PC.CIA=addr                                           PC-Out(S230)
	S251= PC.CIA31_28=addr[31:28]                               PC-Out(S230)
	S252= PC.Out=addr+4                                         PC-Out(S231)
	S253= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S233)
	S254= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S233)
	S255= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S233)
	S256= IR.Out={17,8,cc,0,0,offset}                           IR-Out(S237)
	S257= IR.Out31_26=17                                        IR-Out(S237)
	S258= IR.Out25_21=8                                         IR-Out(S237)
	S259= IR.Out20_18=cc                                        IR-Out(S237)
	S260= IR.Out17=0                                            IR-Out(S237)
	S261= IR.Out16=0                                            IR-Out(S237)
	S262= IR.Out15_0=offset                                     IR-Out(S237)
	S263= A.Out={14{offset[15]},offset,2{0}}                    A-Out(S243)
	S264= A.Out1_0={{14{offset[15]},offset,2{0}}}[1:0]          A-Out(S243)
	S265= A.Out4_0={{14{offset[15]},offset,2{0}}}[4:0]          A-Out(S243)
	S266= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S245)
	S267= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S245)
	S268= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S245)
	S269= ConditionReg.Out=FPConditionCode(cc,0)                ConditionReg-Out(S248)
	S270= ConditionReg.Out1_0={FPConditionCode(cc,0)}[1:0]      ConditionReg-Out(S248)
	S271= ConditionReg.Out4_0={FPConditionCode(cc,0)}[4:0]      ConditionReg-Out(S248)
	S272= ALUOut.Out=>PC.In                                     Premise(F151)
	S273= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S266,S272)
	S274= ConditionReg.Out=>CU.fp                               Premise(F152)
	S275= CU.fp=FPConditionCode(cc,0)                           Path(S269,S274)
	S276= CtrlASIDIn=0                                          Premise(F153)
	S277= CtrlCP0=0                                             Premise(F154)
	S278= CP0[ASID]=pid                                         CP0-Hold(S224,S277)
	S279= CtrlEPCIn=0                                           Premise(F155)
	S280= CtrlExCodeIn=0                                        Premise(F156)
	S281= CtrlIMMU=0                                            Premise(F157)
	S282= CtrlPC=1                                              Premise(F158)
	S283= CtrlPCInc=0                                           Premise(F159)
	S284= PC[CIA]=addr                                          PC-Hold(S230,S283)
	S285= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S273,S282,S283)
	S286= CtrlIAddrReg=0                                        Premise(F160)
	S287= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S233,S286)
	S288= CtrlICache=0                                          Premise(F161)
	S289= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S235,S288)
	S290= CtrlIR=0                                              Premise(F162)
	S291= [IR]={17,8,cc,0,0,offset}                             IR-Hold(S237,S290)
	S292= CtrlICacheReg=0                                       Premise(F163)
	S293= CtrlIMem=0                                            Premise(F164)
	S294= IMem[{pid,addr}]={17,8,cc,0,0,offset}                 IMem-Hold(S240,S293)
	S295= CtrlIRMux=0                                           Premise(F165)
	S296= CtrlA=0                                               Premise(F166)
	S297= [A]={14{offset[15]},offset,2{0}}                      A-Hold(S243,S296)
	S298= CtrlALUOut=0                                          Premise(F167)
	S299= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S245,S298)
	S300= CtrlCP1=0                                             Premise(F168)
	S301= CtrlConditionReg=0                                    Premise(F169)
	S302= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S248,S301)

POST	S278= CP0[ASID]=pid                                         CP0-Hold(S224,S277)
	S284= PC[CIA]=addr                                          PC-Hold(S230,S283)
	S285= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S273,S282,S283)
	S287= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S233,S286)
	S289= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S235,S288)
	S291= [IR]={17,8,cc,0,0,offset}                             IR-Hold(S237,S290)
	S294= IMem[{pid,addr}]={17,8,cc,0,0,offset}                 IMem-Hold(S240,S293)
	S297= [A]={14{offset[15]},offset,2{0}}                      A-Hold(S243,S296)
	S299= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S245,S298)
	S302= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S248,S301)

