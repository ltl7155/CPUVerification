
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={1,rS,17,offset}                           Premise(F3)
	S2= GPR[rS]=a                                               Premise(F4)

IF	S3= PC.Out=addr                                             PC-Out(S0)
	S4= PC.Out=>ICache.IEA                                      Premise(F9)
	S5= ICache.IEA=addr                                         Path(S3,S4)
	S6= ICache.Out={1,rS,17,offset}                             ICache-Search(S5,S1)
	S7= ICache.Out=>IR.In                                       Premise(F10)
	S8= IR.In={1,rS,17,offset}                                  Path(S6,S7)
	S9= CtrlPC=0                                                Premise(F18)
	S10= CtrlPCInc=1                                            Premise(F19)
	S11= PC[Out]=addr+4                                         PC-Inc(S0,S9,S10)
	S12= PC[CIA]=addr                                           PC-Inc(S0,S9,S10)
	S13= CtrlIR=1                                               Premise(F22)
	S14= [IR]={1,rS,17,offset}                                  IR-Write(S8,S13)
	S15= CtrlGPR=0                                              Premise(F26)
	S16= GPR[rS]=a                                              GPR-Hold(S2,S15)

ID	S17= IR.Out25_21=rS                                         IR-Out(S14)
	S18= IR.Out25_21=>GPR.RReg1                                 Premise(F50)
	S19= GPR.RReg1=rS                                           Path(S17,S18)
	S20= GPR.Rdata1=a                                           GPR-Read(S19,S16)
	S21= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S22= GPR.Rdata1=>A.In                                       Premise(F52)
	S23= A.In=a                                                 Path(S20,S22)
	S24= GPR.Rdata2=>B.In                                       Premise(F53)
	S25= B.In=32'b0                                             Path(S21,S24)
	S26= CtrlPC=0                                               Premise(F59)
	S27= CtrlPCInc=0                                            Premise(F60)
	S28= PC[CIA]=addr                                           PC-Hold(S12,S27)
	S29= PC[Out]=addr+4                                         PC-Hold(S11,S26,S27)
	S30= CtrlIR=0                                               Premise(F63)
	S31= [IR]={1,rS,17,offset}                                  IR-Hold(S14,S30)
	S32= CtrlA=1                                                Premise(F68)
	S33= [A]=a                                                  A-Write(S23,S32)
	S34= CtrlB=1                                                Premise(F69)
	S35= [B]=32'b0                                              B-Write(S25,S34)

EX	S36= PC.CIA=addr                                            PC-Out(S28)
	S37= PC.Out=addr+4                                          PC-Out(S29)
	S38= IR.Out15_0=offset                                      IR-Out(S31)
	S39= A.Out=a                                                A-Out(S33)
	S40= B.Out=32'b0                                            B-Out(S35)
	S41= IR.Out15_0=>SEXT.In                                    Premise(F72)
	S42= SEXT.In=offset                                         Path(S38,S41)
	S43= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S42)
	S44= PC.CIA=>ALU.A                                          Premise(F73)
	S45= ALU.A=addr                                             Path(S36,S44)
	S46= SEXT.Out=>ALU.B                                        Premise(F74)
	S47= ALU.B={14{offset[15]},offset,2{0}}                     Path(S43,S46)
	S48= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S45,S47)
	S49= ALU.Out=>ALUOut.In                                     Premise(F76)
	S50= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S48,S49)
	S51= A.Out=>CMPU.A                                          Premise(F77)
	S52= CMPU.A=a                                               Path(S39,S51)
	S53= B.Out=>CMPU.B                                          Premise(F78)
	S54= CMPU.B=32'b0                                           Path(S40,S53)
	S55= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S52,S54)
	S56= CMPU.lt=>ConditionReg.In                               Premise(F80)
	S57= ConditionReg.In=CompareS(a,32'b0)                      Path(S55,S56)
	S58= GPR.WReg=5'd31                                         Premise(F81)
	S59= PC.Out=>GPR.WData                                      Premise(F82)
	S60= GPR.WData=addr+4                                       Path(S37,S59)
	S61= CtrlGPR=1                                              Premise(F96)
	S62= GPR[5'd31]=addr+4                                      GPR-Write(S58,S60,S61)
	S63= CtrlALUOut=1                                           Premise(F99)
	S64= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S50,S63)
	S65= CtrlConditionReg=1                                     Premise(F100)
	S66= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S57,S65)

MEM	S67= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S64)
	S68= ALUOut.Out=>PC.In                                      Premise(F101)
	S69= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S67,S68)
	S70= CtrlPC=1                                               Premise(F108)
	S71= CtrlPCInc=0                                            Premise(F109)
	S72= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S69,S70,S71)
	S73= CtrlGPR=0                                              Premise(F116)
	S74= GPR[5'd31]=addr+4                                      GPR-Hold(S62,S73)
	S75= CtrlConditionReg=0                                     Premise(F120)
	S76= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S66,S75)

WB	S77= CtrlPC=0                                               Premise(F162)
	S78= CtrlPCInc=0                                            Premise(F163)
	S79= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S72,S77,S78)
	S80= CtrlGPR=0                                              Premise(F170)
	S81= GPR[5'd31]=addr+4                                      GPR-Hold(S74,S80)
	S82= CtrlConditionReg=0                                     Premise(F174)
	S83= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S76,S82)

POST	S79= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S72,S77,S78)
	S81= GPR[5'd31]=addr+4                                      GPR-Hold(S74,S80)
	S83= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S76,S82)

