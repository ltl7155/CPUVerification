
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rs,rt,code,52}                      Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)
	S4= GPR[rt]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= IMMU.Addr=>IAddrReg.In                                  Premise(F63)
	S8= PC.Out=>IMMU.IEA                                        Premise(F68)
	S9= IMMU.IEA=addr                                           Path(S6,S8)
	S10= CP0.ASID=>IMMU.PID                                     Premise(F69)
	S11= IMMU.PID=pid                                           Path(S5,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S9)
	S13= IAddrReg.In={pid,addr}                                 Path(S12,S7)
	S14= CtrlPC=0                                               Premise(F116)
	S15= CtrlPCInc=0                                            Premise(F117)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlCP0=0                                              Premise(F119)
	S18= CP0[ASID]=pid                                          CP0-Hold(S0,S17)
	S19= CtrlGPR=0                                              Premise(F135)
	S20= GPR[rs]=a                                              GPR-Hold(S3,S19)
	S21= GPR[rt]=b                                              GPR-Hold(S4,S19)
	S22= CtrlIAddrReg=1                                         Premise(F136)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlIMem=0                                             Premise(F137)
	S25= IMem[{pid,addr}]={0,rs,rt,code,52}                     IMem-Hold(S2,S24)

IMMU	S26= PC.Out=addr                                            PC-Out(S16)
	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S28= PC.Out=>ICache.IEA                                     Premise(F200)
	S29= ICache.IEA=addr                                        Path(S26,S28)
	S30= IMem.MEM8WordOut=>ICache.WData                         Premise(F202)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F206)
	S32= IMem.RAddr={pid,addr}                                  Path(S27,S31)
	S33= IMem.Out={0,rs,rt,code,52}                             IMem-Read(S32,S25)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S25)
	S35= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S30)
	S36= IMem.Out=>IRMux.MemData                                Premise(F209)
	S37= IRMux.MemData={0,rs,rt,code,52}                        Path(S33,S36)
	S38= IRMux.Out={0,rs,rt,code,52}                            IRMux-Select2(S37)
	S39= IRMux.Out=>IR_ID.In                                    Premise(F215)
	S40= IR_ID.In={0,rs,rt,code,52}                             Path(S38,S39)
	S41= CtrlPC=0                                               Premise(F252)
	S42= CtrlPCInc=1                                            Premise(F253)
	S43= PC[Out]=addr+4                                         PC-Inc(S16,S41,S42)
	S44= CtrlCP0=0                                              Premise(F255)
	S45= CP0[ASID]=pid                                          CP0-Hold(S18,S44)
	S46= CtrlICache=1                                           Premise(F258)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S29,S35,S46)
	S48= CtrlIR_ID=1                                            Premise(F267)
	S49= [IR_ID]={0,rs,rt,code,52}                              IR_ID-Write(S40,S48)
	S50= CtrlGPR=0                                              Premise(F271)
	S51= GPR[rs]=a                                              GPR-Hold(S20,S50)
	S52= GPR[rt]=b                                              GPR-Hold(S21,S50)

ID	S53= IR_ID.Out25_21=rs                                      IR-Out(S49)
	S54= IR_ID.Out20_16=rt                                      IR-Out(S49)
	S55= FU.OutID1=>A_EX.In                                     Premise(F277)
	S56= FU.OutID2=>B_EX.In                                     Premise(F279)
	S57= GPR.Rdata1=>FU.InID1                                   Premise(F329)
	S58= GPR.Rdata2=>FU.InID2                                   Premise(F331)
	S59= IR_ID.Out25_21=>GPR.RReg1                              Premise(F333)
	S60= GPR.RReg1=rs                                           Path(S53,S59)
	S61= GPR.Rdata1=a                                           GPR-Read(S60,S51)
	S62= FU.InID1=a                                             Path(S61,S57)
	S63= FU.OutID1=FU(a)                                        FU-Forward(S62)
	S64= A_EX.In=FU(a)                                          Path(S63,S55)
	S65= IR_ID.Out20_16=>GPR.RReg2                              Premise(F334)
	S66= GPR.RReg2=rt                                           Path(S54,S65)
	S67= GPR.Rdata2=b                                           GPR-Read(S66,S52)
	S68= FU.InID2=b                                             Path(S67,S58)
	S69= FU.OutID2=FU(b)                                        FU-Forward(S68)
	S70= B_EX.In=FU(b)                                          Path(S69,S56)
	S71= CtrlA_EX=1                                             Premise(F382)
	S72= [A_EX]=FU(a)                                           A_EX-Write(S64,S71)
	S73= CtrlB_EX=1                                             Premise(F385)
	S74= [B_EX]=FU(b)                                           B_EX-Write(S70,S73)
	S75= CtrlPC=0                                               Premise(F388)
	S76= CtrlPCInc=0                                            Premise(F389)
	S77= PC[Out]=addr+4                                         PC-Hold(S43,S75,S76)
	S78= CtrlCP0=0                                              Premise(F391)
	S79= CP0[ASID]=pid                                          CP0-Hold(S45,S78)
	S80= CtrlICache=0                                           Premise(F394)
	S81= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S80)

EX	S82= A_EX.Out=FU(a)                                         A_EX-Out(S72)
	S83= B_EX.Out=FU(b)                                         B_EX-Out(S74)
	S84= A_EX.Out=>CMPU.A                                       Premise(F417)
	S85= CMPU.A=FU(a)                                           Path(S82,S84)
	S86= B_EX.Out=>CMPU.B                                       Premise(F418)
	S87= CMPU.B=FU(b)                                           Path(S83,S86)
	S88= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S85,S87)
	S89= CMPU.zero=>ConditionReg_MEM.In                         Premise(F454)
	S90= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S88,S89)
	S91= CtrlPC=0                                               Premise(F526)
	S92= CtrlPCInc=0                                            Premise(F527)
	S93= PC[Out]=addr+4                                         PC-Hold(S77,S91,S92)
	S94= CtrlCP0=0                                              Premise(F529)
	S95= CP0[ASID]=pid                                          CP0-Hold(S79,S94)
	S96= CtrlICache=0                                           Premise(F532)
	S97= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S81,S96)
	S98= CtrlConditionReg_MEM=1                                 Premise(F534)
	S99= [ConditionReg_MEM]=CompareS(FU(a),FU(b))               ConditionReg_MEM-Write(S90,S98)

MEM	S100= PC.Out=addr+4                                         PC-Out(S93)
	S101= CP0.ASID=pid                                          CP0-Read-ASID(S95)
	S102= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))            ConditionReg_MEM-Out(S99)
	S103= PC.Out=>CP0.EPCIn                                     Premise(F557)
	S104= CP0.EPCIn=addr+4                                      Path(S100,S103)
	S105= CP0.ExCodeIn=5'h0d                                    Premise(F558)
	S106= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In           Premise(F590)
	S107= ConditionReg_DMMU1.In=CompareS(FU(a),FU(b))           Path(S102,S106)
	S108= CP0.ASID=>PIDReg.In                                   Premise(F633)
	S109= PIDReg.In=pid                                         Path(S101,S108)
	S110= CtrlEPCIn=1                                           Premise(F668)
	S111= CP0[EPC]=addr+4                                       CP0-Write-EPC(S104,S110)
	S112= CtrlExCodeIn=1                                        Premise(F669)
	S113= CP0[ExCode]=5'h0d                                     CP0-Write-ExCode(S105,S112)
	S114= CtrlICache=0                                          Premise(F670)
	S115= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S97,S114)
	S116= CtrlConditionReg_DMMU1=1                              Premise(F673)
	S117= [ConditionReg_DMMU1]=CompareS(FU(a),FU(b))            ConditionReg_DMMU1-Write(S107,S116)
	S118= CtrlPIDReg=1                                          Premise(F688)
	S119= [PIDReg]=pid                                          PIDReg-Write(S109,S118)

DMMU1	S120= ConditionReg_DMMU1.Out=CompareS(FU(a),FU(b))          ConditionReg_DMMU1-Out(S117)
	S121= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F728)
	S122= ConditionReg_DMMU2.In=CompareS(FU(a),FU(b))           Path(S120,S121)
	S123= CtrlCP0=0                                             Premise(F804)
	S124= CP0[EPC]=addr+4                                       CP0-Hold(S111,S123)
	S125= CP0[ExCode]=5'h0d                                     CP0-Hold(S113,S123)
	S126= CtrlICache=0                                          Premise(F807)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S115,S126)
	S128= CtrlConditionReg_DMMU2=1                              Premise(F811)
	S129= [ConditionReg_DMMU2]=CompareS(FU(a),FU(b))            ConditionReg_DMMU2-Write(S122,S128)
	S130= CtrlPIDReg=0                                          Premise(F825)
	S131= [PIDReg]=pid                                          PIDReg-Hold(S119,S130)

DMMU2	S132= ConditionReg_DMMU2.Out=CompareS(FU(a),FU(b))          ConditionReg_DMMU2-Out(S129)
	S133= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F867)
	S134= ConditionReg_WB.In=CompareS(FU(a),FU(b))              Path(S132,S133)
	S135= CtrlCP0=0                                             Premise(F941)
	S136= CP0[EPC]=addr+4                                       CP0-Hold(S124,S135)
	S137= CP0[ExCode]=5'h0d                                     CP0-Hold(S125,S135)
	S138= CtrlICache=0                                          Premise(F944)
	S139= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S138)
	S140= CtrlConditionReg_WB=1                                 Premise(F949)
	S141= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Write(S134,S140)
	S142= CtrlPIDReg=0                                          Premise(F962)
	S143= [PIDReg]=pid                                          PIDReg-Hold(S131,S142)

WB	S144= CtrlCP0=0                                             Premise(F1078)
	S145= CP0[EPC]=addr+4                                       CP0-Hold(S136,S144)
	S146= CP0[ExCode]=5'h0d                                     CP0-Hold(S137,S144)
	S147= CtrlICache=0                                          Premise(F1081)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S139,S147)
	S149= CtrlConditionReg_WB=0                                 Premise(F1086)
	S150= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S141,S149)
	S151= CtrlPIDReg=0                                          Premise(F1099)
	S152= [PIDReg]=pid                                          PIDReg-Hold(S143,S151)

POST	S145= CP0[EPC]=addr+4                                       CP0-Hold(S136,S144)
	S146= CP0[ExCode]=5'h0d                                     CP0-Hold(S137,S144)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S139,S147)
	S150= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S141,S149)
	S152= [PIDReg]=pid                                          PIDReg-Hold(S143,S151)

