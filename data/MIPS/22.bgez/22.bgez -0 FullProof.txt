
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,1,offset}                        Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={1,rS,1,offset}                               IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={1,rS,1,offset}                                  Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F7)
	S14= CtrlPCInc=1                                            Premise(F8)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= PC[CIA]=addr                                           PC-Inc(S1,S13,S14)
	S17= CtrlIMem=0                                             Premise(F9)
	S18= IMem[{pid,addr}]={1,rS,1,offset}                       IMem-Hold(S2,S17)
	S19= CtrlASIDIn=0                                           Premise(F10)
	S20= CtrlCP0=0                                              Premise(F11)
	S21= CP0[ASID]=pid                                          CP0-Hold(S0,S20)
	S22= CtrlEPCIn=0                                            Premise(F12)
	S23= CtrlExCodeIn=0                                         Premise(F13)
	S24= CtrlIR=1                                               Premise(F14)
	S25= [IR]={1,rS,1,offset}                                   IR-Write(S12,S24)
	S26= CtrlGPR=0                                              Premise(F15)
	S27= GPR[rS]=a                                              GPR-Hold(S3,S26)
	S28= CtrlA=0                                                Premise(F16)
	S29= CtrlB=0                                                Premise(F17)
	S30= CtrlALUOut=0                                           Premise(F18)
	S31= CtrlConditionReg=0                                     Premise(F19)

ID	S32= PC.Out=addr+4                                          PC-Out(S15)
	S33= PC.CIA=addr                                            PC-Out(S16)
	S34= PC.CIA31_28=addr[31:28]                                PC-Out(S16)
	S35= CP0.ASID=pid                                           CP0-Read-ASID(S21)
	S36= IR.Out={1,rS,1,offset}                                 IR-Out(S25)
	S37= IR.Out31_26=1                                          IR-Out(S25)
	S38= IR.Out25_21=rS                                         IR-Out(S25)
	S39= IR.Out20_16=1                                          IR-Out(S25)
	S40= IR.Out15_0=offset                                      IR-Out(S25)
	S41= IR.Out31_26=>CU.Op                                     Premise(F20)
	S42= CU.Op=1                                                Path(S37,S41)
	S43= IR.Out25_21=>GPR.RReg1                                 Premise(F21)
	S44= GPR.RReg1=rS                                           Path(S38,S43)
	S45= GPR.Rdata1=a                                           GPR-Read(S44,S27)
	S46= IR.Out20_16=>GPR.RReg2                                 Premise(F22)
	S47= GPR.RReg2=1                                            Path(S39,S46)
	S48= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S49= GPR.Rdata1=>A.In                                       Premise(F23)
	S50= A.In=a                                                 Path(S45,S49)
	S51= GPR.Rdata2=>B.In                                       Premise(F24)
	S52= B.In=32'b0                                             Path(S48,S51)
	S53= CtrlPC=0                                               Premise(F25)
	S54= CtrlPCInc=0                                            Premise(F26)
	S55= PC[CIA]=addr                                           PC-Hold(S16,S54)
	S56= PC[Out]=addr+4                                         PC-Hold(S15,S53,S54)
	S57= CtrlIMem=0                                             Premise(F27)
	S58= IMem[{pid,addr}]={1,rS,1,offset}                       IMem-Hold(S18,S57)
	S59= CtrlASIDIn=0                                           Premise(F28)
	S60= CtrlCP0=0                                              Premise(F29)
	S61= CP0[ASID]=pid                                          CP0-Hold(S21,S60)
	S62= CtrlEPCIn=0                                            Premise(F30)
	S63= CtrlExCodeIn=0                                         Premise(F31)
	S64= CtrlIR=0                                               Premise(F32)
	S65= [IR]={1,rS,1,offset}                                   IR-Hold(S25,S64)
	S66= CtrlGPR=0                                              Premise(F33)
	S67= GPR[rS]=a                                              GPR-Hold(S27,S66)
	S68= CtrlA=1                                                Premise(F34)
	S69= [A]=a                                                  A-Write(S50,S68)
	S70= CtrlB=1                                                Premise(F35)
	S71= [B]=32'b0                                              B-Write(S52,S70)
	S72= CtrlALUOut=0                                           Premise(F36)
	S73= CtrlConditionReg=0                                     Premise(F37)

EX	S74= PC.CIA=addr                                            PC-Out(S55)
	S75= PC.CIA31_28=addr[31:28]                                PC-Out(S55)
	S76= PC.Out=addr+4                                          PC-Out(S56)
	S77= CP0.ASID=pid                                           CP0-Read-ASID(S61)
	S78= IR.Out={1,rS,1,offset}                                 IR-Out(S65)
	S79= IR.Out31_26=1                                          IR-Out(S65)
	S80= IR.Out25_21=rS                                         IR-Out(S65)
	S81= IR.Out20_16=1                                          IR-Out(S65)
	S82= IR.Out15_0=offset                                      IR-Out(S65)
	S83= A.Out=a                                                A-Out(S69)
	S84= A.Out1_0={a}[1:0]                                      A-Out(S69)
	S85= A.Out4_0={a}[4:0]                                      A-Out(S69)
	S86= B.Out=32'b0                                            B-Out(S71)
	S87= B.Out1_0={32'b0}[1:0]                                  B-Out(S71)
	S88= B.Out4_0={32'b0}[4:0]                                  B-Out(S71)
	S89= IR.Out15_0=>SEXT.In                                    Premise(F38)
	S90= SEXT.In=offset                                         Path(S82,S89)
	S91= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S90)
	S92= PC.CIA=>ALU.A                                          Premise(F39)
	S93= ALU.A=addr                                             Path(S74,S92)
	S94= SEXT.Out=>ALU.B                                        Premise(F40)
	S95= ALU.B={14{offset[15]},offset,2{0}}                     Path(S91,S94)
	S96= ALU.Func=6'b010010                                     Premise(F41)
	S97= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S93,S95)
	S98= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]    ALU(S93,S95)
	S99= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})    ALU(S93,S95)
	S100= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})    ALU(S93,S95)
	S101= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})       ALU(S93,S95)
	S102= ALU.Out=>ALUOut.In                                    Premise(F42)
	S103= ALUOut.In=addr+{14{offset[15]},offset,2{0}}           Path(S97,S102)
	S104= A.Out=>CMPU.A                                         Premise(F43)
	S105= CMPU.A=a                                              Path(S83,S104)
	S106= B.Out=>CMPU.B                                         Premise(F44)
	S107= CMPU.B=32'b0                                          Path(S86,S106)
	S108= CMPU.Func=6'b000011                                   Premise(F45)
	S109= CMPU.Out=CompareS(a,32'b0)                            CMPU-CMPS(S105,S107)
	S110= CMPU.zero=CompareS(a,32'b0)                           CMPU-CMPS(S105,S107)
	S111= CMPU.gt=CompareS(a,32'b0)                             CMPU-CMPS(S105,S107)
	S112= CMPU.lt=CompareS(a,32'b0)                             CMPU-CMPS(S105,S107)
	S113= CMPU.lt=>ConditionReg.In                              Premise(F46)
	S114= ConditionReg.In=CompareS(a,32'b0)                     Path(S112,S113)
	S115= CtrlPC=0                                              Premise(F47)
	S116= CtrlPCInc=0                                           Premise(F48)
	S117= PC[CIA]=addr                                          PC-Hold(S55,S116)
	S118= PC[Out]=addr+4                                        PC-Hold(S56,S115,S116)
	S119= CtrlIMem=0                                            Premise(F49)
	S120= IMem[{pid,addr}]={1,rS,1,offset}                      IMem-Hold(S58,S119)
	S121= CtrlASIDIn=0                                          Premise(F50)
	S122= CtrlCP0=0                                             Premise(F51)
	S123= CP0[ASID]=pid                                         CP0-Hold(S61,S122)
	S124= CtrlEPCIn=0                                           Premise(F52)
	S125= CtrlExCodeIn=0                                        Premise(F53)
	S126= CtrlIR=0                                              Premise(F54)
	S127= [IR]={1,rS,1,offset}                                  IR-Hold(S65,S126)
	S128= CtrlGPR=0                                             Premise(F55)
	S129= GPR[rS]=a                                             GPR-Hold(S67,S128)
	S130= CtrlA=0                                               Premise(F56)
	S131= [A]=a                                                 A-Hold(S69,S130)
	S132= CtrlB=0                                               Premise(F57)
	S133= [B]=32'b0                                             B-Hold(S71,S132)
	S134= CtrlALUOut=1                                          Premise(F58)
	S135= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Write(S103,S134)
	S136= CtrlConditionReg=1                                    Premise(F59)
	S137= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Write(S114,S136)

MEM	S138= PC.CIA=addr                                           PC-Out(S117)
	S139= PC.CIA31_28=addr[31:28]                               PC-Out(S117)
	S140= PC.Out=addr+4                                         PC-Out(S118)
	S141= CP0.ASID=pid                                          CP0-Read-ASID(S123)
	S142= IR.Out={1,rS,1,offset}                                IR-Out(S127)
	S143= IR.Out31_26=1                                         IR-Out(S127)
	S144= IR.Out25_21=rS                                        IR-Out(S127)
	S145= IR.Out20_16=1                                         IR-Out(S127)
	S146= IR.Out15_0=offset                                     IR-Out(S127)
	S147= A.Out=a                                               A-Out(S131)
	S148= A.Out1_0={a}[1:0]                                     A-Out(S131)
	S149= A.Out4_0={a}[4:0]                                     A-Out(S131)
	S150= B.Out=32'b0                                           B-Out(S133)
	S151= B.Out1_0={32'b0}[1:0]                                 B-Out(S133)
	S152= B.Out4_0={32'b0}[4:0]                                 B-Out(S133)
	S153= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S135)
	S154= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S135)
	S155= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S135)
	S156= ConditionReg.Out=CompareS(a,32'b0)                    ConditionReg-Out(S137)
	S157= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]          ConditionReg-Out(S137)
	S158= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]          ConditionReg-Out(S137)
	S159= ALUOut.Out=>PC.In                                     Premise(F60)
	S160= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S153,S159)
	S161= ConditionReg.Out=>CU.lt                               Premise(F61)
	S162= CU.lt=CompareS(a,32'b0)                               Path(S156,S161)
	S163= CtrlPC=0                                              Premise(F62)
	S164= CtrlPCInc=0                                           Premise(F63)
	S165= PC[CIA]=addr                                          PC-Hold(S117,S164)
	S166= PC[Out]=addr+4                                        PC-Hold(S118,S163,S164)
	S167= CtrlIMem=0                                            Premise(F64)
	S168= IMem[{pid,addr}]={1,rS,1,offset}                      IMem-Hold(S120,S167)
	S169= CtrlASIDIn=0                                          Premise(F65)
	S170= CtrlCP0=0                                             Premise(F66)
	S171= CP0[ASID]=pid                                         CP0-Hold(S123,S170)
	S172= CtrlEPCIn=0                                           Premise(F67)
	S173= CtrlExCodeIn=0                                        Premise(F68)
	S174= CtrlIR=0                                              Premise(F69)
	S175= [IR]={1,rS,1,offset}                                  IR-Hold(S127,S174)
	S176= CtrlGPR=0                                             Premise(F70)
	S177= GPR[rS]=a                                             GPR-Hold(S129,S176)
	S178= CtrlA=0                                               Premise(F71)
	S179= [A]=a                                                 A-Hold(S131,S178)
	S180= CtrlB=0                                               Premise(F72)
	S181= [B]=32'b0                                             B-Hold(S133,S180)
	S182= CtrlALUOut=0                                          Premise(F73)
	S183= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S135,S182)
	S184= CtrlConditionReg=0                                    Premise(F74)
	S185= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S137,S184)

WB	S186= PC.CIA=addr                                           PC-Out(S165)
	S187= PC.CIA31_28=addr[31:28]                               PC-Out(S165)
	S188= PC.Out=addr+4                                         PC-Out(S166)
	S189= CP0.ASID=pid                                          CP0-Read-ASID(S171)
	S190= IR.Out={1,rS,1,offset}                                IR-Out(S175)
	S191= IR.Out31_26=1                                         IR-Out(S175)
	S192= IR.Out25_21=rS                                        IR-Out(S175)
	S193= IR.Out20_16=1                                         IR-Out(S175)
	S194= IR.Out15_0=offset                                     IR-Out(S175)
	S195= A.Out=a                                               A-Out(S179)
	S196= A.Out1_0={a}[1:0]                                     A-Out(S179)
	S197= A.Out4_0={a}[4:0]                                     A-Out(S179)
	S198= B.Out=32'b0                                           B-Out(S181)
	S199= B.Out1_0={32'b0}[1:0]                                 B-Out(S181)
	S200= B.Out4_0={32'b0}[4:0]                                 B-Out(S181)
	S201= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S183)
	S202= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S183)
	S203= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S183)
	S204= ConditionReg.Out=CompareS(a,32'b0)                    ConditionReg-Out(S185)
	S205= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]          ConditionReg-Out(S185)
	S206= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]          ConditionReg-Out(S185)
	S207= CtrlPC=0                                              Premise(F75)
	S208= CtrlPCInc=0                                           Premise(F76)
	S209= PC[CIA]=addr                                          PC-Hold(S165,S208)
	S210= PC[Out]=addr+4                                        PC-Hold(S166,S207,S208)
	S211= CtrlIMem=0                                            Premise(F77)
	S212= IMem[{pid,addr}]={1,rS,1,offset}                      IMem-Hold(S168,S211)
	S213= CtrlASIDIn=0                                          Premise(F78)
	S214= CtrlCP0=0                                             Premise(F79)
	S215= CP0[ASID]=pid                                         CP0-Hold(S171,S214)
	S216= CtrlEPCIn=0                                           Premise(F80)
	S217= CtrlExCodeIn=0                                        Premise(F81)
	S218= CtrlIR=0                                              Premise(F82)
	S219= [IR]={1,rS,1,offset}                                  IR-Hold(S175,S218)
	S220= CtrlGPR=0                                             Premise(F83)
	S221= GPR[rS]=a                                             GPR-Hold(S177,S220)
	S222= CtrlA=0                                               Premise(F84)
	S223= [A]=a                                                 A-Hold(S179,S222)
	S224= CtrlB=0                                               Premise(F85)
	S225= [B]=32'b0                                             B-Hold(S181,S224)
	S226= CtrlALUOut=0                                          Premise(F86)
	S227= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S183,S226)
	S228= CtrlConditionReg=0                                    Premise(F87)
	S229= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S185,S228)

POST	S209= PC[CIA]=addr                                          PC-Hold(S165,S208)
	S210= PC[Out]=addr+4                                        PC-Hold(S166,S207,S208)
	S212= IMem[{pid,addr}]={1,rS,1,offset}                      IMem-Hold(S168,S211)
	S215= CP0[ASID]=pid                                         CP0-Hold(S171,S214)
	S219= [IR]={1,rS,1,offset}                                  IR-Hold(S175,S218)
	S221= GPR[rS]=a                                             GPR-Hold(S177,S220)
	S223= [A]=a                                                 A-Hold(S179,S222)
	S225= [B]=32'b0                                             B-Hold(S181,S224)
	S227= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S183,S226)
	S229= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S185,S228)

