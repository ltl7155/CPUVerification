
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={43,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= GPR[rT]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F26)
	S15= CtrlPCInc=0                                            Premise(F27)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F28)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F33)
	S20= IMem[{pid,addr}]={43,rS,rT,offset}                     IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F35)
	S22= GPR[rS]=base                                           GPR-Hold(S3,S21)
	S23= GPR[rT]=a                                              GPR-Hold(S4,S21)

IF(IMMU)	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S27= IMem.RAddr={pid,addr}                                  Path(S25,S26)
	S28= IMem.Out={43,rS,rT,offset}                             IMem-Read(S27,S20)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S20)
	S30= IMem.Out=>IRMux.MemData                                Premise(F67)
	S31= IRMux.MemData={43,rS,rT,offset}                        Path(S28,S30)
	S32= IRMux.Out={43,rS,rT,offset}                            IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F71)
	S34= IR_ID.In={43,rS,rT,offset}                             Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F72)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= PC.Out=>ICache.IEA                                     Premise(F73)
	S38= ICache.IEA=addr                                        Path(S24,S37)
	S39= CtrlPC=0                                               Premise(F81)
	S40= CtrlPCInc=1                                            Premise(F82)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F84)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S38,S36,S42)
	S44= CtrlIR_ID=1                                            Premise(F87)
	S45= [IR_ID]={43,rS,rT,offset}                              IR_ID-Write(S34,S44)
	S46= CtrlGPR=0                                              Premise(F90)
	S47= GPR[rS]=base                                           GPR-Hold(S22,S46)
	S48= GPR[rT]=a                                              GPR-Hold(S23,S46)

ID	S49= IR_ID.Out={43,rS,rT,offset}                            IR-Out(S45)
	S50= IR_ID.Out25_21=rS                                      IR-Out(S45)
	S51= IR_ID.Out15_0=offset                                   IR-Out(S45)
	S52= IR_ID.Out25_21=>GPR.RReg1                              Premise(F122)
	S53= GPR.RReg1=rS                                           Path(S50,S52)
	S54= GPR.Rdata1=base                                        GPR-Read(S53,S47)
	S55= IR_ID.Out15_0=>IMMEXT.In                               Premise(F123)
	S56= IMMEXT.In=offset                                       Path(S51,S55)
	S57= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S56)
	S58= GPR.Rdata1=>FU.InID1                                   Premise(F124)
	S59= FU.InID1=base                                          Path(S54,S58)
	S60= FU.OutID1=FU(base)                                     FU-Forward(S59)
	S61= FU.OutID1=>A_EX.In                                     Premise(F126)
	S62= A_EX.In=FU(base)                                       Path(S60,S61)
	S63= IMMEXT.Out=>B_EX.In                                    Premise(F127)
	S64= B_EX.In={16{offset[15]},offset}                        Path(S57,S63)
	S65= IR_ID.Out=>IR_EX.In                                    Premise(F128)
	S66= IR_EX.In={43,rS,rT,offset}                             Path(S49,S65)
	S67= CtrlPC=0                                               Premise(F137)
	S68= CtrlPCInc=0                                            Premise(F138)
	S69= PC[Out]=addr+4                                         PC-Hold(S41,S67,S68)
	S70= CtrlICache=0                                           Premise(F140)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S70)
	S72= CtrlGPR=0                                              Premise(F146)
	S73= GPR[rT]=a                                              GPR-Hold(S48,S72)
	S74= CtrlA_EX=1                                             Premise(F147)
	S75= [A_EX]=FU(base)                                        A_EX-Write(S62,S74)
	S76= CtrlB_EX=1                                             Premise(F148)
	S77= [B_EX]={16{offset[15]},offset}                         B_EX-Write(S64,S76)
	S78= CtrlIR_EX=1                                            Premise(F149)
	S79= [IR_EX]={43,rS,rT,offset}                              IR_EX-Write(S66,S78)

EX	S80= A_EX.Out=FU(base)                                      A_EX-Out(S75)
	S81= B_EX.Out={16{offset[15]},offset}                       B_EX-Out(S77)
	S82= IR_EX.Out20_16=rT                                      IR_EX-Out(S79)
	S83= A_EX.Out=>ALU.A                                        Premise(F178)
	S84= ALU.A=FU(base)                                         Path(S80,S83)
	S85= B_EX.Out=>ALU.B                                        Premise(F179)
	S86= ALU.B={16{offset[15]},offset}                          Path(S81,S85)
	S87= ALU.Out=FU(base)+{16{offset[15]},offset}               ALU(S84,S86)
	S88= ALU.Out1_0={FU(base)+{16{offset[15]},offset}}[1:0]     ALU(S84,S86)
	S89= ALU.Out=>ALUOut_MEM.In                                 Premise(F181)
	S90= ALUOut_MEM.In=FU(base)+{16{offset[15]},offset}         Path(S87,S89)
	S91= IR_EX.Out20_16=>GPR.RReg2                              Premise(F182)
	S92= GPR.RReg2=rT                                           Path(S82,S91)
	S93= GPR.Rdata2=a                                           GPR-Read(S92,S73)
	S94= GPR.Rdata2=>MemDataSelS.In                             Premise(F183)
	S95= MemDataSelS.In=a                                       Path(S93,S94)
	S96= ALU.Out1_0=>MemDataSelS.Addr                           Premise(F184)
	S97= MemDataSelS.Addr={FU(base)+{16{offset[15]},offset}}[1:0]Path(S88,S96)
	S98= MemDataSelS.Out=a                                      MemDataSelS(S95,S97)
	S99= MemDataSelS.Out=>DR_MEM.In                             Premise(F186)
	S100= DR_MEM.In=a                                           Path(S98,S99)
	S101= CtrlPC=0                                              Premise(F194)
	S102= CtrlPCInc=0                                           Premise(F195)
	S103= PC[Out]=addr+4                                        PC-Hold(S69,S101,S102)
	S104= CtrlICache=0                                          Premise(F197)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S71,S104)
	S106= CtrlALUOut_MEM=1                                      Premise(F207)
	S107= [ALUOut_MEM]=FU(base)+{16{offset[15]},offset}         ALUOut_MEM-Write(S90,S106)
	S108= CtrlDR_MEM=1                                          Premise(F208)
	S109= [DR_MEM]=a                                            DR_MEM-Write(S100,S108)

MEM	S110= ALUOut_MEM.Out=FU(base)+{16{offset[15]},offset}       ALUOut_MEM-Out(S107)
	S111= DR_MEM.Out=a                                          DR_MEM-Out(S109)
	S112= ALUOut_MEM.Out=>DCache.IEA                            Premise(F241)
	S113= DCache.IEA=FU(base)+{16{offset[15]},offset}           Path(S110,S112)
	S114= DR_MEM.Out=>DCache.In                                 Premise(F243)
	S115= DCache.In=a                                           Path(S111,S114)
	S116= CtrlPC=0                                              Premise(F263)
	S117= CtrlPCInc=0                                           Premise(F264)
	S118= PC[Out]=addr+4                                        PC-Hold(S103,S116,S117)
	S119= CtrlICache=0                                          Premise(F266)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S105,S119)
	S121= CtrlDCache=1                                          Premise(F281)
	S122= DCache[FU(base)+{16{offset[15]},offset}]=a            DCache-Write(S113,S115,S121)

MEM(DMMU1)	S123= CtrlPC=0                                              Premise(F317)
	S124= CtrlPCInc=0                                           Premise(F318)
	S125= PC[Out]=addr+4                                        PC-Hold(S118,S123,S124)
	S126= CtrlICache=0                                          Premise(F320)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S126)
	S128= CtrlDCache=0                                          Premise(F335)
	S129= DCache[FU(base)+{16{offset[15]},offset}]=a            DCache-Hold(S122,S128)

MEM(DMMU2)	S130= CtrlPC=0                                              Premise(F369)
	S131= CtrlPCInc=0                                           Premise(F370)
	S132= PC[Out]=addr+4                                        PC-Hold(S125,S130,S131)
	S133= CtrlICache=0                                          Premise(F372)
	S134= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S133)
	S135= CtrlDCache=0                                          Premise(F387)
	S136= DCache[FU(base)+{16{offset[15]},offset}]=a            DCache-Hold(S129,S135)

WB	S137= CtrlPC=0                                              Premise(F414)
	S138= CtrlPCInc=0                                           Premise(F415)
	S139= PC[Out]=addr+4                                        PC-Hold(S132,S137,S138)
	S140= CtrlICache=0                                          Premise(F417)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S134,S140)
	S142= CtrlDCache=0                                          Premise(F432)
	S143= DCache[FU(base)+{16{offset[15]},offset}]=a            DCache-Hold(S136,S142)

POST	S139= PC[Out]=addr+4                                        PC-Hold(S132,S137,S138)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S134,S140)
	S143= DCache[FU(base)+{16{offset[15]},offset}]=a            DCache-Hold(S136,S142)

