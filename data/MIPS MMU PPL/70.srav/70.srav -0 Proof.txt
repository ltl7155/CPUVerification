
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,7}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F26)
	S15= CtrlPCInc=0                                            Premise(F27)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F28)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F33)
	S20= IMem[{pid,addr}]={0,rS,rT,rD,0,7}                      IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F35)
	S22= GPR[rS]=a                                              GPR-Hold(S3,S21)
	S23= GPR[rT]=b                                              GPR-Hold(S4,S21)

IF(IMMU)	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F54)
	S27= IMem.RAddr={pid,addr}                                  Path(S25,S26)
	S28= IMem.Out={0,rS,rT,rD,0,7}                              IMem-Read(S27,S20)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S20)
	S30= IMem.Out=>IRMux.MemData                                Premise(F55)
	S31= IRMux.MemData={0,rS,rT,rD,0,7}                         Path(S28,S30)
	S32= IRMux.Out={0,rS,rT,rD,0,7}                             IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F59)
	S34= IR_ID.In={0,rS,rT,rD,0,7}                              Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F60)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= PC.Out=>ICache.IEA                                     Premise(F61)
	S38= ICache.IEA=addr                                        Path(S24,S37)
	S39= CtrlPC=0                                               Premise(F69)
	S40= CtrlPCInc=1                                            Premise(F70)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F72)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S38,S36,S42)
	S44= CtrlIR_ID=1                                            Premise(F75)
	S45= [IR_ID]={0,rS,rT,rD,0,7}                               IR_ID-Write(S34,S44)
	S46= CtrlGPR=0                                              Premise(F78)
	S47= GPR[rS]=a                                              GPR-Hold(S22,S46)
	S48= GPR[rT]=b                                              GPR-Hold(S23,S46)

ID	S49= IR_ID.Out={0,rS,rT,rD,0,7}                             IR-Out(S45)
	S50= IR_ID.Out25_21=rS                                      IR-Out(S45)
	S51= IR_ID.Out20_16=rT                                      IR-Out(S45)
	S52= IR_ID.Out25_21=>GPR.RReg1                              Premise(F98)
	S53= GPR.RReg1=rS                                           Path(S50,S52)
	S54= GPR.Rdata1=a                                           GPR-Read(S53,S47)
	S55= IR_ID.Out20_16=>GPR.RReg2                              Premise(F99)
	S56= GPR.RReg2=rT                                           Path(S51,S55)
	S57= GPR.Rdata2=b                                           GPR-Read(S56,S48)
	S58= GPR.Rdata1=>FU.InID1                                   Premise(F101)
	S59= FU.InID1=a                                             Path(S54,S58)
	S60= FU.OutID1=FU(a)                                        FU-Forward(S59)
	S61= FU.OutID1=>A_EX.In                                     Premise(F103)
	S62= A_EX.In=FU(a)                                          Path(S60,S61)
	S63= GPR.Rdata2=>FU.InID2                                   Premise(F104)
	S64= FU.InID2=b                                             Path(S57,S63)
	S65= FU.OutID2=FU(b)                                        FU-Forward(S64)
	S66= FU.OutID2=>B_EX.In                                     Premise(F106)
	S67= B_EX.In=FU(b)                                          Path(S65,S66)
	S68= IR_ID.Out=>IR_EX.In                                    Premise(F107)
	S69= IR_EX.In={0,rS,rT,rD,0,7}                              Path(S49,S68)
	S70= CtrlPC=0                                               Premise(F115)
	S71= CtrlPCInc=0                                            Premise(F116)
	S72= PC[Out]=addr+4                                         PC-Hold(S41,S70,S71)
	S73= CtrlICache=0                                           Premise(F118)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S73)
	S75= CtrlA_EX=1                                             Premise(F125)
	S76= [A_EX]=FU(a)                                           A_EX-Write(S62,S75)
	S77= CtrlB_EX=1                                             Premise(F126)
	S78= [B_EX]=FU(b)                                           B_EX-Write(S67,S77)
	S79= CtrlIR_EX=1                                            Premise(F127)
	S80= [IR_EX]={0,rS,rT,rD,0,7}                               IR_EX-Write(S69,S79)

EX	S81= A_EX.Out4_0={FU(a)}[4:0]                               A_EX-Out(S76)
	S82= B_EX.Out=FU(b)                                         B_EX-Out(S78)
	S83= IR_EX.Out={0,rS,rT,rD,0,7}                             IR_EX-Out(S80)
	S84= A_EX.Out4_0=>SU.Shamt                                  Premise(F145)
	S85= SU.Shamt={FU(a)}[4:0]                                  Path(S81,S84)
	S86= B_EX.Out=>SU.Data                                      Premise(F146)
	S87= SU.Data=FU(b)                                          Path(S82,S86)
	S88= SU.Out=FU(b)>>{FU(a)}[4:0]                             SU(S87,S85)
	S89= SU.Out=>ALUOut_MEM.In                                  Premise(F148)
	S90= ALUOut_MEM.In=FU(b)>>{FU(a)}[4:0]                      Path(S88,S89)
	S91= IR_EX.Out=>IR_MEM.In                                   Premise(F151)
	S92= IR_MEM.In={0,rS,rT,rD,0,7}                             Path(S83,S91)
	S93= CtrlPC=0                                               Premise(F157)
	S94= CtrlPCInc=0                                            Premise(F158)
	S95= PC[Out]=addr+4                                         PC-Hold(S72,S93,S94)
	S96= CtrlICache=0                                           Premise(F160)
	S97= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S96)
	S98= CtrlALUOut_MEM=1                                       Premise(F170)
	S99= [ALUOut_MEM]=FU(b)>>{FU(a)}[4:0]                       ALUOut_MEM-Write(S90,S98)
	S100= CtrlIR_MEM=1                                          Premise(F171)
	S101= [IR_MEM]={0,rS,rT,rD,0,7}                             IR_MEM-Write(S92,S100)

MEM	S102= ALUOut_MEM.Out=FU(b)>>{FU(a)}[4:0]                    ALUOut_MEM-Out(S99)
	S103= IR_MEM.Out={0,rS,rT,rD,0,7}                           IR_MEM-Out(S101)
	S104= IR_MEM.Out=>IR_DMMU1.In                               Premise(F189)
	S105= IR_DMMU1.In={0,rS,rT,rD,0,7}                          Path(S103,S104)
	S106= ALUOut_MEM.Out=>ALUOut_DMMU1.In                       Premise(F193)
	S107= ALUOut_DMMU1.In=FU(b)>>{FU(a)}[4:0]                   Path(S102,S106)
	S108= CtrlPC=0                                              Premise(F204)
	S109= CtrlPCInc=0                                           Premise(F205)
	S110= PC[Out]=addr+4                                        PC-Hold(S95,S108,S109)
	S111= CtrlICache=0                                          Premise(F207)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S97,S111)
	S113= CtrlIR_DMMU1=1                                        Premise(F219)
	S114= [IR_DMMU1]={0,rS,rT,rD,0,7}                           IR_DMMU1-Write(S105,S113)
	S115= CtrlALUOut_DMMU1=1                                    Premise(F225)
	S116= [ALUOut_DMMU1]=FU(b)>>{FU(a)}[4:0]                    ALUOut_DMMU1-Write(S107,S115)

MEM(DMMU1)	S117= IR_DMMU1.Out={0,rS,rT,rD,0,7}                         IR_DMMU1-Out(S114)
	S118= ALUOut_DMMU1.Out=FU(b)>>{FU(a)}[4:0]                  ALUOut_DMMU1-Out(S116)
	S119= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F237)
	S120= IR_DMMU2.In={0,rS,rT,rD,0,7}                          Path(S117,S119)
	S121= ALUOut_DMMU1.Out=>ALUOut_DMMU2.In                     Premise(F238)
	S122= ALUOut_DMMU2.In=FU(b)>>{FU(a)}[4:0]                   Path(S118,S121)
	S123= CtrlPC=0                                              Premise(F246)
	S124= CtrlPCInc=0                                           Premise(F247)
	S125= PC[Out]=addr+4                                        PC-Hold(S110,S123,S124)
	S126= CtrlICache=0                                          Premise(F249)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S126)
	S128= CtrlIR_DMMU2=1                                        Premise(F269)
	S129= [IR_DMMU2]={0,rS,rT,rD,0,7}                           IR_DMMU2-Write(S120,S128)
	S130= CtrlALUOut_DMMU2=1                                    Premise(F270)
	S131= [ALUOut_DMMU2]=FU(b)>>{FU(a)}[4:0]                    ALUOut_DMMU2-Write(S122,S130)

MEM(DMMU2)	S132= IR_DMMU2.Out={0,rS,rT,rD,0,7}                         IR_DMMU2-Out(S129)
	S133= ALUOut_DMMU2.Out=FU(b)>>{FU(a)}[4:0]                  ALUOut_DMMU2-Out(S131)
	S134= IR_DMMU2.Out=>IR_WB.In                                Premise(F276)
	S135= IR_WB.In={0,rS,rT,rD,0,7}                             Path(S132,S134)
	S136= ALUOut_DMMU2.Out=>ALUOut_WB.In                        Premise(F277)
	S137= ALUOut_WB.In=FU(b)>>{FU(a)}[4:0]                      Path(S133,S136)
	S138= CtrlPC=0                                              Premise(F285)
	S139= CtrlPCInc=0                                           Premise(F286)
	S140= PC[Out]=addr+4                                        PC-Hold(S125,S138,S139)
	S141= CtrlICache=0                                          Premise(F288)
	S142= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S141)
	S143= CtrlIR_WB=1                                           Premise(F301)
	S144= [IR_WB]={0,rS,rT,rD,0,7}                              IR_WB-Write(S135,S143)
	S145= CtrlALUOut_WB=1                                       Premise(F307)
	S146= [ALUOut_WB]=FU(b)>>{FU(a)}[4:0]                       ALUOut_WB-Write(S137,S145)

WB	S147= IR_WB.Out15_11=rD                                     IR-Out(S144)
	S148= ALUOut_WB.Out=FU(b)>>{FU(a)}[4:0]                     ALUOut_WB-Out(S146)
	S149= IR_WB.Out15_11=>GPR.WReg                              Premise(F313)
	S150= GPR.WReg=rD                                           Path(S147,S149)
	S151= ALUOut_WB.Out=>GPR.WData                              Premise(F314)
	S152= GPR.WData=FU(b)>>{FU(a)}[4:0]                         Path(S148,S151)
	S153= CtrlPC=0                                              Premise(F322)
	S154= CtrlPCInc=0                                           Premise(F323)
	S155= PC[Out]=addr+4                                        PC-Hold(S140,S153,S154)
	S156= CtrlICache=0                                          Premise(F325)
	S157= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S142,S156)
	S158= CtrlGPR=1                                             Premise(F331)
	S159= GPR[rD]=FU(b)>>{FU(a)}[4:0]                           GPR-Write(S150,S152,S158)

POST	S155= PC[Out]=addr+4                                        PC-Hold(S140,S153,S154)
	S157= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S142,S156)
	S159= GPR[rD]=FU(b)>>{FU(a)}[4:0]                           GPR-Write(S150,S152,S158)

