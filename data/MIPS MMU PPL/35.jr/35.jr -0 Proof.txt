
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,0,hint,8}                      Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={0,rS,0,0,hint,8}                     IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F39)

IF(IMMU)	S20= PC.Out=addr                                            PC-Out(S14)
	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S22= IAddrReg.Out=>IMem.RAddr                               Premise(F43)
	S23= IMem.RAddr={pid,addr}                                  Path(S21,S22)
	S24= IMem.Out={0,rS,0,0,hint,8}                             IMem-Read(S23,S18)
	S25= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S23,S18)
	S26= IMem.Out=>IRMux.MemData                                Premise(F44)
	S27= IRMux.MemData={0,rS,0,0,hint,8}                        Path(S24,S26)
	S28= IRMux.Out={0,rS,0,0,hint,8}                            IRMux-Select2(S27)
	S29= IRMux.Out=>IR_ID.In                                    Premise(F48)
	S30= IR_ID.In={0,rS,0,0,hint,8}                             Path(S28,S29)
	S31= IMem.MEM8WordOut=>ICache.WData                         Premise(F49)
	S32= ICache.WData=IMemGet8Word({pid,addr})                  Path(S25,S31)
	S33= PC.Out=>ICache.IEA                                     Premise(F50)
	S34= ICache.IEA=addr                                        Path(S20,S33)
	S35= CtrlICache=1                                           Premise(F61)
	S36= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S34,S32,S35)
	S37= CtrlIR_ID=1                                            Premise(F64)
	S38= [IR_ID]={0,rS,0,0,hint,8}                              IR_ID-Write(S30,S37)
	S39= CtrlGPR=0                                              Premise(F67)
	S40= GPR[rS]=a                                              GPR-Hold(S19,S39)

ID	S41= IR_ID.Out25_21=rS                                      IR-Out(S38)
	S42= IR_ID.Out25_21=>GPR.RReg1                              Premise(F77)
	S43= GPR.RReg1=rS                                           Path(S41,S42)
	S44= GPR.Rdata1=a                                           GPR-Read(S43,S40)
	S45= GPR.Rdata1=>FU.InID1                                   Premise(F79)
	S46= FU.InID1=a                                             Path(S44,S45)
	S47= FU.OutID1=FU(a)                                        FU-Forward(S46)
	S48= FU.OutID1=>PC.In                                       Premise(F81)
	S49= PC.In=FU(a)                                            Path(S47,S48)
	S50= CtrlPC=1                                               Premise(F91)
	S51= CtrlPCInc=0                                            Premise(F92)
	S52= PC[Out]=FU(a)                                          PC-Write(S49,S50,S51)
	S53= CtrlICache=0                                           Premise(F94)
	S54= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S36,S53)

EX	S55= CtrlPC=0                                               Premise(F118)
	S56= CtrlPCInc=0                                            Premise(F119)
	S57= PC[Out]=FU(a)                                          PC-Hold(S52,S55,S56)
	S58= CtrlICache=0                                           Premise(F121)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S54,S58)

MEM	S60= CtrlPC=0                                               Premise(F150)
	S61= CtrlPCInc=0                                            Premise(F151)
	S62= PC[Out]=FU(a)                                          PC-Hold(S57,S60,S61)
	S63= CtrlICache=0                                           Premise(F153)
	S64= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S63)

WB	S65= CtrlPC=0                                               Premise(F231)
	S66= CtrlPCInc=0                                            Premise(F232)
	S67= PC[Out]=FU(a)                                          PC-Hold(S62,S65,S66)
	S68= CtrlICache=0                                           Premise(F234)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S68)

POST	S67= PC[Out]=FU(a)                                          PC-Hold(S62,S65,S66)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S68)

