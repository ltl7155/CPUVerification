
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={1,rS,1,offset}                            Premise(F3)
	S2= GPR[rS]=a                                               Premise(F4)

IF	S3= PC.Out=addr                                             PC-Out(S0)
	S4= PC.Out=>ICache.IEA                                      Premise(F9)
	S5= ICache.IEA=addr                                         Path(S3,S4)
	S6= ICache.Out={1,rS,1,offset}                              ICache-Search(S5,S1)
	S7= ICache.Out=>IR.In                                       Premise(F10)
	S8= IR.In={1,rS,1,offset}                                   Path(S6,S7)
	S9= CtrlPC=0                                                Premise(F18)
	S10= CtrlPCInc=1                                            Premise(F19)
	S11= PC[CIA]=addr                                           PC-Inc(S0,S9,S10)
	S12= CtrlIR=1                                               Premise(F22)
	S13= [IR]={1,rS,1,offset}                                   IR-Write(S8,S12)
	S14= CtrlGPR=0                                              Premise(F26)
	S15= GPR[rS]=a                                              GPR-Hold(S2,S14)

ID	S16= IR.Out25_21=rS                                         IR-Out(S13)
	S17= IR.Out25_21=>GPR.RReg1                                 Premise(F50)
	S18= GPR.RReg1=rS                                           Path(S16,S17)
	S19= GPR.Rdata1=a                                           GPR-Read(S18,S15)
	S20= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S21= GPR.Rdata1=>A.In                                       Premise(F52)
	S22= A.In=a                                                 Path(S19,S21)
	S23= GPR.Rdata2=>B.In                                       Premise(F53)
	S24= B.In=32'b0                                             Path(S20,S23)
	S25= CtrlPCInc=0                                            Premise(F60)
	S26= PC[CIA]=addr                                           PC-Hold(S11,S25)
	S27= CtrlIR=0                                               Premise(F63)
	S28= [IR]={1,rS,1,offset}                                   IR-Hold(S13,S27)
	S29= CtrlA=1                                                Premise(F68)
	S30= [A]=a                                                  A-Write(S22,S29)
	S31= CtrlB=1                                                Premise(F69)
	S32= [B]=32'b0                                              B-Write(S24,S31)

EX	S33= PC.CIA=addr                                            PC-Out(S26)
	S34= IR.Out15_0=offset                                      IR-Out(S28)
	S35= A.Out=a                                                A-Out(S30)
	S36= B.Out=32'b0                                            B-Out(S32)
	S37= IR.Out15_0=>SEXT.In                                    Premise(F72)
	S38= SEXT.In=offset                                         Path(S34,S37)
	S39= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S38)
	S40= PC.CIA=>ALU.A                                          Premise(F73)
	S41= ALU.A=addr                                             Path(S33,S40)
	S42= SEXT.Out=>ALU.B                                        Premise(F74)
	S43= ALU.B={14{offset[15]},offset,2{0}}                     Path(S39,S42)
	S44= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S41,S43)
	S45= ALU.Out=>ALUOut.In                                     Premise(F76)
	S46= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S44,S45)
	S47= A.Out=>CMPU.A                                          Premise(F77)
	S48= CMPU.A=a                                               Path(S35,S47)
	S49= B.Out=>CMPU.B                                          Premise(F78)
	S50= CMPU.B=32'b0                                           Path(S36,S49)
	S51= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S48,S50)
	S52= CMPU.lt=>ConditionReg.In                               Premise(F80)
	S53= ConditionReg.In=CompareS(a,32'b0)                      Path(S51,S52)
	S54= CtrlALUOut=1                                           Premise(F97)
	S55= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S46,S54)
	S56= CtrlConditionReg=1                                     Premise(F98)
	S57= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S53,S56)

MEM	S58= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S55)
	S59= ALUOut.Out=>PC.In                                      Premise(F99)
	S60= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S58,S59)
	S61= CtrlPC=1                                               Premise(F106)
	S62= CtrlPCInc=0                                            Premise(F107)
	S63= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S60,S61,S62)
	S64= CtrlConditionReg=0                                     Premise(F118)
	S65= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S57,S64)

WB	S66= CtrlPC=0                                               Premise(F160)
	S67= CtrlPCInc=0                                            Premise(F161)
	S68= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S63,S66,S67)
	S69= CtrlConditionReg=0                                     Premise(F172)
	S70= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S65,S69)

POST	S68= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S63,S66,S67)
	S70= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S65,S69)

