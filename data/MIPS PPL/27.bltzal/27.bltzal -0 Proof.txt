
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,16,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PC.Out=>IMem.RAddr                                      Premise(F3)
	S6= IMem.RAddr=addr                                         Path(S4,S5)
	S7= CP0.ASID=>IMem.ASID                                     Premise(F4)
	S8= IMem.ASID=pid                                           Path(S3,S7)
	S9= IMem.Out={1,rS,16,offset}                               IMem-Read(S8,S6,S2)
	S10= IMem.Out=>IR_ID.In                                     Premise(F6)
	S11= IR_ID.In={1,rS,16,offset}                              Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F43)
	S13= CtrlPCInc=1                                            Premise(F44)
	S14= PC[Out]=addr+4                                         PC-Inc(S1,S12,S13)
	S15= PC[CIA]=addr                                           PC-Inc(S1,S12,S13)
	S16= CtrlIR_ID=1                                            Premise(F50)
	S17= [IR_ID]={1,rS,16,offset}                               IR_ID-Write(S11,S16)
	S18= GPR[rS]=a                                              Premise(F61)

ID	S19= IR_ID.Out={1,rS,16,offset}                             IR-Out(S17)
	S20= IR_ID.Out25_21=rS                                      IR-Out(S17)
	S21= IR_ID.Out25_21=>GPR.RReg1                              Premise(F70)
	S22= GPR.RReg1=rS                                           Path(S20,S21)
	S23= GPR.Rdata1=a                                           GPR-Read(S22,S18)
	S24= GPR.Rdata1=>FU.InID1                                   Premise(F72)
	S25= FU.InID1=a                                             Path(S23,S24)
	S26= FU.OutID1=FU(a)                                        FU-Forward(S25)
	S27= FU.OutID1=>A_EX.In                                     Premise(F74)
	S28= A_EX.In=FU(a)                                          Path(S26,S27)
	S29= B_EX.In=32'b0                                          Premise(F75)
	S30= IR_ID.Out=>IR_EX.In                                    Premise(F76)
	S31= IR_EX.In={1,rS,16,offset}                              Path(S19,S30)
	S32= CtrlPC=0                                               Premise(F104)
	S33= CtrlPCInc=0                                            Premise(F105)
	S34= PC[CIA]=addr                                           PC-Hold(S15,S33)
	S35= PC[Out]=addr+4                                         PC-Hold(S14,S32,S33)
	S36= CtrlA_EX=1                                             Premise(F113)
	S37= [A_EX]=FU(a)                                           A_EX-Write(S28,S36)
	S38= CtrlB_EX=1                                             Premise(F114)
	S39= [B_EX]=32'b0                                           B_EX-Write(S29,S38)
	S40= CtrlIR_EX=1                                            Premise(F115)
	S41= [IR_EX]={1,rS,16,offset}                               IR_EX-Write(S31,S40)

EX	S42= PC.CIA=addr                                            PC-Out(S34)
	S43= A_EX.Out=FU(a)                                         A_EX-Out(S37)
	S44= B_EX.Out=32'b0                                         B_EX-Out(S39)
	S45= IR_EX.Out15_0=offset                                   IR_EX-Out(S41)
	S46= IR_EX.Out15_0=>SEXT.In                                 Premise(F141)
	S47= SEXT.In=offset                                         Path(S45,S46)
	S48= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S47)
	S49= PC.CIA=>ALU.A                                          Premise(F142)
	S50= ALU.A=addr                                             Path(S42,S49)
	S51= SEXT.Out=>ALU.B                                        Premise(F143)
	S52= ALU.B={14{offset[15]},offset,2{0}}                     Path(S48,S51)
	S53= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S50,S52)
	S54= ALU.Out=>ALUOut_MEM.In                                 Premise(F145)
	S55= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S53,S54)
	S56= A_EX.Out=>CMPU.A                                       Premise(F146)
	S57= CMPU.A=FU(a)                                           Path(S43,S56)
	S58= B_EX.Out=>CMPU.B                                       Premise(F147)
	S59= CMPU.B=32'b0                                           Path(S44,S58)
	S60= CMPU.lt=CompareS(FU(a),32'b0)                          CMPU-CMPS(S57,S59)
	S61= CMPU.lt=>ConditionReg_MEM.In                           Premise(F149)
	S62= ConditionReg_MEM.In=CompareS(FU(a),32'b0)              Path(S60,S61)
	S63= CtrlPC=0                                               Premise(F165)
	S64= CtrlPCInc=0                                            Premise(F166)
	S65= PC[Out]=addr+4                                         PC-Hold(S35,S63,S64)
	S66= CtrlALUOut_MEM=1                                       Premise(F177)
	S67= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S55,S66)
	S68= CtrlConditionReg_MEM=1                                 Premise(F178)
	S69= [ConditionReg_MEM]=CompareS(FU(a),32'b0)               ConditionReg_MEM-Write(S62,S68)

MEM	S70= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S67)
	S71= ConditionReg_MEM.Out=CompareS(FU(a),32'b0)             ConditionReg_MEM-Out(S69)
	S72= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F214)
	S73= ALUOut_WB.In=addr+{14{offset[15]},offset,2{0}}         Path(S70,S72)
	S74= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F215)
	S75= ConditionReg_WB.In=CompareS(FU(a),32'b0)               Path(S71,S74)
	S76= CtrlPC=0                                               Premise(F224)
	S77= CtrlPCInc=0                                            Premise(F225)
	S78= PC[Out]=addr+4                                         PC-Hold(S65,S76,S77)
	S79= CtrlALUOut_WB=1                                        Premise(F240)
	S80= [ALUOut_WB]=addr+{14{offset[15]},offset,2{0}}          ALUOut_WB-Write(S73,S79)
	S81= CtrlConditionReg_WB=1                                  Premise(F241)
	S82= [ConditionReg_WB]=CompareS(FU(a),32'b0)                ConditionReg_WB-Write(S75,S81)

WB	S83= PC.Out=addr+4                                          PC-Out(S78)
	S84= ALUOut_WB.Out=addr+{14{offset[15]},offset,2{0}}        ALUOut_WB-Out(S80)
	S85= GPR.WReg=5'd31                                         Premise(F278)
	S86= PC.Out=>GPR.WData                                      Premise(F279)
	S87= GPR.WData=addr+4                                       Path(S83,S86)
	S88= ALUOut_WB.Out=>PC.In                                   Premise(F282)
	S89= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S84,S88)
	S90= CtrlPC=1                                               Premise(F284)
	S91= CtrlPCInc=0                                            Premise(F285)
	S92= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S89,S90,S91)
	S93= CtrlGPR=1                                              Premise(F292)
	S94= GPR[5'd31]=addr+4                                      GPR-Write(S85,S87,S93)
	S95= CtrlConditionReg_WB=0                                  Premise(F301)
	S96= [ConditionReg_WB]=CompareS(FU(a),32'b0)                ConditionReg_WB-Hold(S82,S95)

POST	S92= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S89,S90,S91)
	S94= GPR[5'd31]=addr+4                                      GPR-Write(S85,S87,S93)
	S96= [ConditionReg_WB]=CompareS(FU(a),32'b0)                ConditionReg_WB-Hold(S82,S95)

