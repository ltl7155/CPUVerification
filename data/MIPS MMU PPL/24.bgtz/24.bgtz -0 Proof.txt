
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={7,rS,0,offset}                        Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={7,rS,0,offset}                       IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F51)

IF(IMMU)	S20= PC.Out=addr                                            PC-Out(S14)
	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S22= IAddrReg.Out=>IMem.RAddr                               Premise(F55)
	S23= IMem.RAddr={pid,addr}                                  Path(S21,S22)
	S24= IMem.Out={7,rS,0,offset}                               IMem-Read(S23,S18)
	S25= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S23,S18)
	S26= IMem.Out=>IRMux.MemData                                Premise(F56)
	S27= IRMux.MemData={7,rS,0,offset}                          Path(S24,S26)
	S28= IRMux.Out={7,rS,0,offset}                              IRMux-Select2(S27)
	S29= IRMux.Out=>IR_ID.In                                    Premise(F60)
	S30= IR_ID.In={7,rS,0,offset}                               Path(S28,S29)
	S31= IMem.MEM8WordOut=>ICache.WData                         Premise(F61)
	S32= ICache.WData=IMemGet8Word({pid,addr})                  Path(S25,S31)
	S33= PC.Out=>ICache.IEA                                     Premise(F62)
	S34= ICache.IEA=addr                                        Path(S20,S33)
	S35= CtrlPC=0                                               Premise(F70)
	S36= CtrlPCInc=1                                            Premise(F71)
	S37= PC[CIA]=addr                                           PC-Inc(S14,S35,S36)
	S38= CtrlICache=1                                           Premise(F73)
	S39= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S34,S32,S38)
	S40= CtrlIR_ID=1                                            Premise(F76)
	S41= [IR_ID]={7,rS,0,offset}                                IR_ID-Write(S30,S40)
	S42= CtrlGPR=0                                              Premise(F79)
	S43= GPR[rS]=a                                              GPR-Hold(S19,S42)

ID	S44= IR_ID.Out={7,rS,0,offset}                              IR-Out(S41)
	S45= IR_ID.Out25_21=rS                                      IR-Out(S41)
	S46= IR_ID.Out25_21=>GPR.RReg1                              Premise(F101)
	S47= GPR.RReg1=rS                                           Path(S45,S46)
	S48= GPR.Rdata1=a                                           GPR-Read(S47,S43)
	S49= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S50= GPR.Rdata1=>FU.InID1                                   Premise(F103)
	S51= FU.InID1=a                                             Path(S48,S50)
	S52= FU.OutID1=FU(a)                                        FU-Forward(S51)
	S53= FU.OutID1=>A_EX.In                                     Premise(F105)
	S54= A_EX.In=FU(a)                                          Path(S52,S53)
	S55= GPR.Rdata2=>FU.InID2                                   Premise(F106)
	S56= FU.InID2=32'b0                                         Path(S49,S55)
	S57= FU.OutID2=FU(32'b0)                                    FU-Forward(S56)
	S58= FU.OutID2=>B_EX.In                                     Premise(F108)
	S59= B_EX.In=FU(32'b0)                                      Path(S57,S58)
	S60= IR_ID.Out=>IR_EX.In                                    Premise(F109)
	S61= IR_EX.In={7,rS,0,offset}                               Path(S44,S60)
	S62= CtrlPCInc=0                                            Premise(F118)
	S63= PC[CIA]=addr                                           PC-Hold(S37,S62)
	S64= CtrlICache=0                                           Premise(F120)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S39,S64)
	S66= CtrlA_EX=1                                             Premise(F127)
	S67= [A_EX]=FU(a)                                           A_EX-Write(S54,S66)
	S68= CtrlB_EX=1                                             Premise(F128)
	S69= [B_EX]=FU(32'b0)                                       B_EX-Write(S59,S68)
	S70= CtrlIR_EX=1                                            Premise(F129)
	S71= [IR_EX]={7,rS,0,offset}                                IR_EX-Write(S61,S70)

EX	S72= PC.CIA=addr                                            PC-Out(S63)
	S73= A_EX.Out=FU(a)                                         A_EX-Out(S67)
	S74= B_EX.Out=FU(32'b0)                                     B_EX-Out(S69)
	S75= IR_EX.Out15_0=offset                                   IR_EX-Out(S71)
	S76= IR_EX.Out15_0=>SEXT.In                                 Premise(F148)
	S77= SEXT.In=offset                                         Path(S75,S76)
	S78= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S77)
	S79= PC.CIA=>ALU.A                                          Premise(F149)
	S80= ALU.A=addr                                             Path(S72,S79)
	S81= SEXT.Out=>ALU.B                                        Premise(F150)
	S82= ALU.B={14{offset[15]},offset,2{0}}                     Path(S78,S81)
	S83= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S80,S82)
	S84= ALU.Out=>ALUOut_MEM.In                                 Premise(F152)
	S85= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S83,S84)
	S86= A_EX.Out=>CMPU.A                                       Premise(F153)
	S87= CMPU.A=FU(a)                                           Path(S73,S86)
	S88= B_EX.Out=>CMPU.B                                       Premise(F154)
	S89= CMPU.B=FU(32'b0)                                       Path(S74,S88)
	S90= CMPU.gt=CompareS(FU(a),FU(32'b0))                      CMPU-CMPS(S87,S89)
	S91= CMPU.gt=>ConditionReg_MEM.In                           Premise(F156)
	S92= ConditionReg_MEM.In=CompareS(FU(a),FU(32'b0))          Path(S90,S91)
	S93= CtrlICache=0                                           Premise(F167)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S93)
	S95= CtrlALUOut_MEM=1                                       Premise(F177)
	S96= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S85,S95)
	S97= CtrlConditionReg_MEM=1                                 Premise(F178)
	S98= [ConditionReg_MEM]=CompareS(FU(a),FU(32'b0))           ConditionReg_MEM-Write(S92,S97)

MEM	S99= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S96)
	S100= ConditionReg_MEM.Out=CompareS(FU(a),FU(32'b0))        ConditionReg_MEM-Out(S98)
	S101= ALUOut_MEM.Out=>PC.In                                 Premise(F197)
	S102= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S99,S101)
	S103= ConditionReg_MEM.Out=>ConditionReg_WB.In              Premise(F205)
	S104= ConditionReg_WB.In=CompareS(FU(a),FU(32'b0))          Path(S100,S103)
	S105= CtrlPC=1                                              Premise(F214)
	S106= CtrlPCInc=0                                           Premise(F215)
	S107= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S102,S105,S106)
	S108= CtrlICache=0                                          Premise(F217)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S108)
	S110= CtrlConditionReg_WB=1                                 Premise(F238)
	S111= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))           ConditionReg_WB-Write(S104,S110)

WB	S112= CtrlPC=0                                              Premise(F330)
	S113= CtrlPCInc=0                                           Premise(F331)
	S114= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S107,S112,S113)
	S115= CtrlICache=0                                          Premise(F333)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S115)
	S117= CtrlConditionReg_WB=0                                 Premise(F354)
	S118= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))           ConditionReg_WB-Hold(S111,S117)

POST	S114= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S107,S112,S113)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S115)
	S118= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))           ConditionReg_WB-Hold(S111,S117)

