
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rT,rD,0,2}                      Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F61)
	S6= PC.Out=>IMMU.IEA                                        Premise(F66)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F67)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlIAddrReg=1                                         Premise(F126)
	S13= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S12)
	S14= CtrlPC=0                                               Premise(F127)
	S15= CtrlPCInc=0                                            Premise(F128)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIMem=0                                             Premise(F129)
	S18= IMem[{pid,addr}]={28,rS,rT,rD,0,2}                     IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F136)
	S20= GPR[rT]=b                                              Premise(F137)

IMMU	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S13)
	S22= PC.Out=addr                                            PC-Out(S16)
	S23= PC.Out=>ICache.IEA                                     Premise(F197)
	S24= ICache.IEA=addr                                        Path(S22,S23)
	S25= IMem.MEM8WordOut=>ICache.WData                         Premise(F199)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F203)
	S27= IMem.RAddr={pid,addr}                                  Path(S21,S26)
	S28= IMem.Out={28,rS,rT,rD,0,2}                             IMem-Read(S27,S18)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S18)
	S30= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S25)
	S31= IMem.Out=>IRMux.MemData                                Premise(F206)
	S32= IRMux.MemData={28,rS,rT,rD,0,2}                        Path(S28,S31)
	S33= IRMux.Out={28,rS,rT,rD,0,2}                            IRMux-Select2(S32)
	S34= IRMux.Out=>IR_ID.In                                    Premise(F212)
	S35= IR_ID.In={28,rS,rT,rD,0,2}                             Path(S33,S34)
	S36= CtrlICache=1                                           Premise(F250)
	S37= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S24,S30,S36)
	S38= CtrlIR_ID=1                                            Premise(F255)
	S39= [IR_ID]={28,rS,rT,rD,0,2}                              IR_ID-Write(S35,S38)
	S40= CtrlGPR=0                                              Premise(F259)
	S41= GPR[rS]=a                                              GPR-Hold(S19,S40)
	S42= GPR[rT]=b                                              GPR-Hold(S20,S40)
	S43= CtrlPC=0                                               Premise(F262)
	S44= CtrlPCInc=1                                            Premise(F263)
	S45= PC[Out]=addr+4                                         PC-Inc(S16,S43,S44)

ID	S46= IR_ID.Out={28,rS,rT,rD,0,2}                            IR-Out(S39)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S39)
	S48= IR_ID.Out20_16=rT                                      IR-Out(S39)
	S49= FU.OutID1=>A_EX.In                                     Premise(F271)
	S50= FU.OutID2=>B_EX.In                                     Premise(F273)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F318)
	S52= GPR.Rdata2=>FU.InID2                                   Premise(F320)
	S53= IR_ID.Out25_21=>GPR.RReg1                              Premise(F325)
	S54= GPR.RReg1=rS                                           Path(S47,S53)
	S55= GPR.Rdata1=a                                           GPR-Read(S54,S41)
	S56= FU.InID1=a                                             Path(S55,S51)
	S57= FU.OutID1=FU(a)                                        FU-Forward(S56)
	S58= A_EX.In=FU(a)                                          Path(S57,S49)
	S59= IR_ID.Out20_16=>GPR.RReg2                              Premise(F326)
	S60= GPR.RReg2=rT                                           Path(S48,S59)
	S61= GPR.Rdata2=b                                           GPR-Read(S60,S42)
	S62= FU.InID2=b                                             Path(S61,S52)
	S63= FU.OutID2=FU(b)                                        FU-Forward(S62)
	S64= B_EX.In=FU(b)                                          Path(S63,S50)
	S65= IR_ID.Out=>IR_EX.In                                    Premise(F343)
	S66= IR_EX.In={28,rS,rT,rD,0,2}                             Path(S46,S65)
	S67= CtrlA_EX=1                                             Premise(F377)
	S68= [A_EX]=FU(a)                                           A_EX-Write(S58,S67)
	S69= CtrlB_EX=1                                             Premise(F380)
	S70= [B_EX]=FU(b)                                           B_EX-Write(S64,S69)
	S71= CtrlICache=0                                           Premise(F383)
	S72= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S37,S71)
	S73= CtrlIR_EX=1                                            Premise(F387)
	S74= [IR_EX]={28,rS,rT,rD,0,2}                              IR_EX-Write(S66,S73)
	S75= CtrlPC=0                                               Premise(F395)
	S76= CtrlPCInc=0                                            Premise(F396)
	S77= PC[Out]=addr+4                                         PC-Hold(S45,S75,S76)

EX	S78= A_EX.Out=FU(a)                                         A_EX-Out(S68)
	S79= B_EX.Out=FU(b)                                         B_EX-Out(S70)
	S80= IR_EX.Out={28,rS,rT,rD,0,2}                            IR_EX-Out(S74)
	S81= IR_EX.Out=>IR_MEM.In                                   Premise(F480)
	S82= IR_MEM.In={28,rS,rT,rD,0,2}                            Path(S80,S81)
	S83= MDU.lo=>Lo.In                                          Premise(F483)
	S84= A_EX.Out=>MDU.A                                        Premise(F484)
	S85= MDU.A=FU(a)                                            Path(S78,S84)
	S86= B_EX.Out=>MDU.B                                        Premise(F485)
	S87= MDU.B=FU(b)                                            Path(S79,S86)
	S88= MDU.lo=(FU(a)×FU(b))[31:0]                             MDU(S85,S87)
	S89= Lo.In=(FU(a)×FU(b))[31:0]                              Path(S88,S83)
	S90= CtrlICache=0                                           Premise(F517)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S72,S90)
	S92= CtrlIR_MEM=1                                           Premise(F524)
	S93= [IR_MEM]={28,rS,rT,rD,0,2}                             IR_MEM-Write(S82,S92)
	S94= CtrlLo=1                                               Premise(F527)
	S95= [Lo]=(FU(a)×FU(b))[31:0]                               Lo-Write(S89,S94)
	S96= CtrlPC=0                                               Premise(F529)
	S97= CtrlPCInc=0                                            Premise(F530)
	S98= PC[Out]=addr+4                                         PC-Hold(S77,S96,S97)

MEM	S99= IR_MEM.Out={28,rS,rT,rD,0,2}                           IR_MEM-Out(S93)
	S100= IR_MEM.Out=>IR_WB.In                                  Premise(F616)
	S101= IR_WB.In={28,rS,rT,rD,0,2}                            Path(S99,S100)
	S102= CtrlICache=0                                          Premise(F650)
	S103= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S102)
	S104= CtrlIR_WB=1                                           Premise(F658)
	S105= [IR_WB]={28,rS,rT,rD,0,2}                             IR_WB-Write(S101,S104)
	S106= CtrlLo=0                                              Premise(F660)
	S107= [Lo]=(FU(a)×FU(b))[31:0]                              Lo-Hold(S95,S106)
	S108= CtrlPC=0                                              Premise(F662)
	S109= CtrlPCInc=0                                           Premise(F663)
	S110= PC[Out]=addr+4                                        PC-Hold(S98,S108,S109)

WB	S111= IR_WB.Out15_11=rD                                     IR-Out(S105)
	S112= Lo.Out=(FU(a)×FU(b))[31:0]                            Lo-Out(S107)
	S113= Lo.Out=>GPR.WData                                     Premise(F993)
	S114= GPR.WData=(FU(a)×FU(b))[31:0]                         Path(S112,S113)
	S115= IR_WB.Out15_11=>GPR.WReg                              Premise(F994)
	S116= GPR.WReg=rD                                           Path(S111,S115)
	S117= CtrlICache=0                                          Premise(F1049)
	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S117)
	S119= CtrlGPR=1                                             Premise(F1058)
	S120= GPR[rD]=(FU(a)×FU(b))[31:0]                           GPR-Write(S116,S114,S119)
	S121= CtrlPC=0                                              Premise(F1061)
	S122= CtrlPCInc=0                                           Premise(F1062)
	S123= PC[Out]=addr+4                                        PC-Hold(S110,S121,S122)

POST	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S117)
	S120= GPR[rD]=(FU(a)×FU(b))[31:0]                           GPR-Write(S116,S114,S119)
	S123= PC[Out]=addr+4                                        PC-Hold(S110,S121,S122)

