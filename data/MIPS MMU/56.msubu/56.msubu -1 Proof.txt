
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={28,rS,rT,0,0,5}                           Premise(F3)
	S2= GPR[rS]=a                                               Premise(F4)
	S3= GPR[rT]=b                                               Premise(F5)
	S4= [Lo]=lo                                                 Premise(F6)
	S5= [Hi]=hi                                                 Premise(F7)

IF	S6= PC.Out=addr                                             PC-Out(S0)
	S7= PC.Out=>ICache.IEA                                      Premise(F12)
	S8= ICache.IEA=addr                                         Path(S6,S7)
	S9= ICache.Out={28,rS,rT,0,0,5}                             ICache-Search(S8,S1)
	S10= ICache.Out=>IR.In                                      Premise(F13)
	S11= IR.In={28,rS,rT,0,0,5}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F21)
	S13= CtrlPCInc=1                                            Premise(F22)
	S14= PC[Out]=addr+4                                         PC-Inc(S0,S12,S13)
	S15= CtrlIR=1                                               Premise(F25)
	S16= [IR]={28,rS,rT,0,0,5}                                  IR-Write(S11,S15)
	S17= CtrlGPR=0                                              Premise(F29)
	S18= GPR[rS]=a                                              GPR-Hold(S2,S17)
	S19= GPR[rT]=b                                              GPR-Hold(S3,S17)
	S20= CtrlHi=0                                               Premise(F32)
	S21= [Hi]=hi                                                Hi-Hold(S5,S20)
	S22= CtrlLo=0                                               Premise(F33)
	S23= [Lo]=lo                                                Lo-Hold(S4,S22)

ID	S24= IR.Out25_21=rS                                         IR-Out(S16)
	S25= IR.Out20_16=rT                                         IR-Out(S16)
	S26= IR.Out25_21=>GPR.RReg1                                 Premise(F53)
	S27= GPR.RReg1=rS                                           Path(S24,S26)
	S28= GPR.Rdata1=a                                           GPR-Read(S27,S18)
	S29= IR.Out20_16=>GPR.RReg2                                 Premise(F54)
	S30= GPR.RReg2=rT                                           Path(S25,S29)
	S31= GPR.Rdata2=b                                           GPR-Read(S30,S19)
	S32= GPR.Rdata1=>A.In                                       Premise(F56)
	S33= A.In=a                                                 Path(S28,S32)
	S34= GPR.Rdata2=>B.In                                       Premise(F57)
	S35= B.In=b                                                 Path(S31,S34)
	S36= CtrlPC=0                                               Premise(F63)
	S37= CtrlPCInc=0                                            Premise(F64)
	S38= PC[Out]=addr+4                                         PC-Hold(S14,S36,S37)
	S39= CtrlA=1                                                Premise(F72)
	S40= [A]=a                                                  A-Write(S33,S39)
	S41= CtrlB=1                                                Premise(F73)
	S42= [B]=b                                                  B-Write(S35,S41)
	S43= CtrlHi=0                                               Premise(F74)
	S44= [Hi]=hi                                                Hi-Hold(S21,S43)
	S45= CtrlLo=0                                               Premise(F75)
	S46= [Lo]=lo                                                Lo-Hold(S23,S45)

EX	S47= A.Out=a                                                A-Out(S40)
	S48= B.Out=b                                                B-Out(S42)
	S49= Hi.Out=hi                                              Hi-Out(S44)
	S50= Lo.Out=lo                                              Lo-Out(S46)
	S51= Hi.Out=>MDU.Hi                                         Premise(F76)
	S52= MDU.Hi=hi                                              Path(S49,S51)
	S53= Lo.Out=>MDU.Lo                                         Premise(F77)
	S54= MDU.Lo=lo                                              Path(S50,S53)
	S55= A.Out=>MDU.A                                           Premise(F78)
	S56= MDU.A=a                                                Path(S47,S55)
	S57= B.Out=>MDU.B                                           Premise(F79)
	S58= MDU.B=b                                                Path(S48,S57)
	S59= MDU.lo=({hi,lo}-a*b)[31:0]                             MDU(S56,S58,S52,S54)
	S60= MDU.hi=({hi,lo}-a*b)[63:32]                            MDU(S56,S58,S52,S54)
	S61= MDU.hi=>Hi.In                                          Premise(F81)
	S62= Hi.In=({hi,lo}-a*b)[63:32]                             Path(S60,S61)
	S63= MDU.lo=>Lo.In                                          Premise(F82)
	S64= Lo.In=({hi,lo}-a*b)[31:0]                              Path(S59,S63)
	S65= CtrlPC=0                                               Premise(F88)
	S66= CtrlPCInc=0                                            Premise(F89)
	S67= PC[Out]=addr+4                                         PC-Hold(S38,S65,S66)
	S68= CtrlHi=1                                               Premise(F99)
	S69= [Hi]=({hi,lo}-a*b)[63:32]                              Hi-Write(S62,S68)
	S70= CtrlLo=1                                               Premise(F100)
	S71= [Lo]=({hi,lo}-a*b)[31:0]                               Lo-Write(S64,S70)

MEM	S72= CtrlPC=0                                               Premise(F106)
	S73= CtrlPCInc=0                                            Premise(F107)
	S74= PC[Out]=addr+4                                         PC-Hold(S67,S72,S73)
	S75= CtrlHi=0                                               Premise(F117)
	S76= [Hi]=({hi,lo}-a*b)[63:32]                              Hi-Hold(S69,S75)
	S77= CtrlLo=0                                               Premise(F118)
	S78= [Lo]=({hi,lo}-a*b)[31:0]                               Lo-Hold(S71,S77)

MEM(DMMU1)	S79= CtrlPC=0                                               Premise(F124)
	S80= CtrlPCInc=0                                            Premise(F125)
	S81= PC[Out]=addr+4                                         PC-Hold(S74,S79,S80)
	S82= CtrlHi=0                                               Premise(F135)
	S83= [Hi]=({hi,lo}-a*b)[63:32]                              Hi-Hold(S76,S82)
	S84= CtrlLo=0                                               Premise(F136)
	S85= [Lo]=({hi,lo}-a*b)[31:0]                               Lo-Hold(S78,S84)

MEM(DMMU2)	S86= CtrlPC=0                                               Premise(F142)
	S87= CtrlPCInc=0                                            Premise(F143)
	S88= PC[Out]=addr+4                                         PC-Hold(S81,S86,S87)
	S89= CtrlHi=0                                               Premise(F153)
	S90= [Hi]=({hi,lo}-a*b)[63:32]                              Hi-Hold(S83,S89)
	S91= CtrlLo=0                                               Premise(F154)
	S92= [Lo]=({hi,lo}-a*b)[31:0]                               Lo-Hold(S85,S91)

WB	S93= CtrlPC=0                                               Premise(F160)
	S94= CtrlPCInc=0                                            Premise(F161)
	S95= PC[Out]=addr+4                                         PC-Hold(S88,S93,S94)
	S96= CtrlHi=0                                               Premise(F171)
	S97= [Hi]=({hi,lo}-a*b)[63:32]                              Hi-Hold(S90,S96)
	S98= CtrlLo=0                                               Premise(F172)
	S99= [Lo]=({hi,lo}-a*b)[31:0]                               Lo-Hold(S92,S98)

POST	S95= PC[Out]=addr+4                                         PC-Hold(S88,S93,S94)
	S97= [Hi]=({hi,lo}-a*b)[63:32]                              Hi-Hold(S90,S96)
	S99= [Lo]=({hi,lo}-a*b)[31:0]                               Lo-Hold(S92,S98)

