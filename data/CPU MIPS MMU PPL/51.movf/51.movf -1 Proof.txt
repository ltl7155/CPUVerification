
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                   Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F68)
	S6= PC.Out=>IMMU.IEA                                        Premise(F73)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F74)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlIAddrReg=1                                         Premise(F133)
	S13= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S12)
	S14= CtrlPC=0                                               Premise(F134)
	S15= CtrlPCInc=0                                            Premise(F135)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIMem=0                                             Premise(F136)
	S18= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                  IMem-Hold(S2,S17)

IMMU	S19= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S13)
	S20= PC.Out=addr                                            PC-Out(S16)
	S21= PC.Out=>ICache.IEA                                     Premise(F208)
	S22= ICache.IEA=addr                                        Path(S20,S21)
	S23= IMem.MEM8WordOut=>ICache.WData                         Premise(F210)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F214)
	S25= IMem.RAddr={pid,addr}                                  Path(S19,S24)
	S26= IMem.Out={0,rS,cc,0,0,rD,0,1}                          IMem-Read(S25,S18)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S18)
	S28= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S23)
	S29= IMem.Out=>IRMux.MemData                                Premise(F217)
	S30= IRMux.MemData={0,rS,cc,0,0,rD,0,1}                     Path(S26,S29)
	S31= IRMux.Out={0,rS,cc,0,0,rD,0,1}                         IRMux-Select2(S30)
	S32= IRMux.Out=>IR_ID.In                                    Premise(F223)
	S33= IR_ID.In={0,rS,cc,0,0,rD,0,1}                          Path(S31,S32)
	S34= CtrlICache=1                                           Premise(F259)
	S35= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S22,S28,S34)
	S36= CtrlIR_ID=1                                            Premise(F267)
	S37= [IR_ID]={0,rS,cc,0,0,rD,0,1}                           IR_ID-Write(S33,S36)
	S38= CtrlPC=0                                               Premise(F273)
	S39= CtrlPCInc=1                                            Premise(F274)
	S40= PC[Out]=addr+4                                         PC-Inc(S16,S38,S39)

ID	S41= IR_ID.Out={0,rS,cc,0,0,rD,0,1}                         IR-Out(S37)
	S42= IR_ID.Out=>IR_EX.In                                    Premise(F361)
	S43= IR_EX.In={0,rS,cc,0,0,rD,0,1}                          Path(S41,S42)
	S44= CtrlIR_EX=1                                            Premise(F397)
	S45= [IR_EX]={0,rS,cc,0,0,rD,0,1}                           IR_EX-Write(S43,S44)
	S46= CtrlICache=0                                           Premise(F399)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S35,S46)
	S48= CtrlPC=0                                               Premise(F413)
	S49= CtrlPCInc=0                                            Premise(F414)
	S50= PC[Out]=addr+4                                         PC-Hold(S40,S48,S49)

EX	S51= IR_EX.Out20_18=cc                                      IR_EX-Out(S45)
	S52= IR_EX.Out16=0                                          IR_EX-Out(S45)
	S53= IR_EX.Out20_18=>CP1.cc                                 Premise(F428)
	S54= CP1.cc=cc                                              Path(S51,S53)
	S55= IR_EX.Out16=>CP1.tf                                    Premise(F429)
	S56= CP1.tf=0                                               Path(S52,S55)
	S57= CP1.fp=FPConditionCode(cc,0)                           FP-PRODUCT(S54,S56)
	S58= CP1.fp=>ConditionReg_MEM.In                            Premise(F463)
	S59= ConditionReg_MEM.In=FPConditionCode(cc,0)              Path(S57,S58)
	S60= CtrlICache=0                                           Premise(F538)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S60)
	S62= CtrlConditionReg_MEM=1                                 Premise(F541)
	S63= [ConditionReg_MEM]=FPConditionCode(cc,0)               ConditionReg_MEM-Write(S59,S62)
	S64= CtrlPC=0                                               Premise(F552)
	S65= CtrlPCInc=0                                            Premise(F553)
	S66= PC[Out]=addr+4                                         PC-Hold(S50,S64,S65)

MEM	S67= ConditionReg_MEM.Out=FPConditionCode(cc,0)             ConditionReg_MEM-Out(S63)
	S68= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F600)
	S69= ConditionReg_DMMU1.In=FPConditionCode(cc,0)            Path(S67,S68)
	S70= CtrlICache=0                                           Premise(F677)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S70)
	S72= CtrlConditionReg_DMMU1=1                               Premise(F681)
	S73= [ConditionReg_DMMU1]=FPConditionCode(cc,0)             ConditionReg_DMMU1-Write(S69,S72)
	S74= CtrlPC=0                                               Premise(F691)
	S75= CtrlPCInc=0                                            Premise(F692)
	S76= PC[Out]=addr+4                                         PC-Hold(S66,S74,S75)

DMMU1	S77= ConditionReg_DMMU1.Out=FPConditionCode(cc,0)           ConditionReg_DMMU1-Out(S73)
	S78= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In          Premise(F740)
	S79= ConditionReg_DMMU2.In=FPConditionCode(cc,0)            Path(S77,S78)
	S80= CtrlICache=0                                           Premise(F816)
	S81= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S80)
	S82= CtrlConditionReg_DMMU2=1                               Premise(F821)
	S83= [ConditionReg_DMMU2]=FPConditionCode(cc,0)             ConditionReg_DMMU2-Write(S79,S82)
	S84= CtrlPC=0                                               Premise(F830)
	S85= CtrlPCInc=0                                            Premise(F831)
	S86= PC[Out]=addr+4                                         PC-Hold(S76,S84,S85)

DMMU2	S87= ConditionReg_DMMU2.Out=FPConditionCode(cc,0)           ConditionReg_DMMU2-Out(S83)
	S88= ConditionReg_DMMU2.Out=>ConditionReg_WB.In             Premise(F881)
	S89= ConditionReg_WB.In=FPConditionCode(cc,0)               Path(S87,S88)
	S90= CtrlICache=0                                           Premise(F955)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S81,S90)
	S92= CtrlConditionReg_WB=1                                  Premise(F957)
	S93= [ConditionReg_WB]=FPConditionCode(cc,0)                ConditionReg_WB-Write(S89,S92)
	S94= CtrlPC=0                                               Premise(F969)
	S95= CtrlPCInc=0                                            Premise(F970)
	S96= PC[Out]=addr+4                                         PC-Hold(S86,S94,S95)

WB	S97= CtrlICache=0                                           Premise(F1094)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S91,S97)
	S99= CtrlConditionReg_WB=0                                  Premise(F1096)
	S100= [ConditionReg_WB]=FPConditionCode(cc,0)               ConditionReg_WB-Hold(S93,S99)
	S101= CtrlPC=0                                              Premise(F1108)
	S102= CtrlPCInc=0                                           Premise(F1109)
	S103= PC[Out]=addr+4                                        PC-Hold(S96,S101,S102)

POST	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S91,S97)
	S100= [ConditionReg_WB]=FPConditionCode(cc,0)               ConditionReg_WB-Hold(S93,S99)
	S103= PC[Out]=addr+4                                        PC-Hold(S96,S101,S102)

