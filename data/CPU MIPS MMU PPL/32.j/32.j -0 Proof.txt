
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={2,imm}                                Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F44)
	S6= PC.Out=>IMMU.IEA                                        Premise(F49)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F50)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlPC=0                                               Premise(F91)
	S13= CtrlPCInc=0                                            Premise(F92)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F101)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F102)
	S18= IMem[{pid,addr}]={2,imm}                               IMem-Hold(S2,S17)

IMMU	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= PC.Out=>ICache.IEA                                     Premise(F151)
	S22= ICache.IEA=addr                                        Path(S19,S21)
	S23= IMem.MEM8WordOut=>ICache.WData                         Premise(F153)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F157)
	S25= IMem.RAddr={pid,addr}                                  Path(S20,S24)
	S26= IMem.Out={2,imm}                                       IMem-Read(S25,S18)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S18)
	S28= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S23)
	S29= IMem.Out=>IRMux.MemData                                Premise(F160)
	S30= IRMux.MemData={2,imm}                                  Path(S26,S29)
	S31= IRMux.Out={2,imm}                                      IRMux-Select2(S30)
	S32= IRMux.Out=>IR_ID.In                                    Premise(F166)
	S33= IR_ID.In={2,imm}                                       Path(S31,S32)
	S34= CtrlIR_ID=1                                            Premise(F196)
	S35= [IR_ID]={2,imm}                                        IR_ID-Write(S33,S34)
	S36= CtrlPC=0                                               Premise(F197)
	S37= CtrlPCInc=1                                            Premise(F198)
	S38= PC[CIA]=addr                                           PC-Inc(S14,S36,S37)
	S39= CtrlICache=1                                           Premise(F199)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S22,S28,S39)

ID	S41= IR_ID.Out25_0=imm                                      IR-Out(S35)
	S42= PC.CIA31_28=addr[31:28]                                PC-Out(S38)
	S43= IR_ID.Out25_0=>ADDREXT.In                              Premise(F215)
	S44= ADDREXT.In=imm                                         Path(S41,S43)
	S45= PC.CIA31_28=>ADDREXT.PCpart                            Premise(F216)
	S46= ADDREXT.PCpart=addr[31:28]                             Path(S42,S45)
	S47= ADDREXT.Out={addr[31:28],imm,2'b0}                     ADDREXT-EXT(S46,S44)
	S48= ADDREXT.Out=>PC.In                                     Premise(F279)
	S49= PC.In={addr[31:28],imm,2'b0}                           Path(S47,S48)
	S50= CtrlPC=1                                               Premise(F305)
	S51= CtrlPCInc=0                                            Premise(F306)
	S52= PC[Out]={addr[31:28],imm,2'b0}                         PC-Write(S49,S50,S51)
	S53= CtrlICache=0                                           Premise(F307)
	S54= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S53)

EX	S55= CtrlPC=0                                               Premise(F412)
	S56= CtrlPCInc=0                                            Premise(F413)
	S57= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S52,S55,S56)
	S58= CtrlICache=0                                           Premise(F414)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S54,S58)

MEM	S60= CtrlPC=0                                               Premise(F519)
	S61= CtrlPCInc=0                                            Premise(F520)
	S62= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S57,S60,S61)
	S63= CtrlICache=0                                           Premise(F521)
	S64= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S63)

WB	S65= CtrlPC=0                                               Premise(F840)
	S66= CtrlPCInc=0                                            Premise(F841)
	S67= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S62,S65,S66)
	S68= CtrlICache=0                                           Premise(F842)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S68)

POST	S67= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S62,S65,S66)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S68)

