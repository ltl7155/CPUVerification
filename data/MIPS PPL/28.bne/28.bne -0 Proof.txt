
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PC.Out=>IMem.RAddr                                      Premise(F3)
	S6= IMem.RAddr=addr                                         Path(S4,S5)
	S7= CP0.ASID=>IMem.ASID                                     Premise(F4)
	S8= IMem.ASID=pid                                           Path(S3,S7)
	S9= IMem.Out={5,rS,rT,offset}                               IMem-Read(S8,S6,S2)
	S10= IMem.Out=>IR_ID.In                                     Premise(F6)
	S11= IR_ID.In={5,rS,rT,offset}                              Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F40)
	S13= CtrlPCInc=1                                            Premise(F41)
	S14= PC[CIA]=addr                                           PC-Inc(S1,S12,S13)
	S15= CtrlIR_ID=1                                            Premise(F47)
	S16= [IR_ID]={5,rS,rT,offset}                               IR_ID-Write(S11,S15)
	S17= GPR[rS]=a                                              Premise(F57)
	S18= GPR[rT]=b                                              Premise(F58)

ID	S19= IR_ID.Out={5,rS,rT,offset}                             IR-Out(S16)
	S20= IR_ID.Out25_21=rS                                      IR-Out(S16)
	S21= IR_ID.Out20_16=rT                                      IR-Out(S16)
	S22= IR_ID.Out25_21=>GPR.RReg1                              Premise(F67)
	S23= GPR.RReg1=rS                                           Path(S20,S22)
	S24= GPR.Rdata1=a                                           GPR-Read(S23,S17)
	S25= IR_ID.Out20_16=>GPR.RReg2                              Premise(F68)
	S26= GPR.RReg2=rT                                           Path(S21,S25)
	S27= GPR.Rdata2=b                                           GPR-Read(S26,S18)
	S28= GPR.Rdata1=>FU.InID1                                   Premise(F69)
	S29= FU.InID1=a                                             Path(S24,S28)
	S30= FU.OutID1=FU(a)                                        FU-Forward(S29)
	S31= FU.OutID1=>A_EX.In                                     Premise(F71)
	S32= A_EX.In=FU(a)                                          Path(S30,S31)
	S33= GPR.Rdata2=>FU.InID2                                   Premise(F72)
	S34= FU.InID2=b                                             Path(S27,S33)
	S35= FU.OutID2=FU(b)                                        FU-Forward(S34)
	S36= FU.OutID2=>B_EX.In                                     Premise(F74)
	S37= B_EX.In=FU(b)                                          Path(S35,S36)
	S38= IR_ID.Out=>IR_EX.In                                    Premise(F75)
	S39= IR_EX.In={5,rS,rT,offset}                              Path(S19,S38)
	S40= CtrlPCInc=0                                            Premise(F97)
	S41= PC[CIA]=addr                                           PC-Hold(S14,S40)
	S42= CtrlA_EX=1                                             Premise(F105)
	S43= [A_EX]=FU(a)                                           A_EX-Write(S32,S42)
	S44= CtrlB_EX=1                                             Premise(F106)
	S45= [B_EX]=FU(b)                                           B_EX-Write(S37,S44)
	S46= CtrlIR_EX=1                                            Premise(F107)
	S47= [IR_EX]={5,rS,rT,offset}                               IR_EX-Write(S39,S46)

EX	S48= PC.CIA=addr                                            PC-Out(S41)
	S49= A_EX.Out=FU(a)                                         A_EX-Out(S43)
	S50= B_EX.Out=FU(b)                                         B_EX-Out(S45)
	S51= IR_EX.Out15_0=offset                                   IR_EX-Out(S47)
	S52= IR_EX.Out15_0=>SEXT.In                                 Premise(F134)
	S53= SEXT.In=offset                                         Path(S51,S52)
	S54= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S53)
	S55= PC.CIA=>ALU.A                                          Premise(F135)
	S56= ALU.A=addr                                             Path(S48,S55)
	S57= SEXT.Out=>ALU.B                                        Premise(F136)
	S58= ALU.B={14{offset[15]},offset,2{0}}                     Path(S54,S57)
	S59= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S56,S58)
	S60= ALU.Out=>ALUOut_MEM.In                                 Premise(F138)
	S61= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S59,S60)
	S62= A_EX.Out=>CMPU.A                                       Premise(F139)
	S63= CMPU.A=FU(a)                                           Path(S49,S62)
	S64= B_EX.Out=>CMPU.B                                       Premise(F140)
	S65= CMPU.B=FU(b)                                           Path(S50,S64)
	S66= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S63,S65)
	S67= CMPU.zero=>ConditionReg_MEM.In                         Premise(F142)
	S68= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S66,S67)
	S69= CtrlALUOut_MEM=1                                       Premise(F165)
	S70= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S61,S69)
	S71= CtrlConditionReg_MEM=1                                 Premise(F166)
	S72= [ConditionReg_MEM]=CompareS(FU(a),FU(b))               ConditionReg_MEM-Write(S68,S71)

MEM	S73= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S70)
	S74= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))             ConditionReg_MEM-Out(S72)
	S75= ALUOut_MEM.Out=>PC.In                                  Premise(F201)
	S76= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S73,S75)
	S77= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F204)
	S78= ConditionReg_WB.In=CompareS(FU(a),FU(b))               Path(S74,S77)
	S79= CtrlPC=1                                               Premise(F208)
	S80= CtrlPCInc=0                                            Premise(F209)
	S81= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S76,S79,S80)
	S82= CtrlConditionReg_WB=1                                  Premise(F224)
	S83= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Write(S78,S82)

WB	S84= CtrlPC=0                                               Premise(F263)
	S85= CtrlPCInc=0                                            Premise(F264)
	S86= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S81,S84,S85)
	S87= CtrlConditionReg_WB=0                                  Premise(F279)
	S88= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Hold(S83,S87)

POST	S86= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S81,S84,S85)
	S88= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Hold(S83,S87)

