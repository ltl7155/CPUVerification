
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,0,offset}                        Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Hit=IMMUHit(pid,addr)                             IMMU-Search(S7,S9)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S13= IAddrReg.In={pid,addr}                                 Path(S10,S12)
	S14= IMMU.Hit=>CU.IMMUHit                                   Premise(F7)
	S15= CU.IMMUHit=IMMUHit(pid,addr)                           Path(S11,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F8)
	S17= ICache.IEA=addr                                        Path(S5,S16)
	S18= ICache.Hit=ICacheHit(addr)                             ICache-Search(S17)
	S19= ICache.Out=>IR.In                                      Premise(F9)
	S20= ICache.Out=>ICacheReg.In                               Premise(F10)
	S21= ICache.Hit=>CU.ICacheHit                               Premise(F11)
	S22= CU.ICacheHit=ICacheHit(addr)                           Path(S18,S21)
	S23= CtrlASIDIn=0                                           Premise(F12)
	S24= CtrlCP0=0                                              Premise(F13)
	S25= CP0[ASID]=pid                                          CP0-Hold(S0,S24)
	S26= CtrlEPCIn=0                                            Premise(F14)
	S27= CtrlExCodeIn=0                                         Premise(F15)
	S28= CtrlIMMU=0                                             Premise(F16)
	S29= CtrlPC=0                                               Premise(F17)
	S30= CtrlPCInc=0                                            Premise(F18)
	S31= PC[Out]=addr                                           PC-Hold(S1,S29,S30)
	S32= CtrlIAddrReg=1                                         Premise(F19)
	S33= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S32)
	S34= CtrlICache=0                                           Premise(F20)
	S35= CtrlIR=0                                               Premise(F21)
	S36= CtrlICacheReg=1                                        Premise(F22)
	S37= CtrlIMem=0                                             Premise(F23)
	S38= IMem[{pid,addr}]={1,rS,0,offset}                       IMem-Hold(S2,S37)
	S39= CtrlIRMux=0                                            Premise(F24)
	S40= CtrlGPR=0                                              Premise(F25)
	S41= GPR[rS]=a                                              GPR-Hold(S3,S40)
	S42= CtrlA=0                                                Premise(F26)
	S43= CtrlB=0                                                Premise(F27)
	S44= CtrlALUOut=0                                           Premise(F28)
	S45= CtrlConditionReg=0                                     Premise(F29)

IF(IMMU)	S46= CP0.ASID=pid                                           CP0-Read-ASID(S25)
	S47= PC.Out=addr                                            PC-Out(S31)
	S48= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S33)
	S49= IAddrReg.Out1_0={{pid,addr}}[1:0]                      IAddrReg-Out(S33)
	S50= IAddrReg.Out4_0={{pid,addr}}[4:0]                      IAddrReg-Out(S33)
	S51= CU.IMMUHit=>CU.IMMUHit                                 Premise(F30)
	S52= CU.ICacheHit=>CU.ICacheHit                             Premise(F31)
	S53= IAddrReg.Out=>IMem.RAddr                               Premise(F32)
	S54= IMem.RAddr={pid,addr}                                  Path(S48,S53)
	S55= IMem.Out={1,rS,0,offset}                               IMem-Read(S54,S38)
	S56= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S54,S38)
	S57= IMem.Out=>IRMux.MemData                                Premise(F33)
	S58= IRMux.MemData={1,rS,0,offset}                          Path(S55,S57)
	S59= IRMux.Out={1,rS,0,offset}                              IRMux-Select2(S58)
	S60= ICacheReg.Out=>IRMux.CacheData                         Premise(F34)
	S61= CU.IMMUHit=>IRMux.MemSel                               Premise(F35)
	S62= CU.ICacheHit=>IRMux.CacheSel                           Premise(F36)
	S63= IRMux.Out=>IR.In                                       Premise(F37)
	S64= IR.In={1,rS,0,offset}                                  Path(S59,S63)
	S65= IMem.MEM8WordOut=>ICache.WData                         Premise(F38)
	S66= ICache.WData=IMemGet8Word({pid,addr})                  Path(S56,S65)
	S67= PC.Out=>ICache.IEA                                     Premise(F39)
	S68= ICache.IEA=addr                                        Path(S47,S67)
	S69= ICache.Hit=ICacheHit(addr)                             ICache-Search(S68)
	S70= CtrlASIDIn=0                                           Premise(F40)
	S71= CtrlCP0=0                                              Premise(F41)
	S72= CP0[ASID]=pid                                          CP0-Hold(S25,S71)
	S73= CtrlEPCIn=0                                            Premise(F42)
	S74= CtrlExCodeIn=0                                         Premise(F43)
	S75= CtrlIMMU=0                                             Premise(F44)
	S76= CtrlPC=0                                               Premise(F45)
	S77= CtrlPCInc=1                                            Premise(F46)
	S78= PC[Out]=addr+4                                         PC-Inc(S31,S76,S77)
	S79= PC[CIA]=addr                                           PC-Inc(S31,S76,S77)
	S80= CtrlIAddrReg=0                                         Premise(F47)
	S81= [IAddrReg]={pid,addr}                                  IAddrReg-Hold(S33,S80)
	S82= CtrlICache=1                                           Premise(F48)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S68,S66,S82)
	S84= CtrlIR=1                                               Premise(F49)
	S85= [IR]={1,rS,0,offset}                                   IR-Write(S64,S84)
	S86= CtrlICacheReg=0                                        Premise(F50)
	S87= CtrlIMem=0                                             Premise(F51)
	S88= IMem[{pid,addr}]={1,rS,0,offset}                       IMem-Hold(S38,S87)
	S89= CtrlIRMux=0                                            Premise(F52)
	S90= CtrlGPR=0                                              Premise(F53)
	S91= GPR[rS]=a                                              GPR-Hold(S41,S90)
	S92= CtrlA=0                                                Premise(F54)
	S93= CtrlB=0                                                Premise(F55)
	S94= CtrlALUOut=0                                           Premise(F56)
	S95= CtrlConditionReg=0                                     Premise(F57)

ID	S96= CP0.ASID=pid                                           CP0-Read-ASID(S72)
	S97= PC.Out=addr+4                                          PC-Out(S78)
	S98= PC.CIA=addr                                            PC-Out(S79)
	S99= PC.CIA31_28=addr[31:28]                                PC-Out(S79)
	S100= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S81)
	S101= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S81)
	S102= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S81)
	S103= IR.Out={1,rS,0,offset}                                IR-Out(S85)
	S104= IR.Out31_26=1                                         IR-Out(S85)
	S105= IR.Out25_21=rS                                        IR-Out(S85)
	S106= IR.Out20_16=0                                         IR-Out(S85)
	S107= IR.Out15_0=offset                                     IR-Out(S85)
	S108= IR.Out31_26=>CU.Op                                    Premise(F58)
	S109= CU.Op=1                                               Path(S104,S108)
	S110= IR.Out25_21=>GPR.RReg1                                Premise(F59)
	S111= GPR.RReg1=rS                                          Path(S105,S110)
	S112= GPR.Rdata1=a                                          GPR-Read(S111,S91)
	S113= IR.Out20_16=>GPR.RReg2                                Premise(F60)
	S114= GPR.RReg2=0                                           Path(S106,S113)
	S115= GPR.Rdata2=32'b0                                      GPR-ReadGPR0()
	S116= GPR.Rdata1=>A.In                                      Premise(F61)
	S117= A.In=a                                                Path(S112,S116)
	S118= GPR.Rdata2=>B.In                                      Premise(F62)
	S119= B.In=32'b0                                            Path(S115,S118)
	S120= CtrlASIDIn=0                                          Premise(F63)
	S121= CtrlCP0=0                                             Premise(F64)
	S122= CP0[ASID]=pid                                         CP0-Hold(S72,S121)
	S123= CtrlEPCIn=0                                           Premise(F65)
	S124= CtrlExCodeIn=0                                        Premise(F66)
	S125= CtrlIMMU=0                                            Premise(F67)
	S126= CtrlPC=0                                              Premise(F68)
	S127= CtrlPCInc=0                                           Premise(F69)
	S128= PC[CIA]=addr                                          PC-Hold(S79,S127)
	S129= PC[Out]=addr+4                                        PC-Hold(S78,S126,S127)
	S130= CtrlIAddrReg=0                                        Premise(F70)
	S131= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S81,S130)
	S132= CtrlICache=0                                          Premise(F71)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S83,S132)
	S134= CtrlIR=0                                              Premise(F72)
	S135= [IR]={1,rS,0,offset}                                  IR-Hold(S85,S134)
	S136= CtrlICacheReg=0                                       Premise(F73)
	S137= CtrlIMem=0                                            Premise(F74)
	S138= IMem[{pid,addr}]={1,rS,0,offset}                      IMem-Hold(S88,S137)
	S139= CtrlIRMux=0                                           Premise(F75)
	S140= CtrlGPR=0                                             Premise(F76)
	S141= GPR[rS]=a                                             GPR-Hold(S91,S140)
	S142= CtrlA=1                                               Premise(F77)
	S143= [A]=a                                                 A-Write(S117,S142)
	S144= CtrlB=1                                               Premise(F78)
	S145= [B]=32'b0                                             B-Write(S119,S144)
	S146= CtrlALUOut=0                                          Premise(F79)
	S147= CtrlConditionReg=0                                    Premise(F80)

EX	S148= CP0.ASID=pid                                          CP0-Read-ASID(S122)
	S149= PC.CIA=addr                                           PC-Out(S128)
	S150= PC.CIA31_28=addr[31:28]                               PC-Out(S128)
	S151= PC.Out=addr+4                                         PC-Out(S129)
	S152= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S131)
	S153= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S131)
	S154= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S131)
	S155= IR.Out={1,rS,0,offset}                                IR-Out(S135)
	S156= IR.Out31_26=1                                         IR-Out(S135)
	S157= IR.Out25_21=rS                                        IR-Out(S135)
	S158= IR.Out20_16=0                                         IR-Out(S135)
	S159= IR.Out15_0=offset                                     IR-Out(S135)
	S160= A.Out=a                                               A-Out(S143)
	S161= A.Out1_0={a}[1:0]                                     A-Out(S143)
	S162= A.Out4_0={a}[4:0]                                     A-Out(S143)
	S163= B.Out=32'b0                                           B-Out(S145)
	S164= B.Out1_0={32'b0}[1:0]                                 B-Out(S145)
	S165= B.Out4_0={32'b0}[4:0]                                 B-Out(S145)
	S166= IR.Out15_0=>SEXT.In                                   Premise(F81)
	S167= SEXT.In=offset                                        Path(S159,S166)
	S168= SEXT.Out={14{offset[15]},offset,2{0}}                 SEXT(S167)
	S169= PC.CIA=>ALU.A                                         Premise(F82)
	S170= ALU.A=addr                                            Path(S149,S169)
	S171= SEXT.Out=>ALU.B                                       Premise(F83)
	S172= ALU.B={14{offset[15]},offset,2{0}}                    Path(S168,S171)
	S173= ALU.Func=6'b010010                                    Premise(F84)
	S174= ALU.Out=addr+{14{offset[15]},offset,2{0}}             ALU(S170,S172)
	S175= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]   ALU(S170,S172)
	S176= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})   ALU(S170,S172)
	S177= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})    ALU(S170,S172)
	S178= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})       ALU(S170,S172)
	S179= ALU.Out=>ALUOut.In                                    Premise(F85)
	S180= ALUOut.In=addr+{14{offset[15]},offset,2{0}}           Path(S174,S179)
	S181= A.Out=>CMPU.A                                         Premise(F86)
	S182= CMPU.A=a                                              Path(S160,S181)
	S183= B.Out=>CMPU.B                                         Premise(F87)
	S184= CMPU.B=32'b0                                          Path(S163,S183)
	S185= CMPU.Func=6'b000011                                   Premise(F88)
	S186= CMPU.Out=CompareS(a,32'b0)                            CMPU-CMPS(S182,S184)
	S187= CMPU.zero=CompareS(a,32'b0)                           CMPU-CMPS(S182,S184)
	S188= CMPU.gt=CompareS(a,32'b0)                             CMPU-CMPS(S182,S184)
	S189= CMPU.lt=CompareS(a,32'b0)                             CMPU-CMPS(S182,S184)
	S190= CMPU.lt=>ConditionReg.In                              Premise(F89)
	S191= ConditionReg.In=CompareS(a,32'b0)                     Path(S189,S190)
	S192= CtrlASIDIn=0                                          Premise(F90)
	S193= CtrlCP0=0                                             Premise(F91)
	S194= CP0[ASID]=pid                                         CP0-Hold(S122,S193)
	S195= CtrlEPCIn=0                                           Premise(F92)
	S196= CtrlExCodeIn=0                                        Premise(F93)
	S197= CtrlIMMU=0                                            Premise(F94)
	S198= CtrlPC=0                                              Premise(F95)
	S199= CtrlPCInc=0                                           Premise(F96)
	S200= PC[CIA]=addr                                          PC-Hold(S128,S199)
	S201= PC[Out]=addr+4                                        PC-Hold(S129,S198,S199)
	S202= CtrlIAddrReg=0                                        Premise(F97)
	S203= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S131,S202)
	S204= CtrlICache=0                                          Premise(F98)
	S205= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S204)
	S206= CtrlIR=0                                              Premise(F99)
	S207= [IR]={1,rS,0,offset}                                  IR-Hold(S135,S206)
	S208= CtrlICacheReg=0                                       Premise(F100)
	S209= CtrlIMem=0                                            Premise(F101)
	S210= IMem[{pid,addr}]={1,rS,0,offset}                      IMem-Hold(S138,S209)
	S211= CtrlIRMux=0                                           Premise(F102)
	S212= CtrlGPR=0                                             Premise(F103)
	S213= GPR[rS]=a                                             GPR-Hold(S141,S212)
	S214= CtrlA=0                                               Premise(F104)
	S215= [A]=a                                                 A-Hold(S143,S214)
	S216= CtrlB=0                                               Premise(F105)
	S217= [B]=32'b0                                             B-Hold(S145,S216)
	S218= CtrlALUOut=1                                          Premise(F106)
	S219= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Write(S180,S218)
	S220= CtrlConditionReg=1                                    Premise(F107)
	S221= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Write(S191,S220)

MEM	S222= CP0.ASID=pid                                          CP0-Read-ASID(S194)
	S223= PC.CIA=addr                                           PC-Out(S200)
	S224= PC.CIA31_28=addr[31:28]                               PC-Out(S200)
	S225= PC.Out=addr+4                                         PC-Out(S201)
	S226= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S203)
	S227= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S203)
	S228= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S203)
	S229= IR.Out={1,rS,0,offset}                                IR-Out(S207)
	S230= IR.Out31_26=1                                         IR-Out(S207)
	S231= IR.Out25_21=rS                                        IR-Out(S207)
	S232= IR.Out20_16=0                                         IR-Out(S207)
	S233= IR.Out15_0=offset                                     IR-Out(S207)
	S234= A.Out=a                                               A-Out(S215)
	S235= A.Out1_0={a}[1:0]                                     A-Out(S215)
	S236= A.Out4_0={a}[4:0]                                     A-Out(S215)
	S237= B.Out=32'b0                                           B-Out(S217)
	S238= B.Out1_0={32'b0}[1:0]                                 B-Out(S217)
	S239= B.Out4_0={32'b0}[4:0]                                 B-Out(S217)
	S240= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S219)
	S241= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S219)
	S242= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S219)
	S243= ConditionReg.Out=CompareS(a,32'b0)                    ConditionReg-Out(S221)
	S244= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]          ConditionReg-Out(S221)
	S245= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]          ConditionReg-Out(S221)
	S246= ALUOut.Out=>PC.In                                     Premise(F108)
	S247= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S240,S246)
	S248= ConditionReg.Out=>CU.lt                               Premise(F109)
	S249= CU.lt=CompareS(a,32'b0)                               Path(S243,S248)
	S250= CtrlASIDIn=0                                          Premise(F110)
	S251= CtrlCP0=0                                             Premise(F111)
	S252= CP0[ASID]=pid                                         CP0-Hold(S194,S251)
	S253= CtrlEPCIn=0                                           Premise(F112)
	S254= CtrlExCodeIn=0                                        Premise(F113)
	S255= CtrlIMMU=0                                            Premise(F114)
	S256= CtrlPC=0                                              Premise(F115)
	S257= CtrlPCInc=0                                           Premise(F116)
	S258= PC[CIA]=addr                                          PC-Hold(S200,S257)
	S259= PC[Out]=addr+4                                        PC-Hold(S201,S256,S257)
	S260= CtrlIAddrReg=0                                        Premise(F117)
	S261= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S203,S260)
	S262= CtrlICache=0                                          Premise(F118)
	S263= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S205,S262)
	S264= CtrlIR=0                                              Premise(F119)
	S265= [IR]={1,rS,0,offset}                                  IR-Hold(S207,S264)
	S266= CtrlICacheReg=0                                       Premise(F120)
	S267= CtrlIMem=0                                            Premise(F121)
	S268= IMem[{pid,addr}]={1,rS,0,offset}                      IMem-Hold(S210,S267)
	S269= CtrlIRMux=0                                           Premise(F122)
	S270= CtrlGPR=0                                             Premise(F123)
	S271= GPR[rS]=a                                             GPR-Hold(S213,S270)
	S272= CtrlA=0                                               Premise(F124)
	S273= [A]=a                                                 A-Hold(S215,S272)
	S274= CtrlB=0                                               Premise(F125)
	S275= [B]=32'b0                                             B-Hold(S217,S274)
	S276= CtrlALUOut=0                                          Premise(F126)
	S277= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S219,S276)
	S278= CtrlConditionReg=0                                    Premise(F127)
	S279= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S221,S278)

WB	S280= CP0.ASID=pid                                          CP0-Read-ASID(S252)
	S281= PC.CIA=addr                                           PC-Out(S258)
	S282= PC.CIA31_28=addr[31:28]                               PC-Out(S258)
	S283= PC.Out=addr+4                                         PC-Out(S259)
	S284= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S261)
	S285= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S261)
	S286= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S261)
	S287= IR.Out={1,rS,0,offset}                                IR-Out(S265)
	S288= IR.Out31_26=1                                         IR-Out(S265)
	S289= IR.Out25_21=rS                                        IR-Out(S265)
	S290= IR.Out20_16=0                                         IR-Out(S265)
	S291= IR.Out15_0=offset                                     IR-Out(S265)
	S292= A.Out=a                                               A-Out(S273)
	S293= A.Out1_0={a}[1:0]                                     A-Out(S273)
	S294= A.Out4_0={a}[4:0]                                     A-Out(S273)
	S295= B.Out=32'b0                                           B-Out(S275)
	S296= B.Out1_0={32'b0}[1:0]                                 B-Out(S275)
	S297= B.Out4_0={32'b0}[4:0]                                 B-Out(S275)
	S298= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S277)
	S299= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S277)
	S300= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S277)
	S301= ConditionReg.Out=CompareS(a,32'b0)                    ConditionReg-Out(S279)
	S302= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]          ConditionReg-Out(S279)
	S303= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]          ConditionReg-Out(S279)
	S304= CtrlASIDIn=0                                          Premise(F164)
	S305= CtrlCP0=0                                             Premise(F165)
	S306= CP0[ASID]=pid                                         CP0-Hold(S252,S305)
	S307= CtrlEPCIn=0                                           Premise(F166)
	S308= CtrlExCodeIn=0                                        Premise(F167)
	S309= CtrlIMMU=0                                            Premise(F168)
	S310= CtrlPC=0                                              Premise(F169)
	S311= CtrlPCInc=0                                           Premise(F170)
	S312= PC[CIA]=addr                                          PC-Hold(S258,S311)
	S313= PC[Out]=addr+4                                        PC-Hold(S259,S310,S311)
	S314= CtrlIAddrReg=0                                        Premise(F171)
	S315= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S261,S314)
	S316= CtrlICache=0                                          Premise(F172)
	S317= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S263,S316)
	S318= CtrlIR=0                                              Premise(F173)
	S319= [IR]={1,rS,0,offset}                                  IR-Hold(S265,S318)
	S320= CtrlICacheReg=0                                       Premise(F174)
	S321= CtrlIMem=0                                            Premise(F175)
	S322= IMem[{pid,addr}]={1,rS,0,offset}                      IMem-Hold(S268,S321)
	S323= CtrlIRMux=0                                           Premise(F176)
	S324= CtrlGPR=0                                             Premise(F177)
	S325= GPR[rS]=a                                             GPR-Hold(S271,S324)
	S326= CtrlA=0                                               Premise(F178)
	S327= [A]=a                                                 A-Hold(S273,S326)
	S328= CtrlB=0                                               Premise(F179)
	S329= [B]=32'b0                                             B-Hold(S275,S328)
	S330= CtrlALUOut=0                                          Premise(F180)
	S331= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S277,S330)
	S332= CtrlConditionReg=0                                    Premise(F181)
	S333= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S279,S332)

POST	S306= CP0[ASID]=pid                                         CP0-Hold(S252,S305)
	S312= PC[CIA]=addr                                          PC-Hold(S258,S311)
	S313= PC[Out]=addr+4                                        PC-Hold(S259,S310,S311)
	S315= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S261,S314)
	S317= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S263,S316)
	S319= [IR]={1,rS,0,offset}                                  IR-Hold(S265,S318)
	S322= IMem[{pid,addr}]={1,rS,0,offset}                      IMem-Hold(S268,S321)
	S325= GPR[rS]=a                                             GPR-Hold(S271,S324)
	S327= [A]=a                                                 A-Hold(S273,S326)
	S329= [B]=32'b0                                             B-Hold(S275,S328)
	S331= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S277,S330)
	S333= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S279,S332)

