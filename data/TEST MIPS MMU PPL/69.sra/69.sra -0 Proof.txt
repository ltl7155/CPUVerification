
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,0,rT,rD,sa,3}                       Premise(F2)
	S3= GPR[rT]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={0,0,rT,rD,sa,3}                      IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rT]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F50)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,0,rT,rD,sa,3}                              IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F51)
	S29= IRMux.MemData={0,0,rT,rD,sa,3}                         Path(S26,S28)
	S30= IRMux.Out={0,0,rT,rD,sa,3}                             IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F55)
	S32= IR_ID.In={0,0,rT,rD,sa,3}                              Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F56)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F57)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F65)
	S38= CtrlPCInc=1                                            Premise(F66)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F68)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F71)
	S43= [IR_ID]={0,0,rT,rD,sa,3}                               IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F74)
	S45= GPR[rT]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out={0,0,rT,rD,sa,3}                             IR-Out(S43)
	S47= IR_ID.Out20_16=rT                                      IR-Out(S43)
	S48= IR_ID.Out20_16=>GPR.RReg2                              Premise(F91)
	S49= GPR.RReg2=rT                                           Path(S47,S48)
	S50= GPR.Rdata2=a                                           GPR-Read(S49,S45)
	S51= GPR.Rdata2=>FU.InID2                                   Premise(F93)
	S52= FU.InID2=a                                             Path(S50,S51)
	S53= FU.OutID2=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID2=>B_EX.In                                     Premise(F95)
	S55= B_EX.In=FU(a)                                          Path(S53,S54)
	S56= IR_ID.Out=>IR_EX.In                                    Premise(F96)
	S57= IR_EX.In={0,0,rT,rD,sa,3}                              Path(S46,S56)
	S58= CtrlPC=0                                               Premise(F105)
	S59= CtrlPCInc=0                                            Premise(F106)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F108)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlB_EX=1                                             Premise(F115)
	S64= [B_EX]=FU(a)                                           B_EX-Write(S55,S63)
	S65= CtrlIR_EX=1                                            Premise(F116)
	S66= [IR_EX]={0,0,rT,rD,sa,3}                               IR_EX-Write(S57,S65)

EX	S67= B_EX.Out=FU(a)                                         B_EX-Out(S64)
	S68= IR_EX.Out={0,0,rT,rD,sa,3}                             IR_EX-Out(S66)
	S69= IR_EX.Out10_6=sa                                       IR_EX-Out(S66)
	S70= IR_EX.Out10_6=>SU.Shamt                                Premise(F132)
	S71= SU.Shamt=sa                                            Path(S69,S70)
	S72= B_EX.Out=>SU.Data                                      Premise(F133)
	S73= SU.Data=FU(a)                                          Path(S67,S72)
	S74= SU.Out=FU(a)>>sa                                       SU(S73,S71)
	S75= SU.Out=>ALUOut_MEM.In                                  Premise(F135)
	S76= ALUOut_MEM.In=FU(a)>>sa                                Path(S74,S75)
	S77= IR_EX.Out=>IR_MEM.In                                   Premise(F138)
	S78= IR_MEM.In={0,0,rT,rD,sa,3}                             Path(S68,S77)
	S79= CtrlPC=0                                               Premise(F144)
	S80= CtrlPCInc=0                                            Premise(F145)
	S81= PC[Out]=addr+4                                         PC-Hold(S60,S79,S80)
	S82= CtrlICache=0                                           Premise(F147)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S82)
	S84= CtrlALUOut_MEM=1                                       Premise(F156)
	S85= [ALUOut_MEM]=FU(a)>>sa                                 ALUOut_MEM-Write(S76,S84)
	S86= CtrlIR_MEM=1                                           Premise(F157)
	S87= [IR_MEM]={0,0,rT,rD,sa,3}                              IR_MEM-Write(S78,S86)

MEM	S88= ALUOut_MEM.Out=FU(a)>>sa                               ALUOut_MEM-Out(S85)
	S89= IR_MEM.Out={0,0,rT,rD,sa,3}                            IR_MEM-Out(S87)
	S90= IR_MEM.Out=>IR_DMMU1.In                                Premise(F173)
	S91= IR_DMMU1.In={0,0,rT,rD,sa,3}                           Path(S89,S90)
	S92= ALUOut_MEM.Out=>ALUOut_DMMU1.In                        Premise(F176)
	S93= ALUOut_DMMU1.In=FU(a)>>sa                              Path(S88,S92)
	S94= CtrlPC=0                                               Premise(F187)
	S95= CtrlPCInc=0                                            Premise(F188)
	S96= PC[Out]=addr+4                                         PC-Hold(S81,S94,S95)
	S97= CtrlICache=0                                           Premise(F190)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S83,S97)
	S99= CtrlIR_DMMU1=1                                         Premise(F201)
	S100= [IR_DMMU1]={0,0,rT,rD,sa,3}                           IR_DMMU1-Write(S91,S99)
	S101= CtrlALUOut_DMMU1=1                                    Premise(F205)
	S102= [ALUOut_DMMU1]=FU(a)>>sa                              ALUOut_DMMU1-Write(S93,S101)

MEM(DMMU1)	S103= IR_DMMU1.Out={0,0,rT,rD,sa,3}                         IR_DMMU1-Out(S100)
	S104= ALUOut_DMMU1.Out=FU(a)>>sa                            ALUOut_DMMU1-Out(S102)
	S105= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F217)
	S106= IR_DMMU2.In={0,0,rT,rD,sa,3}                          Path(S103,S105)
	S107= ALUOut_DMMU1.Out=>ALUOut_DMMU2.In                     Premise(F218)
	S108= ALUOut_DMMU2.In=FU(a)>>sa                             Path(S104,S107)
	S109= CtrlPC=0                                              Premise(F226)
	S110= CtrlPCInc=0                                           Premise(F227)
	S111= PC[Out]=addr+4                                        PC-Hold(S96,S109,S110)
	S112= CtrlICache=0                                          Premise(F229)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S112)
	S114= CtrlIR_DMMU2=1                                        Premise(F246)
	S115= [IR_DMMU2]={0,0,rT,rD,sa,3}                           IR_DMMU2-Write(S106,S114)
	S116= CtrlALUOut_DMMU2=1                                    Premise(F247)
	S117= [ALUOut_DMMU2]=FU(a)>>sa                              ALUOut_DMMU2-Write(S108,S116)

MEM(DMMU2)	S118= IR_DMMU2.Out={0,0,rT,rD,sa,3}                         IR_DMMU2-Out(S115)
	S119= ALUOut_DMMU2.Out=FU(a)>>sa                            ALUOut_DMMU2-Out(S117)
	S120= IR_DMMU2.Out=>IR_WB.In                                Premise(F253)
	S121= IR_WB.In={0,0,rT,rD,sa,3}                             Path(S118,S120)
	S122= ALUOut_DMMU2.Out=>ALUOut_WB.In                        Premise(F254)
	S123= ALUOut_WB.In=FU(a)>>sa                                Path(S119,S122)
	S124= CtrlPC=0                                              Premise(F262)
	S125= CtrlPCInc=0                                           Premise(F263)
	S126= PC[Out]=addr+4                                        PC-Hold(S111,S124,S125)
	S127= CtrlICache=0                                          Premise(F265)
	S128= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S127)
	S129= CtrlIR_WB=1                                           Premise(F277)
	S130= [IR_WB]={0,0,rT,rD,sa,3}                              IR_WB-Write(S121,S129)
	S131= CtrlALUOut_WB=1                                       Premise(F281)
	S132= [ALUOut_WB]=FU(a)>>sa                                 ALUOut_WB-Write(S123,S131)

WB	S133= IR_WB.Out15_11=rD                                     IR-Out(S130)
	S134= ALUOut_WB.Out=FU(a)>>sa                               ALUOut_WB-Out(S132)
	S135= IR_WB.Out15_11=>GPR.WReg                              Premise(F287)
	S136= GPR.WReg=rD                                           Path(S133,S135)
	S137= ALUOut_WB.Out=>GPR.WData                              Premise(F288)
	S138= GPR.WData=FU(a)>>sa                                   Path(S134,S137)
	S139= CtrlPC=0                                              Premise(F296)
	S140= CtrlPCInc=0                                           Premise(F297)
	S141= PC[Out]=addr+4                                        PC-Hold(S126,S139,S140)
	S142= CtrlICache=0                                          Premise(F299)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S128,S142)
	S144= CtrlGPR=1                                             Premise(F305)
	S145= GPR[rD]=FU(a)>>sa                                     GPR-Write(S136,S138,S144)

POST	S141= PC[Out]=addr+4                                        PC-Hold(S126,S139,S140)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S128,S142)
	S145= GPR[rD]=FU(a)>>sa                                     GPR-Write(S136,S138,S144)

