
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,14,imm}                          Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={1,rs,14,imm}                         IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rs]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F54)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={1,rs,14,imm}                                 IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F55)
	S29= IRMux.MemData={1,rs,14,imm}                            Path(S26,S28)
	S30= IRMux.Out={1,rs,14,imm}                                IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F59)
	S32= IR_ID.In={1,rs,14,imm}                                 Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F60)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F61)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F69)
	S38= CtrlPCInc=1                                            Premise(F70)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F72)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F75)
	S43= [IR_ID]={1,rs,14,imm}                                  IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F78)
	S45= GPR[rs]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out25_21=rs                                      IR-Out(S43)
	S47= IR_ID.Out15_0=imm                                      IR-Out(S43)
	S48= IR_ID.Out25_21=>GPR.RReg1                              Premise(F99)
	S49= GPR.RReg1=rs                                           Path(S46,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S45)
	S51= IR_ID.Out15_0=>IMMEXT.In                               Premise(F101)
	S52= IMMEXT.In=imm                                          Path(S47,S51)
	S53= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S52)
	S54= GPR.Rdata1=>FU.InID1                                   Premise(F102)
	S55= FU.InID1=a                                             Path(S50,S54)
	S56= FU.OutID1=FU(a)                                        FU-Forward(S55)
	S57= FU.OutID1=>A_EX.In                                     Premise(F104)
	S58= A_EX.In=FU(a)                                          Path(S56,S57)
	S59= IMMEXT.Out=>B_EX.In                                    Premise(F105)
	S60= B_EX.In={16{imm[15]},imm}                              Path(S53,S59)
	S61= CtrlPC=0                                               Premise(F115)
	S62= CtrlPCInc=0                                            Premise(F116)
	S63= PC[Out]=addr+4                                         PC-Hold(S39,S61,S62)
	S64= CtrlICache=0                                           Premise(F118)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S64)
	S66= CtrlA_EX=1                                             Premise(F125)
	S67= [A_EX]=FU(a)                                           A_EX-Write(S58,S66)
	S68= CtrlB_EX=1                                             Premise(F126)
	S69= [B_EX]={16{imm[15]},imm}                               B_EX-Write(S60,S68)

EX	S70= A_EX.Out=FU(a)                                         A_EX-Out(S67)
	S71= B_EX.Out={16{imm[15]},imm}                             B_EX-Out(S69)
	S72= A_EX.Out=>CMPU.A                                       Premise(F146)
	S73= CMPU.A=FU(a)                                           Path(S70,S72)
	S74= B_EX.Out=>CMPU.B                                       Premise(F147)
	S75= CMPU.B={16{imm[15]},imm}                               Path(S71,S74)
	S76= CMPU.zero=CompareS(FU(a),{16{imm[15]},imm})            CMPU-CMPS(S73,S75)
	S77= CMPU.zero=>ConditionReg_MEM.In                         Premise(F149)
	S78= ConditionReg_MEM.In=CompareS(FU(a),{16{imm[15]},imm})  Path(S76,S77)
	S79= CtrlPC=0                                               Premise(F157)
	S80= CtrlPCInc=0                                            Premise(F158)
	S81= PC[Out]=addr+4                                         PC-Hold(S63,S79,S80)
	S82= CtrlICache=0                                           Premise(F160)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S82)
	S84= CtrlConditionReg_MEM=1                                 Premise(F170)
	S85= [ConditionReg_MEM]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_MEM-Write(S78,S84)

MEM	S86= PC.Out=addr+4                                          PC-Out(S81)
	S87= ConditionReg_MEM.Out=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_MEM-Out(S85)
	S88= PC.Out=>CP0.EPCIn                                      Premise(F190)
	S89= CP0.EPCIn=addr+4                                       Path(S86,S88)
	S90= CP0.ExCodeIn=5'h0d                                     Premise(F191)
	S91= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F199)
	S92= ConditionReg_DMMU1.In=CompareS(FU(a),{16{imm[15]},imm})Path(S87,S91)
	S93= CtrlEPCIn=1                                            Premise(F206)
	S94= CP0[EPC]=addr+4                                        CP0-Write-EPC(S89,S93)
	S95= CtrlExCodeIn=1                                         Premise(F207)
	S96= CP0[ExCode]=5'h0d                                      CP0-Write-ExCode(S90,S95)
	S97= CtrlICache=0                                           Premise(F212)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S83,S97)
	S99= CtrlConditionReg_DMMU1=1                               Premise(F231)
	S100= [ConditionReg_DMMU1]=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU1-Write(S92,S99)

MEM(DMMU1)	S101= ConditionReg_DMMU1.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU1-Out(S100)
	S102= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F244)
	S103= ConditionReg_DMMU2.In=CompareS(FU(a),{16{imm[15]},imm})Path(S101,S102)
	S104= CtrlCP0=0                                             Premise(F247)
	S105= CP0[EPC]=addr+4                                       CP0-Hold(S94,S104)
	S106= CP0[ExCode]=5'h0d                                     CP0-Hold(S96,S104)
	S107= CtrlICache=0                                          Premise(F254)
	S108= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S107)
	S109= CtrlConditionReg_DMMU2=1                              Premise(F276)
	S110= [ConditionReg_DMMU2]=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU2-Write(S103,S109)

MEM(DMMU2)	S111= ConditionReg_DMMU2.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU2-Out(S110)
	S112= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F283)
	S113= ConditionReg_WB.In=CompareS(FU(a),{16{imm[15]},imm})  Path(S111,S112)
	S114= CtrlCP0=0                                             Premise(F286)
	S115= CP0[EPC]=addr+4                                       CP0-Hold(S105,S114)
	S116= CP0[ExCode]=5'h0d                                     CP0-Hold(S106,S114)
	S117= CtrlICache=0                                          Premise(F293)
	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S108,S117)
	S119= CtrlConditionReg_WB=1                                 Premise(F313)
	S120= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Write(S113,S119)

WB	S121= CtrlCP0=0                                             Premise(F321)
	S122= CP0[EPC]=addr+4                                       CP0-Hold(S115,S121)
	S123= CP0[ExCode]=5'h0d                                     CP0-Hold(S116,S121)
	S124= CtrlICache=0                                          Premise(F328)
	S125= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S124)
	S126= CtrlConditionReg_WB=0                                 Premise(F348)
	S127= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S120,S126)

POST	S122= CP0[EPC]=addr+4                                       CP0-Hold(S115,S121)
	S123= CP0[ExCode]=5'h0d                                     CP0-Hold(S116,S121)
	S125= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S124)
	S127= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S120,S126)

