
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,1,rD,0,1}                   Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={0,rS,cc,0,1,rD,0,1}                  IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F53)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,rS,cc,0,1,rD,0,1}                          IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F54)
	S29= IRMux.MemData={0,rS,cc,0,1,rD,0,1}                     Path(S26,S28)
	S30= IRMux.Out={0,rS,cc,0,1,rD,0,1}                         IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F58)
	S32= IR_ID.In={0,rS,cc,0,1,rD,0,1}                          Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F59)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F60)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F68)
	S38= CtrlPCInc=1                                            Premise(F69)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F71)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F74)
	S43= [IR_ID]={0,rS,cc,0,1,rD,0,1}                           IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F77)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out={0,rS,cc,0,1,rD,0,1}                         IR-Out(S43)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S43)
	S48= IR_ID.Out25_21=>GPR.RReg1                              Premise(F97)
	S49= GPR.RReg1=rS                                           Path(S47,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S45)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F99)
	S52= FU.InID1=a                                             Path(S50,S51)
	S53= FU.OutID1=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID1=>A_EX.In                                     Premise(F101)
	S55= A_EX.In=FU(a)                                          Path(S53,S54)
	S56= IR_ID.Out=>IR_EX.In                                    Premise(F102)
	S57= IR_EX.In={0,rS,cc,0,1,rD,0,1}                          Path(S46,S56)
	S58= CtrlPC=0                                               Premise(F111)
	S59= CtrlPCInc=0                                            Premise(F112)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F114)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlA_EX=1                                             Premise(F121)
	S64= [A_EX]=FU(a)                                           A_EX-Write(S55,S63)
	S65= CtrlIR_EX=1                                            Premise(F122)
	S66= [IR_EX]={0,rS,cc,0,1,rD,0,1}                           IR_EX-Write(S57,S65)

EX	S67= A_EX.Out=FU(a)                                         A_EX-Out(S64)
	S68= IR_EX.Out={0,rS,cc,0,1,rD,0,1}                         IR_EX-Out(S66)
	S69= IR_EX.Out20_18=cc                                      IR_EX-Out(S66)
	S70= IR_EX.Out16=1                                          IR_EX-Out(S66)
	S71= IR_EX.Out20_18=>CP1.cc                                 Premise(F141)
	S72= CP1.cc=cc                                              Path(S69,S71)
	S73= IR_EX.Out16=>CP1.tf                                    Premise(F142)
	S74= CP1.tf=1                                               Path(S70,S73)
	S75= CP1.fp=FPConditionCode(cc,1)                           FP-PRODUCT(S72,S74)
	S76= CP1.fp=>ConditionReg_MEM.In                            Premise(F143)
	S77= ConditionReg_MEM.In=FPConditionCode(cc,1)              Path(S75,S76)
	S78= IR_EX.Out=>IR_MEM.In                                   Premise(F144)
	S79= IR_MEM.In={0,rS,cc,0,1,rD,0,1}                         Path(S68,S78)
	S80= A_EX.Out=>A_MEM.In                                     Premise(F145)
	S81= A_MEM.In=FU(a)                                         Path(S67,S80)
	S82= CtrlPC=0                                               Premise(F152)
	S83= CtrlPCInc=0                                            Premise(F153)
	S84= PC[Out]=addr+4                                         PC-Hold(S60,S82,S83)
	S85= CtrlICache=0                                           Premise(F155)
	S86= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S85)
	S87= CtrlConditionReg_MEM=1                                 Premise(F165)
	S88= [ConditionReg_MEM]=FPConditionCode(cc,1)               ConditionReg_MEM-Write(S77,S87)
	S89= CtrlIR_MEM=1                                           Premise(F166)
	S90= [IR_MEM]={0,rS,cc,0,1,rD,0,1}                          IR_MEM-Write(S79,S89)
	S91= CtrlA_MEM=1                                            Premise(F167)
	S92= [A_MEM]=FU(a)                                          A_MEM-Write(S81,S91)

MEM	S93= ConditionReg_MEM.Out=FPConditionCode(cc,1)             ConditionReg_MEM-Out(S88)
	S94= IR_MEM.Out={0,rS,cc,0,1,rD,0,1}                        IR_MEM-Out(S90)
	S95= A_MEM.Out=FU(a)                                        A_MEM-Out(S92)
	S96= IR_MEM.Out=>IR_DMMU1.In                                Premise(F184)
	S97= IR_DMMU1.In={0,rS,cc,0,1,rD,0,1}                       Path(S94,S96)
	S98= A_MEM.Out=>A_DMMU1.In                                  Premise(F186)
	S99= A_DMMU1.In=FU(a)                                       Path(S95,S98)
	S100= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In           Premise(F188)
	S101= ConditionReg_DMMU1.In=FPConditionCode(cc,1)           Path(S93,S100)
	S102= CtrlPC=0                                              Premise(F198)
	S103= CtrlPCInc=0                                           Premise(F199)
	S104= PC[Out]=addr+4                                        PC-Hold(S84,S102,S103)
	S105= CtrlICache=0                                          Premise(F201)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S86,S105)
	S107= CtrlIR_DMMU1=1                                        Premise(F214)
	S108= [IR_DMMU1]={0,rS,cc,0,1,rD,0,1}                       IR_DMMU1-Write(S97,S107)
	S109= CtrlA_DMMU1=1                                         Premise(F216)
	S110= [A_DMMU1]=FU(a)                                       A_DMMU1-Write(S99,S109)
	S111= CtrlConditionReg_DMMU1=1                              Premise(F218)
	S112= [ConditionReg_DMMU1]=FPConditionCode(cc,1)            ConditionReg_DMMU1-Write(S101,S111)

MEM(DMMU1)	S113= IR_DMMU1.Out={0,rS,cc,0,1,rD,0,1}                     IR_DMMU1-Out(S108)
	S114= A_DMMU1.Out=FU(a)                                     A_DMMU1-Out(S110)
	S115= ConditionReg_DMMU1.Out=FPConditionCode(cc,1)          ConditionReg_DMMU1-Out(S112)
	S116= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F231)
	S117= IR_DMMU2.In={0,rS,cc,0,1,rD,0,1}                      Path(S113,S116)
	S118= A_DMMU1.Out=>A_DMMU2.In                               Premise(F232)
	S119= A_DMMU2.In=FU(a)                                      Path(S114,S118)
	S120= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F233)
	S121= ConditionReg_DMMU2.In=FPConditionCode(cc,1)           Path(S115,S120)
	S122= CtrlPC=0                                              Premise(F240)
	S123= CtrlPCInc=0                                           Premise(F241)
	S124= PC[Out]=addr+4                                        PC-Hold(S104,S122,S123)
	S125= CtrlICache=0                                          Premise(F243)
	S126= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S125)
	S127= CtrlIR_DMMU2=1                                        Premise(F262)
	S128= [IR_DMMU2]={0,rS,cc,0,1,rD,0,1}                       IR_DMMU2-Write(S117,S127)
	S129= CtrlA_DMMU2=1                                         Premise(F263)
	S130= [A_DMMU2]=FU(a)                                       A_DMMU2-Write(S119,S129)
	S131= CtrlConditionReg_DMMU2=1                              Premise(F264)
	S132= [ConditionReg_DMMU2]=FPConditionCode(cc,1)            ConditionReg_DMMU2-Write(S121,S131)

MEM(DMMU2)	S133= IR_DMMU2.Out={0,rS,cc,0,1,rD,0,1}                     IR_DMMU2-Out(S128)
	S134= A_DMMU2.Out=FU(a)                                     A_DMMU2-Out(S130)
	S135= ConditionReg_DMMU2.Out=FPConditionCode(cc,1)          ConditionReg_DMMU2-Out(S132)
	S136= IR_DMMU2.Out=>IR_WB.In                                Premise(F270)
	S137= IR_WB.In={0,rS,cc,0,1,rD,0,1}                         Path(S133,S136)
	S138= A_DMMU2.Out=>A_WB.In                                  Premise(F271)
	S139= A_WB.In=FU(a)                                         Path(S134,S138)
	S140= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F272)
	S141= ConditionReg_WB.In=FPConditionCode(cc,1)              Path(S135,S140)
	S142= CtrlPC=0                                              Premise(F279)
	S143= CtrlPCInc=0                                           Premise(F280)
	S144= PC[Out]=addr+4                                        PC-Hold(S124,S142,S143)
	S145= CtrlICache=0                                          Premise(F282)
	S146= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S126,S145)
	S147= CtrlIR_WB=1                                           Premise(F296)
	S148= [IR_WB]={0,rS,cc,0,1,rD,0,1}                          IR_WB-Write(S137,S147)
	S149= CtrlA_WB=1                                            Premise(F298)
	S150= [A_WB]=FU(a)                                          A_WB-Write(S139,S149)
	S151= CtrlConditionReg_WB=1                                 Premise(F300)
	S152= [ConditionReg_WB]=FPConditionCode(cc,1)               ConditionReg_WB-Write(S141,S151)

WB	S153= IR_WB.Out15_11=rD                                     IR-Out(S148)
	S154= A_WB.Out=FU(a)                                        A_WB-Out(S150)
	S155= IR_WB.Out15_11=>GPR.WReg                              Premise(F307)
	S156= GPR.WReg=rD                                           Path(S153,S155)
	S157= A_WB.Out=>GPR.WData                                   Premise(F308)
	S158= GPR.WData=FU(a)                                       Path(S154,S157)
	S159= CtrlPC=0                                              Premise(F317)
	S160= CtrlPCInc=0                                           Premise(F318)
	S161= PC[Out]=addr+4                                        PC-Hold(S144,S159,S160)
	S162= CtrlICache=0                                          Premise(F320)
	S163= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S146,S162)
	S164= CtrlGPR=1                                             Premise(F326)
	S165= GPR[rD]=FU(a)                                         GPR-Write(S156,S158,S164)
	S166= CtrlConditionReg_WB=0                                 Premise(F338)
	S167= [ConditionReg_WB]=FPConditionCode(cc,1)               ConditionReg_WB-Hold(S152,S166)

POST	S161= PC[Out]=addr+4                                        PC-Hold(S144,S159,S160)
	S163= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S146,S162)
	S165= GPR[rD]=FU(a)                                         GPR-Write(S156,S158,S164)
	S167= [ConditionReg_WB]=FPConditionCode(cc,1)               ConditionReg_WB-Hold(S152,S166)

