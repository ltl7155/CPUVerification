
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={0,rS,rT,rD,0,10}                          Premise(F3)
	S2= GPR[rT]=b                                               Premise(F5)

IF	S3= PC.Out=addr                                             PC-Out(S0)
	S4= PC.Out=>ICache.IEA                                      Premise(F10)
	S5= ICache.IEA=addr                                         Path(S3,S4)
	S6= ICache.Out={0,rS,rT,rD,0,10}                            ICache-Search(S5,S1)
	S7= ICache.Out=>IR.In                                       Premise(F11)
	S8= IR.In={0,rS,rT,rD,0,10}                                 Path(S6,S7)
	S9= CtrlPC=0                                                Premise(F19)
	S10= CtrlPCInc=1                                            Premise(F20)
	S11= PC[Out]=addr+4                                         PC-Inc(S0,S9,S10)
	S12= CtrlIR=1                                               Premise(F23)
	S13= [IR]={0,rS,rT,rD,0,10}                                 IR-Write(S8,S12)
	S14= CtrlGPR=0                                              Premise(F27)
	S15= GPR[rT]=b                                              GPR-Hold(S2,S14)

ID	S16= IR.Out20_16=rT                                         IR-Out(S13)
	S17= IR.Out20_16=>GPR.RReg2                                 Premise(F50)
	S18= GPR.RReg2=rT                                           Path(S16,S17)
	S19= GPR.Rdata2=b                                           GPR-Read(S18,S15)
	S20= GPR.Rdata2=>B.In                                       Premise(F53)
	S21= B.In=b                                                 Path(S19,S20)
	S22= CtrlPC=0                                               Premise(F59)
	S23= CtrlPCInc=0                                            Premise(F60)
	S24= PC[Out]=addr+4                                         PC-Hold(S11,S22,S23)
	S25= CtrlB=1                                                Premise(F69)
	S26= [B]=b                                                  B-Write(S21,S25)

EX	S27= B.Out=b                                                B-Out(S26)
	S28= CMPU.A=32'b0                                           Premise(F71)
	S29= B.Out=>CMPU.B                                          Premise(F72)
	S30= CMPU.B=b                                               Path(S27,S29)
	S31= CMPU.zero=CompareS(32'b0,b)                            CMPU-CMPS(S28,S30)
	S32= CMPU.zero=>ConditionReg.In                             Premise(F74)
	S33= ConditionReg.In=CompareS(32'b0,b)                      Path(S31,S32)
	S34= CtrlPC=0                                               Premise(F80)
	S35= CtrlPCInc=0                                            Premise(F81)
	S36= PC[Out]=addr+4                                         PC-Hold(S24,S34,S35)
	S37= CtrlConditionReg=1                                     Premise(F91)
	S38= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Write(S33,S37)

MEM	S39= CtrlPC=0                                               Premise(F97)
	S40= CtrlPCInc=0                                            Premise(F98)
	S41= PC[Out]=addr+4                                         PC-Hold(S36,S39,S40)
	S42= CtrlConditionReg=0                                     Premise(F108)
	S43= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S38,S42)

MEM(DMMU1)	S44= CtrlPC=0                                               Premise(F114)
	S45= CtrlPCInc=0                                            Premise(F115)
	S46= PC[Out]=addr+4                                         PC-Hold(S41,S44,S45)
	S47= CtrlConditionReg=0                                     Premise(F125)
	S48= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S43,S47)

MEM(DMMU2)	S49= CtrlPC=0                                               Premise(F131)
	S50= CtrlPCInc=0                                            Premise(F132)
	S51= PC[Out]=addr+4                                         PC-Hold(S46,S49,S50)
	S52= CtrlConditionReg=0                                     Premise(F142)
	S53= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S48,S52)

WB	S54= CtrlPC=0                                               Premise(F151)
	S55= CtrlPCInc=0                                            Premise(F152)
	S56= PC[Out]=addr+4                                         PC-Hold(S51,S54,S55)
	S57= CtrlConditionReg=0                                     Premise(F162)
	S58= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S53,S57)

POST	S56= PC[Out]=addr+4                                         PC-Hold(S51,S54,S55)
	S58= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S53,S57)

