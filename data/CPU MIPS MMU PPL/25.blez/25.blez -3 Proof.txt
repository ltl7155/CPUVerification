
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={6,rS,0,offset}                            Premise(F3)

IF	S2= PC.Out=addr                                             PC-Out(S0)
	S3= PC.Out=>ICache.IEA                                      Premise(F61)
	S4= ICache.IEA=addr                                         Path(S2,S3)
	S5= ICache.Out={6,rS,0,offset}                              ICache-Search(S4,S1)
	S6= ICache.Out=>IR_ID.In                                    Premise(F68)
	S7= IR_ID.In={6,rS,0,offset}                                Path(S5,S6)
	S8= CtrlPC=0                                                Premise(F99)
	S9= CtrlPCInc=1                                             Premise(F100)
	S10= PC[CIA]=addr                                           PC-Inc(S0,S8,S9)
	S11= CtrlIR_ID=1                                            Premise(F118)
	S12= [IR_ID]={6,rS,0,offset}                                IR_ID-Write(S7,S11)
	S13= GPR[rS]=a                                              Premise(F131)

ID	S14= IR_ID.Out={6,rS,0,offset}                              IR-Out(S12)
	S15= IR_ID.Out25_21=rS                                      IR-Out(S12)
	S16= FU.OutID1=>A_EX.In                                     Premise(F263)
	S17= FU.OutID2=>B_EX.In                                     Premise(F265)
	S18= GPR.Rdata1=>FU.InID1                                   Premise(F309)
	S19= GPR.Rdata2=>FU.InID2                                   Premise(F311)
	S20= IR_ID.Out25_21=>GPR.RReg1                              Premise(F313)
	S21= GPR.RReg1=rS                                           Path(S15,S20)
	S22= GPR.Rdata1=a                                           GPR-Read(S21,S13)
	S23= FU.InID1=a                                             Path(S22,S18)
	S24= FU.OutID1=FU(a)                                        FU-Forward(S23)
	S25= A_EX.In=FU(a)                                          Path(S24,S16)
	S26= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S27= FU.InID2=32'b0                                         Path(S26,S19)
	S28= FU.OutID2=FU(32'b0)                                    FU-Forward(S27)
	S29= B_EX.In=FU(32'b0)                                      Path(S28,S17)
	S30= IR_ID.Out=>IR_EX.In                                    Premise(F322)
	S31= IR_EX.In={6,rS,0,offset}                               Path(S14,S30)
	S32= CtrlPCInc=0                                            Premise(F355)
	S33= PC[CIA]=addr                                           PC-Hold(S10,S32)
	S34= CtrlA_EX=1                                             Premise(F358)
	S35= [A_EX]=FU(a)                                           A_EX-Write(S25,S34)
	S36= CtrlB_EX=1                                             Premise(F361)
	S37= [B_EX]=FU(32'b0)                                       B_EX-Write(S29,S36)
	S38= CtrlIR_EX=1                                            Premise(F372)
	S39= [IR_EX]={6,rS,0,offset}                                IR_EX-Write(S31,S38)

EX	S40= PC.CIA=addr                                            PC-Out(S33)
	S41= A_EX.Out=FU(a)                                         A_EX-Out(S35)
	S42= B_EX.Out=FU(32'b0)                                     B_EX-Out(S37)
	S43= IR_EX.Out15_0=offset                                   IR_EX-Out(S39)
	S44= PC.CIA=>ALU.A                                          Premise(F386)
	S45= ALU.A=addr                                             Path(S40,S44)
	S46= SEXT.Out=>ALU.B                                        Premise(F387)
	S47= ALU.Out=>ALUOut_MEM.In                                 Premise(F389)
	S48= A_EX.Out=>CMPU.A                                       Premise(F395)
	S49= CMPU.A=FU(a)                                           Path(S41,S48)
	S50= B_EX.Out=>CMPU.B                                       Premise(F396)
	S51= CMPU.B=FU(32'b0)                                       Path(S42,S50)
	S52= CMPU.gt=CompareS(FU(a),FU(32'b0))                      CMPU-CMPS(S49,S51)
	S53= CMPU.gt=>ConditionReg_MEM.In                           Premise(F427)
	S54= ConditionReg_MEM.In=CompareS(FU(a),FU(32'b0))          Path(S52,S53)
	S55= IR_EX.Out15_0=>SEXT.In                                 Premise(F459)
	S56= SEXT.In=offset                                         Path(S43,S55)
	S57= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S56)
	S58= ALU.B={14{offset[15]},offset,2{0}}                     Path(S57,S46)
	S59= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S45,S58)
	S60= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S59,S47)
	S61= CtrlALUOut_MEM=1                                       Premise(F486)
	S62= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S60,S61)
	S63= CtrlConditionReg_MEM=1                                 Premise(F496)
	S64= [ConditionReg_MEM]=CompareS(FU(a),FU(32'b0))           ConditionReg_MEM-Write(S54,S63)

MEM	S65= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S62)
	S66= ConditionReg_MEM.Out=CompareS(FU(a),FU(32'b0))         ConditionReg_MEM-Out(S64)
	S67= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F557)
	S68= ConditionReg_WB.In=CompareS(FU(a),FU(32'b0))           Path(S66,S67)
	S69= ALUOut_MEM.Out=>PC.In                                  Premise(F586)
	S70= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S65,S69)
	S71= CtrlPC=1                                               Premise(F612)
	S72= CtrlPCInc=0                                            Premise(F613)
	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S70,S71,S72)
	S74= CtrlConditionReg_WB=1                                  Premise(F627)
	S75= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Write(S68,S74)

WB	S76= CtrlPC=0                                               Premise(F996)
	S77= CtrlPCInc=0                                            Premise(F997)
	S78= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S73,S76,S77)
	S79= CtrlConditionReg_WB=0                                  Premise(F1011)
	S80= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Hold(S75,S79)

POST	S78= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S73,S76,S77)
	S80= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Hold(S75,S79)

