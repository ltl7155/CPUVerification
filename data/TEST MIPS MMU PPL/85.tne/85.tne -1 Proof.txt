
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rs,rt,code,54}                      Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)
	S4= GPR[rt]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlCP0=0                                              Premise(F22)
	S15= CP0[ASID]=pid                                          CP0-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F26)
	S17= CtrlPCInc=0                                            Premise(F27)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F28)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlIMem=0                                             Premise(F33)
	S22= IMem[{pid,addr}]={0,rs,rt,code,54}                     IMem-Hold(S2,S21)
	S23= CtrlGPR=0                                              Premise(F35)
	S24= GPR[rs]=a                                              GPR-Hold(S3,S23)
	S25= GPR[rt]=b                                              GPR-Hold(S4,S23)

IF(IMMU)	S26= PC.Out=addr                                            PC-Out(S18)
	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F55)
	S29= IMem.RAddr={pid,addr}                                  Path(S27,S28)
	S30= IMem.Out={0,rs,rt,code,54}                             IMem-Read(S29,S22)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S22)
	S32= IMem.Out=>IRMux.MemData                                Premise(F56)
	S33= IRMux.MemData={0,rs,rt,code,54}                        Path(S30,S32)
	S34= IRMux.Out={0,rs,rt,code,54}                            IRMux-Select2(S33)
	S35= IRMux.Out=>IR_ID.In                                    Premise(F60)
	S36= IR_ID.In={0,rs,rt,code,54}                             Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F61)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= PC.Out=>ICache.IEA                                     Premise(F62)
	S40= ICache.IEA=addr                                        Path(S26,S39)
	S41= CtrlCP0=0                                              Premise(F66)
	S42= CP0[ASID]=pid                                          CP0-Hold(S15,S41)
	S43= CtrlPC=0                                               Premise(F70)
	S44= CtrlPCInc=1                                            Premise(F71)
	S45= PC[Out]=addr+4                                         PC-Inc(S18,S43,S44)
	S46= CtrlICache=1                                           Premise(F73)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S40,S38,S46)
	S48= CtrlIR_ID=1                                            Premise(F76)
	S49= [IR_ID]={0,rs,rt,code,54}                              IR_ID-Write(S36,S48)
	S50= CtrlGPR=0                                              Premise(F79)
	S51= GPR[rs]=a                                              GPR-Hold(S24,S50)
	S52= GPR[rt]=b                                              GPR-Hold(S25,S50)

ID	S53= IR_ID.Out25_21=rs                                      IR-Out(S49)
	S54= IR_ID.Out20_16=rt                                      IR-Out(S49)
	S55= IR_ID.Out25_21=>GPR.RReg1                              Premise(F100)
	S56= GPR.RReg1=rs                                           Path(S53,S55)
	S57= GPR.Rdata1=a                                           GPR-Read(S56,S51)
	S58= IR_ID.Out20_16=>GPR.RReg2                              Premise(F101)
	S59= GPR.RReg2=rt                                           Path(S54,S58)
	S60= GPR.Rdata2=b                                           GPR-Read(S59,S52)
	S61= GPR.Rdata1=>FU.InID1                                   Premise(F103)
	S62= FU.InID1=a                                             Path(S57,S61)
	S63= FU.OutID1=FU(a)                                        FU-Forward(S62)
	S64= FU.OutID1=>A_EX.In                                     Premise(F105)
	S65= A_EX.In=FU(a)                                          Path(S63,S64)
	S66= GPR.Rdata2=>FU.InID2                                   Premise(F106)
	S67= FU.InID2=b                                             Path(S60,S66)
	S68= FU.OutID2=FU(b)                                        FU-Forward(S67)
	S69= FU.OutID2=>B_EX.In                                     Premise(F108)
	S70= B_EX.In=FU(b)                                          Path(S68,S69)
	S71= CtrlCP0=0                                              Premise(F113)
	S72= CP0[ASID]=pid                                          CP0-Hold(S42,S71)
	S73= CtrlPC=0                                               Premise(F117)
	S74= CtrlPCInc=0                                            Premise(F118)
	S75= PC[Out]=addr+4                                         PC-Hold(S45,S73,S74)
	S76= CtrlICache=0                                           Premise(F120)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S76)
	S78= CtrlA_EX=1                                             Premise(F127)
	S79= [A_EX]=FU(a)                                           A_EX-Write(S65,S78)
	S80= CtrlB_EX=1                                             Premise(F128)
	S81= [B_EX]=FU(b)                                           B_EX-Write(S70,S80)

EX	S82= A_EX.Out=FU(a)                                         A_EX-Out(S79)
	S83= B_EX.Out=FU(b)                                         B_EX-Out(S81)
	S84= A_EX.Out=>CMPU.A                                       Premise(F148)
	S85= CMPU.A=FU(a)                                           Path(S82,S84)
	S86= B_EX.Out=>CMPU.B                                       Premise(F149)
	S87= CMPU.B=FU(b)                                           Path(S83,S86)
	S88= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S85,S87)
	S89= CMPU.zero=>ConditionReg_MEM.In                         Premise(F151)
	S90= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S88,S89)
	S91= CtrlCP0=0                                              Premise(F155)
	S92= CP0[ASID]=pid                                          CP0-Hold(S72,S91)
	S93= CtrlPC=0                                               Premise(F159)
	S94= CtrlPCInc=0                                            Premise(F160)
	S95= PC[Out]=addr+4                                         PC-Hold(S75,S93,S94)
	S96= CtrlICache=0                                           Premise(F162)
	S97= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S77,S96)
	S98= CtrlConditionReg_MEM=1                                 Premise(F172)
	S99= [ConditionReg_MEM]=CompareS(FU(a),FU(b))               ConditionReg_MEM-Write(S90,S98)

MEM	S100= CP0.ASID=pid                                          CP0-Read-ASID(S92)
	S101= PC.Out=addr+4                                         PC-Out(S95)
	S102= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))            ConditionReg_MEM-Out(S99)
	S103= PC.Out=>CP0.EPCIn                                     Premise(F192)
	S104= CP0.EPCIn=addr+4                                      Path(S101,S103)
	S105= CP0.ExCodeIn=5'h0d                                    Premise(F193)
	S106= CP0.ASID=>PIDReg.In                                   Premise(F195)
	S107= PIDReg.In=pid                                         Path(S100,S106)
	S108= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In           Premise(F201)
	S109= ConditionReg_DMMU1.In=CompareS(FU(a),FU(b))           Path(S102,S108)
	S110= CtrlEPCIn=1                                           Premise(F208)
	S111= CP0[EPC]=addr+4                                       CP0-Write-EPC(S104,S110)
	S112= CtrlExCodeIn=1                                        Premise(F209)
	S113= CP0[ExCode]=5'h0d                                     CP0-Write-ExCode(S105,S112)
	S114= CtrlICache=0                                          Premise(F214)
	S115= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S97,S114)
	S116= CtrlPIDReg=1                                          Premise(F226)
	S117= [PIDReg]=pid                                          PIDReg-Write(S107,S116)
	S118= CtrlConditionReg_DMMU1=1                              Premise(F233)
	S119= [ConditionReg_DMMU1]=CompareS(FU(a),FU(b))            ConditionReg_DMMU1-Write(S109,S118)

MEM(DMMU1)	S120= ConditionReg_DMMU1.Out=CompareS(FU(a),FU(b))          ConditionReg_DMMU1-Out(S119)
	S121= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F246)
	S122= ConditionReg_DMMU2.In=CompareS(FU(a),FU(b))           Path(S120,S121)
	S123= CtrlCP0=0                                             Premise(F249)
	S124= CP0[EPC]=addr+4                                       CP0-Hold(S111,S123)
	S125= CP0[ExCode]=5'h0d                                     CP0-Hold(S113,S123)
	S126= CtrlICache=0                                          Premise(F256)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S115,S126)
	S128= CtrlPIDReg=0                                          Premise(F268)
	S129= [PIDReg]=pid                                          PIDReg-Hold(S117,S128)
	S130= CtrlConditionReg_DMMU2=1                              Premise(F278)
	S131= [ConditionReg_DMMU2]=CompareS(FU(a),FU(b))            ConditionReg_DMMU2-Write(S122,S130)

MEM(DMMU2)	S132= ConditionReg_DMMU2.Out=CompareS(FU(a),FU(b))          ConditionReg_DMMU2-Out(S131)
	S133= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F285)
	S134= ConditionReg_WB.In=CompareS(FU(a),FU(b))              Path(S132,S133)
	S135= CtrlCP0=0                                             Premise(F288)
	S136= CP0[EPC]=addr+4                                       CP0-Hold(S124,S135)
	S137= CP0[ExCode]=5'h0d                                     CP0-Hold(S125,S135)
	S138= CtrlICache=0                                          Premise(F295)
	S139= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S138)
	S140= CtrlPIDReg=0                                          Premise(F307)
	S141= [PIDReg]=pid                                          PIDReg-Hold(S129,S140)
	S142= CtrlConditionReg_WB=1                                 Premise(F315)
	S143= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Write(S134,S142)

WB	S144= CtrlCP0=0                                             Premise(F323)
	S145= CP0[EPC]=addr+4                                       CP0-Hold(S136,S144)
	S146= CP0[ExCode]=5'h0d                                     CP0-Hold(S137,S144)
	S147= CtrlICache=0                                          Premise(F330)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S139,S147)
	S149= CtrlPIDReg=0                                          Premise(F342)
	S150= [PIDReg]=pid                                          PIDReg-Hold(S141,S149)
	S151= CtrlConditionReg_WB=0                                 Premise(F350)
	S152= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S143,S151)

POST	S145= CP0[EPC]=addr+4                                       CP0-Hold(S136,S144)
	S146= CP0[ExCode]=5'h0d                                     CP0-Hold(S137,S144)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S139,S147)
	S150= [PIDReg]=pid                                          PIDReg-Hold(S141,S149)
	S152= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S143,S151)

