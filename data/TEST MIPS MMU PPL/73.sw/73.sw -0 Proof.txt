
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={43,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= GPR[rT]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlCP0=0                                              Premise(F22)
	S15= CP0[ASID]=pid                                          CP0-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F26)
	S17= CtrlPCInc=0                                            Premise(F27)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F28)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlIMem=0                                             Premise(F33)
	S22= IMem[{pid,addr}]={43,rS,rT,offset}                     IMem-Hold(S2,S21)
	S23= CtrlGPR=0                                              Premise(F35)
	S24= GPR[rS]=base                                           GPR-Hold(S3,S23)
	S25= GPR[rT]=a                                              GPR-Hold(S4,S23)

IF(IMMU)	S26= PC.Out=addr                                            PC-Out(S18)
	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S29= IMem.RAddr={pid,addr}                                  Path(S27,S28)
	S30= IMem.Out={43,rS,rT,offset}                             IMem-Read(S29,S22)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S22)
	S32= IMem.Out=>IRMux.MemData                                Premise(F67)
	S33= IRMux.MemData={43,rS,rT,offset}                        Path(S30,S32)
	S34= IRMux.Out={43,rS,rT,offset}                            IRMux-Select2(S33)
	S35= IRMux.Out=>IR_ID.In                                    Premise(F71)
	S36= IR_ID.In={43,rS,rT,offset}                             Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F72)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= PC.Out=>ICache.IEA                                     Premise(F73)
	S40= ICache.IEA=addr                                        Path(S26,S39)
	S41= CtrlCP0=0                                              Premise(F77)
	S42= CP0[ASID]=pid                                          CP0-Hold(S15,S41)
	S43= CtrlPC=0                                               Premise(F81)
	S44= CtrlPCInc=1                                            Premise(F82)
	S45= PC[Out]=addr+4                                         PC-Inc(S18,S43,S44)
	S46= CtrlICache=1                                           Premise(F84)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S40,S38,S46)
	S48= CtrlIR_ID=1                                            Premise(F87)
	S49= [IR_ID]={43,rS,rT,offset}                              IR_ID-Write(S36,S48)
	S50= CtrlGPR=0                                              Premise(F90)
	S51= GPR[rS]=base                                           GPR-Hold(S24,S50)
	S52= GPR[rT]=a                                              GPR-Hold(S25,S50)

ID	S53= IR_ID.Out={43,rS,rT,offset}                            IR-Out(S49)
	S54= IR_ID.Out25_21=rS                                      IR-Out(S49)
	S55= IR_ID.Out15_0=offset                                   IR-Out(S49)
	S56= IR_ID.Out25_21=>GPR.RReg1                              Premise(F122)
	S57= GPR.RReg1=rS                                           Path(S54,S56)
	S58= GPR.Rdata1=base                                        GPR-Read(S57,S51)
	S59= IR_ID.Out15_0=>IMMEXT.In                               Premise(F123)
	S60= IMMEXT.In=offset                                       Path(S55,S59)
	S61= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S60)
	S62= GPR.Rdata1=>FU.InID1                                   Premise(F124)
	S63= FU.InID1=base                                          Path(S58,S62)
	S64= FU.OutID1=FU(base)                                     FU-Forward(S63)
	S65= FU.OutID1=>A_EX.In                                     Premise(F126)
	S66= A_EX.In=FU(base)                                       Path(S64,S65)
	S67= IMMEXT.Out=>B_EX.In                                    Premise(F127)
	S68= B_EX.In={16{offset[15]},offset}                        Path(S61,S67)
	S69= IR_ID.Out=>IR_EX.In                                    Premise(F128)
	S70= IR_EX.In={43,rS,rT,offset}                             Path(S53,S69)
	S71= CtrlCP0=0                                              Premise(F133)
	S72= CP0[ASID]=pid                                          CP0-Hold(S42,S71)
	S73= CtrlPC=0                                               Premise(F137)
	S74= CtrlPCInc=0                                            Premise(F138)
	S75= PC[Out]=addr+4                                         PC-Hold(S45,S73,S74)
	S76= CtrlICache=0                                           Premise(F140)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S76)
	S78= CtrlGPR=0                                              Premise(F146)
	S79= GPR[rT]=a                                              GPR-Hold(S52,S78)
	S80= CtrlA_EX=1                                             Premise(F147)
	S81= [A_EX]=FU(base)                                        A_EX-Write(S66,S80)
	S82= CtrlB_EX=1                                             Premise(F148)
	S83= [B_EX]={16{offset[15]},offset}                         B_EX-Write(S68,S82)
	S84= CtrlIR_EX=1                                            Premise(F149)
	S85= [IR_EX]={43,rS,rT,offset}                              IR_EX-Write(S70,S84)

EX	S86= A_EX.Out=FU(base)                                      A_EX-Out(S81)
	S87= B_EX.Out={16{offset[15]},offset}                       B_EX-Out(S83)
	S88= IR_EX.Out20_16=rT                                      IR_EX-Out(S85)
	S89= A_EX.Out=>ALU.A                                        Premise(F178)
	S90= ALU.A=FU(base)                                         Path(S86,S89)
	S91= B_EX.Out=>ALU.B                                        Premise(F179)
	S92= ALU.B={16{offset[15]},offset}                          Path(S87,S91)
	S93= ALU.Out=FU(base)+{16{offset[15]},offset}               ALU(S90,S92)
	S94= ALU.Out1_0={FU(base)+{16{offset[15]},offset}}[1:0]     ALU(S90,S92)
	S95= ALU.Out=>ALUOut_MEM.In                                 Premise(F181)
	S96= ALUOut_MEM.In=FU(base)+{16{offset[15]},offset}         Path(S93,S95)
	S97= IR_EX.Out20_16=>GPR.RReg2                              Premise(F182)
	S98= GPR.RReg2=rT                                           Path(S88,S97)
	S99= GPR.Rdata2=a                                           GPR-Read(S98,S79)
	S100= GPR.Rdata2=>MemDataSelS.In                            Premise(F183)
	S101= MemDataSelS.In=a                                      Path(S99,S100)
	S102= ALU.Out1_0=>MemDataSelS.Addr                          Premise(F184)
	S103= MemDataSelS.Addr={FU(base)+{16{offset[15]},offset}}[1:0]Path(S94,S102)
	S104= MemDataSelS.Out=a                                     MemDataSelS(S101,S103)
	S105= MemDataSelS.Out=>DR_MEM.In                            Premise(F186)
	S106= DR_MEM.In=a                                           Path(S104,S105)
	S107= CtrlCP0=0                                             Premise(F190)
	S108= CP0[ASID]=pid                                         CP0-Hold(S72,S107)
	S109= CtrlPC=0                                              Premise(F194)
	S110= CtrlPCInc=0                                           Premise(F195)
	S111= PC[Out]=addr+4                                        PC-Hold(S75,S109,S110)
	S112= CtrlICache=0                                          Premise(F197)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S77,S112)
	S114= CtrlALUOut_MEM=1                                      Premise(F207)
	S115= [ALUOut_MEM]=FU(base)+{16{offset[15]},offset}         ALUOut_MEM-Write(S96,S114)
	S116= CtrlDR_MEM=1                                          Premise(F208)
	S117= [DR_MEM]=a                                            DR_MEM-Write(S106,S116)

MEM	S118= CP0.ASID=pid                                          CP0-Read-ASID(S108)
	S119= ALUOut_MEM.Out=FU(base)+{16{offset[15]},offset}       ALUOut_MEM-Out(S115)
	S120= DR_MEM.Out=a                                          DR_MEM-Out(S117)
	S121= CP0.ASID=>DMMU.PID                                    Premise(F237)
	S122= DMMU.PID=pid                                          Path(S118,S121)
	S123= ALUOut_MEM.Out=>DMMU.IEA                              Premise(F238)
	S124= DMMU.IEA=FU(base)+{16{offset[15]},offset}             Path(S119,S123)
	S125= DMMU.Addr={pid,FU(base)+{16{offset[15]},offset}}      DMMU-Search(S122,S124)
	S126= DMMU.Addr=>DAddrReg_DMMU1.In                          Premise(F239)
	S127= DAddrReg_DMMU1.In={pid,FU(base)+{16{offset[15]},offset}}Path(S125,S126)
	S128= DR_MEM.Out=>DR_DMMU1.In                               Premise(F246)
	S129= DR_DMMU1.In=a                                         Path(S120,S128)
	S130= CtrlPC=0                                              Premise(F257)
	S131= CtrlPCInc=0                                           Premise(F258)
	S132= PC[Out]=addr+4                                        PC-Hold(S111,S130,S131)
	S133= CtrlICache=0                                          Premise(F260)
	S134= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S133)
	S135= CtrlDAddrReg_DMMU1=1                                  Premise(F274)
	S136= [DAddrReg_DMMU1]={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU1-Write(S127,S135)
	S137= CtrlDR_DMMU1=1                                        Premise(F284)
	S138= [DR_DMMU1]=a                                          DR_DMMU1-Write(S129,S137)

MEM(DMMU1)	S139= DAddrReg_DMMU1.Out={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU1-Out(S136)
	S140= DR_DMMU1.Out=a                                        DR_DMMU1-Out(S138)
	S141= DR_DMMU1.Out=>DR_DMMU2.In                             Premise(F303)
	S142= DR_DMMU2.In=a                                         Path(S140,S141)
	S143= DAddrReg_DMMU1.Out=>DAddrReg_DMMU2.In                 Premise(F304)
	S144= DAddrReg_DMMU2.In={pid,FU(base)+{16{offset[15]},offset}}Path(S139,S143)
	S145= CtrlPC=0                                              Premise(F311)
	S146= CtrlPCInc=0                                           Premise(F312)
	S147= PC[Out]=addr+4                                        PC-Hold(S132,S145,S146)
	S148= CtrlICache=0                                          Premise(F314)
	S149= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S134,S148)
	S150= CtrlDR_DMMU2=1                                        Premise(F344)
	S151= [DR_DMMU2]=a                                          DR_DMMU2-Write(S142,S150)
	S152= CtrlDAddrReg_DMMU2=1                                  Premise(F345)
	S153= [DAddrReg_DMMU2]={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU2-Write(S144,S152)

MEM(DMMU2)	S154= DR_DMMU2.Out=a                                        DR_DMMU2-Out(S151)
	S155= DAddrReg_DMMU2.Out={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU2-Out(S153)
	S156= DAddrReg_DMMU2.Out=>DMem.WAddr                        Premise(F352)
	S157= DMem.WAddr={pid,FU(base)+{16{offset[15]},offset}}     Path(S155,S156)
	S158= DR_DMMU2.Out=>DMem.WData                              Premise(F353)
	S159= DMem.WData=a                                          Path(S154,S158)
	S160= CtrlPC=0                                              Premise(F363)
	S161= CtrlPCInc=0                                           Premise(F364)
	S162= PC[Out]=addr+4                                        PC-Hold(S147,S160,S161)
	S163= CtrlICache=0                                          Premise(F366)
	S164= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S149,S163)
	S165= CtrlDMem=1                                            Premise(F398)
	S166= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a        DMem-Write(S157,S159,S165)

WB	S167= CtrlPC=0                                              Premise(F408)
	S168= CtrlPCInc=0                                           Premise(F409)
	S169= PC[Out]=addr+4                                        PC-Hold(S162,S167,S168)
	S170= CtrlICache=0                                          Premise(F411)
	S171= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S164,S170)
	S172= CtrlDMem=0                                            Premise(F443)
	S173= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a        DMem-Hold(S166,S172)

POST	S169= PC[Out]=addr+4                                        PC-Hold(S162,S167,S168)
	S171= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S164,S170)
	S173= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a        DMem-Hold(S166,S172)

