
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,12,imm}                          Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={1,rs,12,imm}                         IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rs]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F54)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={1,rs,12,imm}                                 IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F55)
	S29= IRMux.MemData={1,rs,12,imm}                            Path(S26,S28)
	S30= IRMux.Out={1,rs,12,imm}                                IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F59)
	S32= IR_ID.In={1,rs,12,imm}                                 Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F60)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F61)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlICache=1                                           Premise(F72)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S37)
	S39= CtrlIR_ID=1                                            Premise(F75)
	S40= [IR_ID]={1,rs,12,imm}                                  IR_ID-Write(S32,S39)
	S41= CtrlGPR=0                                              Premise(F78)
	S42= GPR[rs]=a                                              GPR-Hold(S21,S41)

ID	S43= IR_ID.Out25_21=rs                                      IR-Out(S40)
	S44= IR_ID.Out15_0=imm                                      IR-Out(S40)
	S45= IR_ID.Out25_21=>GPR.RReg1                              Premise(F99)
	S46= GPR.RReg1=rs                                           Path(S43,S45)
	S47= GPR.Rdata1=a                                           GPR-Read(S46,S42)
	S48= IR_ID.Out15_0=>IMMEXT.In                               Premise(F101)
	S49= IMMEXT.In=imm                                          Path(S44,S48)
	S50= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S49)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F102)
	S52= FU.InID1=a                                             Path(S47,S51)
	S53= FU.OutID1=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID1=>A_EX.In                                     Premise(F104)
	S55= A_EX.In=FU(a)                                          Path(S53,S54)
	S56= IMMEXT.Out=>B_EX.In                                    Premise(F105)
	S57= B_EX.In={16{imm[15]},imm}                              Path(S50,S56)
	S58= CtrlICache=0                                           Premise(F118)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S58)
	S60= CtrlA_EX=1                                             Premise(F125)
	S61= [A_EX]=FU(a)                                           A_EX-Write(S55,S60)
	S62= CtrlB_EX=1                                             Premise(F126)
	S63= [B_EX]={16{imm[15]},imm}                               B_EX-Write(S57,S62)

EX	S64= A_EX.Out=FU(a)                                         A_EX-Out(S61)
	S65= B_EX.Out={16{imm[15]},imm}                             B_EX-Out(S63)
	S66= A_EX.Out=>CMPU.A                                       Premise(F146)
	S67= CMPU.A=FU(a)                                           Path(S64,S66)
	S68= B_EX.Out=>CMPU.B                                       Premise(F147)
	S69= CMPU.B={16{imm[15]},imm}                               Path(S65,S68)
	S70= CMPU.zero=CompareS(FU(a),{16{imm[15]},imm})            CMPU-CMPS(S67,S69)
	S71= CMPU.zero=>ConditionReg_MEM.In                         Premise(F149)
	S72= ConditionReg_MEM.In=CompareS(FU(a),{16{imm[15]},imm})  Path(S70,S71)
	S73= CtrlICache=0                                           Premise(F160)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S73)
	S75= CtrlConditionReg_MEM=1                                 Premise(F170)
	S76= [ConditionReg_MEM]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_MEM-Write(S72,S75)

MEM	S77= ConditionReg_MEM.Out=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_MEM-Out(S76)
	S78= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F199)
	S79= ConditionReg_DMMU1.In=CompareS(FU(a),{16{imm[15]},imm})Path(S77,S78)
	S80= CtrlICache=0                                           Premise(F212)
	S81= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S80)
	S82= CtrlConditionReg_DMMU1=1                               Premise(F231)
	S83= [ConditionReg_DMMU1]=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_DMMU1-Write(S79,S82)

MEM(DMMU1)	S84= ConditionReg_DMMU1.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU1-Out(S83)
	S85= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In          Premise(F244)
	S86= ConditionReg_DMMU2.In=CompareS(FU(a),{16{imm[15]},imm})Path(S84,S85)
	S87= CtrlICache=0                                           Premise(F254)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S81,S87)
	S89= CtrlConditionReg_DMMU2=1                               Premise(F276)
	S90= [ConditionReg_DMMU2]=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_DMMU2-Write(S86,S89)

MEM(DMMU2)	S91= ConditionReg_DMMU2.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU2-Out(S90)
	S92= ConditionReg_DMMU2.Out=>ConditionReg_WB.In             Premise(F283)
	S93= ConditionReg_WB.In=CompareS(FU(a),{16{imm[15]},imm})   Path(S91,S92)
	S94= CtrlICache=0                                           Premise(F293)
	S95= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S88,S94)
	S96= CtrlConditionReg_WB=1                                  Premise(F313)
	S97= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})    ConditionReg_WB-Write(S93,S96)

WB	S98= CtrlICache=0                                           Premise(F328)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S95,S98)
	S100= CtrlConditionReg_WB=0                                 Premise(F348)
	S101= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S97,S100)

POST	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S95,S98)
	S101= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S97,S100)

