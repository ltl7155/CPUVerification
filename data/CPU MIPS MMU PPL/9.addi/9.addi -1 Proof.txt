
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={8,rS,rT,SIMM}                         Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F69)
	S6= PC.Out=>IMMU.IEA                                        Premise(F75)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F76)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlIAddrReg=1                                         Premise(F141)
	S13= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S12)
	S14= CtrlPC=0                                               Premise(F142)
	S15= CtrlPCInc=0                                            Premise(F143)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIMem=0                                             Premise(F144)
	S18= IMem[{pid,addr}]={8,rS,rT,SIMM}                        IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F154)

IMMU	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S13)
	S21= PC.Out=addr                                            PC-Out(S16)
	S22= PC.Out=>ICache.IEA                                     Premise(F222)
	S23= ICache.IEA=addr                                        Path(S21,S22)
	S24= IMem.MEM8WordOut=>ICache.WData                         Premise(F224)
	S25= IAddrReg.Out=>IMem.RAddr                               Premise(F229)
	S26= IMem.RAddr={pid,addr}                                  Path(S20,S25)
	S27= IMem.Out={8,rS,rT,SIMM}                                IMem-Read(S26,S18)
	S28= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S26,S18)
	S29= ICache.WData=IMemGet8Word({pid,addr})                  Path(S28,S24)
	S30= IMem.Out=>IRMux.MemData                                Premise(F232)
	S31= IRMux.MemData={8,rS,rT,SIMM}                           Path(S27,S30)
	S32= IRMux.Out={8,rS,rT,SIMM}                               IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F238)
	S34= IR_ID.In={8,rS,rT,SIMM}                                Path(S32,S33)
	S35= CtrlICache=1                                           Premise(F282)
	S36= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S23,S29,S35)
	S37= CtrlIR_ID=1                                            Premise(F288)
	S38= [IR_ID]={8,rS,rT,SIMM}                                 IR_ID-Write(S34,S37)
	S39= CtrlGPR=0                                              Premise(F292)
	S40= GPR[rS]=a                                              GPR-Hold(S19,S39)
	S41= CtrlPC=0                                               Premise(F294)
	S42= CtrlPCInc=1                                            Premise(F295)
	S43= PC[Out]=addr+4                                         PC-Inc(S16,S41,S42)

ID	S44= IR_ID.Out={8,rS,rT,SIMM}                               IR-Out(S38)
	S45= IR_ID.Out25_21=rS                                      IR-Out(S38)
	S46= IR_ID.Out15_0=SIMM                                     IR-Out(S38)
	S47= FU.OutID1=>A_EX.In                                     Premise(F313)
	S48= IMMEXT.Out=>B_EX.In                                    Premise(F315)
	S49= GPR.Rdata1=>FU.InID1                                   Premise(F363)
	S50= IR_ID.Out25_21=>GPR.RReg1                              Premise(F370)
	S51= GPR.RReg1=rS                                           Path(S45,S50)
	S52= GPR.Rdata1=a                                           GPR-Read(S51,S40)
	S53= FU.InID1=a                                             Path(S52,S49)
	S54= FU.OutID1=FU(a)                                        FU-Forward(S53)
	S55= A_EX.In=FU(a)                                          Path(S54,S47)
	S56= IR_ID.Out15_0=>IMMEXT.In                               Premise(F378)
	S57= IMMEXT.In=SIMM                                         Path(S46,S56)
	S58= IMMEXT.Out={16{SIMM[15]},SIMM}                         IMMEXT(S57)
	S59= B_EX.In={16{SIMM[15]},SIMM}                            Path(S58,S48)
	S60= IR_ID.Out=>IR_EX.In                                    Premise(F388)
	S61= IR_EX.In={8,rS,rT,SIMM}                                Path(S44,S60)
	S62= CtrlA_EX=1                                             Premise(F424)
	S63= [A_EX]=FU(a)                                           A_EX-Write(S55,S62)
	S64= CtrlB_EX=1                                             Premise(F425)
	S65= [B_EX]={16{SIMM[15]},SIMM}                             B_EX-Write(S59,S64)
	S66= CtrlICache=0                                           Premise(F434)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S36,S66)
	S68= CtrlIR_EX=1                                            Premise(F439)
	S69= [IR_EX]={8,rS,rT,SIMM}                                 IR_EX-Write(S61,S68)
	S70= CtrlPC=0                                               Premise(F446)
	S71= CtrlPCInc=0                                            Premise(F447)
	S72= PC[Out]=addr+4                                         PC-Hold(S43,S70,S71)

EX	S73= A_EX.Out=FU(a)                                         A_EX-Out(S63)
	S74= B_EX.Out={16{SIMM[15]},SIMM}                           B_EX-Out(S65)
	S75= IR_EX.Out={8,rS,rT,SIMM}                               IR_EX-Out(S69)
	S76= A_EX.Out=>ALU.A                                        Premise(F458)
	S77= ALU.A=FU(a)                                            Path(S73,S76)
	S78= B_EX.Out=>ALU.B                                        Premise(F459)
	S79= ALU.B={16{SIMM[15]},SIMM}                              Path(S74,S78)
	S80= ALU.Out=FU(a)+{16{SIMM[15]},SIMM}                      ALU(S77,S79)
	S81= ALU.Out=>ALUOut_MEM.In                                 Premise(F463)
	S82= ALUOut_MEM.In=FU(a)+{16{SIMM[15]},SIMM}                Path(S80,S81)
	S83= IR_EX.Out=>IR_MEM.In                                   Premise(F544)
	S84= IR_MEM.In={8,rS,rT,SIMM}                               Path(S75,S83)
	S85= CtrlALUOut_MEM=1                                       Premise(F578)
	S86= [ALUOut_MEM]=FU(a)+{16{SIMM[15]},SIMM}                 ALUOut_MEM-Write(S82,S85)
	S87= CtrlICache=0                                           Premise(F586)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S87)
	S89= CtrlIR_MEM=1                                           Premise(F594)
	S90= [IR_MEM]={8,rS,rT,SIMM}                                IR_MEM-Write(S84,S89)
	S91= CtrlPC=0                                               Premise(F598)
	S92= CtrlPCInc=0                                            Premise(F599)
	S93= PC[Out]=addr+4                                         PC-Hold(S72,S91,S92)

MEM	S94= ALUOut_MEM.Out=FU(a)+{16{SIMM[15]},SIMM}               ALUOut_MEM-Out(S86)
	S95= IR_MEM.Out={8,rS,rT,SIMM}                              IR_MEM-Out(S90)
	S96= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F616)
	S97= ALUOut_WB.In=FU(a)+{16{SIMM[15]},SIMM}                 Path(S94,S96)
	S98= IR_MEM.Out=>IR_WB.In                                   Premise(F697)
	S99= IR_WB.In={8,rS,rT,SIMM}                                Path(S95,S98)
	S100= CtrlALUOut_WB=1                                       Premise(F732)
	S101= [ALUOut_WB]=FU(a)+{16{SIMM[15]},SIMM}                 ALUOut_WB-Write(S97,S100)
	S102= CtrlICache=0                                          Premise(F737)
	S103= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S88,S102)
	S104= CtrlIR_WB=1                                           Premise(F746)
	S105= [IR_WB]={8,rS,rT,SIMM}                                IR_WB-Write(S99,S104)
	S106= CtrlPC=0                                              Premise(F749)
	S107= CtrlPCInc=0                                           Premise(F750)
	S108= PC[Out]=addr+4                                        PC-Hold(S93,S106,S107)

WB	S109= ALUOut_WB.Out=FU(a)+{16{SIMM[15]},SIMM}               ALUOut_WB-Out(S101)
	S110= IR_WB.Out20_16=rT                                     IR-Out(S105)
	S111= ALUOut_WB.Out=>GPR.WData                              Premise(F1127)
	S112= GPR.WData=FU(a)+{16{SIMM[15]},SIMM}                   Path(S109,S111)
	S113= IR_WB.Out20_16=>GPR.WReg                              Premise(F1128)
	S114= GPR.WReg=rT                                           Path(S110,S113)
	S115= CtrlICache=0                                          Premise(F1190)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S115)
	S117= CtrlGPR=1                                             Premise(F1200)
	S118= GPR[rT]=FU(a)+{16{SIMM[15]},SIMM}                     GPR-Write(S114,S112,S117)
	S119= CtrlPC=0                                              Premise(F1202)
	S120= CtrlPCInc=0                                           Premise(F1203)
	S121= PC[Out]=addr+4                                        PC-Hold(S108,S119,S120)

POST	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S115)
	S118= GPR[rT]=FU(a)+{16{SIMM[15]},SIMM}                     GPR-Write(S114,S112,S117)
	S121= PC[Out]=addr+4                                        PC-Hold(S108,S119,S120)

