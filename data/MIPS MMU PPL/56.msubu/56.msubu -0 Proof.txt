
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rT,0,0,5}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)
	S5= [Lo]=lo                                                 Premise(F5)
	S6= [Hi]=hi                                                 Premise(F6)

IF	S7= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= CP0.ASID=>IMMU.PID                                      Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F28)
	S17= CtrlPCInc=0                                            Premise(F29)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F30)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S19)
	S21= CtrlIMem=0                                             Premise(F35)
	S22= IMem[{pid,addr}]={28,rS,rT,0,0,5}                      IMem-Hold(S2,S21)
	S23= CtrlGPR=0                                              Premise(F37)
	S24= GPR[rS]=a                                              GPR-Hold(S3,S23)
	S25= GPR[rT]=b                                              GPR-Hold(S4,S23)
	S26= CtrlHi=0                                               Premise(F41)
	S27= [Hi]=hi                                                Hi-Hold(S6,S26)
	S28= CtrlLo=0                                               Premise(F42)
	S29= [Lo]=lo                                                Lo-Hold(S5,S28)

IF(IMMU)	S30= PC.Out=addr                                            PC-Out(S18)
	S31= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F54)
	S33= IMem.RAddr={pid,addr}                                  Path(S31,S32)
	S34= IMem.Out={28,rS,rT,0,0,5}                              IMem-Read(S33,S22)
	S35= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S33,S22)
	S36= IMem.Out=>IRMux.MemData                                Premise(F55)
	S37= IRMux.MemData={28,rS,rT,0,0,5}                         Path(S34,S36)
	S38= IRMux.Out={28,rS,rT,0,0,5}                             IRMux-Select2(S37)
	S39= IRMux.Out=>IR_ID.In                                    Premise(F59)
	S40= IR_ID.In={28,rS,rT,0,0,5}                              Path(S38,S39)
	S41= IMem.MEM8WordOut=>ICache.WData                         Premise(F60)
	S42= ICache.WData=IMemGet8Word({pid,addr})                  Path(S35,S41)
	S43= PC.Out=>ICache.IEA                                     Premise(F61)
	S44= ICache.IEA=addr                                        Path(S30,S43)
	S45= CtrlPC=0                                               Premise(F69)
	S46= CtrlPCInc=1                                            Premise(F70)
	S47= PC[Out]=addr+4                                         PC-Inc(S18,S45,S46)
	S48= CtrlICache=1                                           Premise(F72)
	S49= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S44,S42,S48)
	S50= CtrlIR_ID=1                                            Premise(F75)
	S51= [IR_ID]={28,rS,rT,0,0,5}                               IR_ID-Write(S40,S50)
	S52= CtrlGPR=0                                              Premise(F78)
	S53= GPR[rS]=a                                              GPR-Hold(S24,S52)
	S54= GPR[rT]=b                                              GPR-Hold(S25,S52)
	S55= CtrlHi=0                                               Premise(F82)
	S56= [Hi]=hi                                                Hi-Hold(S27,S55)
	S57= CtrlLo=0                                               Premise(F83)
	S58= [Lo]=lo                                                Lo-Hold(S29,S57)

ID	S59= IR_ID.Out25_21=rS                                      IR-Out(S51)
	S60= IR_ID.Out20_16=rT                                      IR-Out(S51)
	S61= IR_ID.Out25_21=>GPR.RReg1                              Premise(F96)
	S62= GPR.RReg1=rS                                           Path(S59,S61)
	S63= GPR.Rdata1=a                                           GPR-Read(S62,S53)
	S64= IR_ID.Out20_16=>GPR.RReg2                              Premise(F97)
	S65= GPR.RReg2=rT                                           Path(S60,S64)
	S66= GPR.Rdata2=b                                           GPR-Read(S65,S54)
	S67= GPR.Rdata1=>FU.InID1                                   Premise(F99)
	S68= FU.InID1=a                                             Path(S63,S67)
	S69= FU.OutID1=FU(a)                                        FU-Forward(S68)
	S70= FU.OutID1=>A_EX.In                                     Premise(F101)
	S71= A_EX.In=FU(a)                                          Path(S69,S70)
	S72= GPR.Rdata2=>FU.InID2                                   Premise(F102)
	S73= FU.InID2=b                                             Path(S66,S72)
	S74= FU.OutID2=FU(b)                                        FU-Forward(S73)
	S75= FU.OutID2=>B_EX.In                                     Premise(F104)
	S76= B_EX.In=FU(b)                                          Path(S74,S75)
	S77= CtrlPC=0                                               Premise(F113)
	S78= CtrlPCInc=0                                            Premise(F114)
	S79= PC[Out]=addr+4                                         PC-Hold(S47,S77,S78)
	S80= CtrlICache=0                                           Premise(F116)
	S81= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S49,S80)
	S82= CtrlA_EX=1                                             Premise(F123)
	S83= [A_EX]=FU(a)                                           A_EX-Write(S71,S82)
	S84= CtrlB_EX=1                                             Premise(F124)
	S85= [B_EX]=FU(b)                                           B_EX-Write(S76,S84)
	S86= CtrlHi=0                                               Premise(F126)
	S87= [Hi]=hi                                                Hi-Hold(S56,S86)
	S88= CtrlLo=0                                               Premise(F127)
	S89= [Lo]=lo                                                Lo-Hold(S58,S88)

EX	S90= A_EX.Out=FU(a)                                         A_EX-Out(S83)
	S91= B_EX.Out=FU(b)                                         B_EX-Out(S85)
	S92= Hi.Out=hi                                              Hi-Out(S87)
	S93= Lo.Out=lo                                              Lo-Out(S89)
	S94= Hi.Out=>MDU.Hi                                         Premise(F141)
	S95= MDU.Hi=hi                                              Path(S92,S94)
	S96= Lo.Out=>MDU.Lo                                         Premise(F142)
	S97= MDU.Lo=lo                                              Path(S93,S96)
	S98= A_EX.Out=>MDU.A                                        Premise(F143)
	S99= MDU.A=FU(a)                                            Path(S90,S98)
	S100= B_EX.Out=>MDU.B                                       Premise(F144)
	S101= MDU.B=FU(b)                                           Path(S91,S100)
	S102= MDU.lo=({hi,lo}-FU(a)*FU(b))[31:0]                    MDU(S99,S101,S95,S97)
	S103= MDU.hi=({hi,lo}-FU(a)*FU(b))[63:32]                   MDU(S99,S101,S95,S97)
	S104= MDU.hi=>Hi.In                                         Premise(F146)
	S105= Hi.In=({hi,lo}-FU(a)*FU(b))[63:32]                    Path(S103,S104)
	S106= MDU.lo=>Lo.In                                         Premise(F147)
	S107= Lo.In=({hi,lo}-FU(a)*FU(b))[31:0]                     Path(S102,S106)
	S108= CtrlPC=0                                              Premise(F155)
	S109= CtrlPCInc=0                                           Premise(F156)
	S110= PC[Out]=addr+4                                        PC-Hold(S79,S108,S109)
	S111= CtrlICache=0                                          Premise(F158)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S81,S111)
	S113= CtrlHi=1                                              Premise(F168)
	S114= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Write(S105,S113)
	S115= CtrlLo=1                                              Premise(F169)
	S116= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Write(S107,S115)

MEM	S117= CtrlPC=0                                              Premise(F197)
	S118= CtrlPCInc=0                                           Premise(F198)
	S119= PC[Out]=addr+4                                        PC-Hold(S110,S117,S118)
	S120= CtrlICache=0                                          Premise(F200)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S120)
	S122= CtrlHi=0                                              Premise(F210)
	S123= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S114,S122)
	S124= CtrlLo=0                                              Premise(F211)
	S125= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S116,S124)

MEM(DMMU1)	S126= CtrlPC=0                                              Premise(F235)
	S127= CtrlPCInc=0                                           Premise(F236)
	S128= PC[Out]=addr+4                                        PC-Hold(S119,S126,S127)
	S129= CtrlICache=0                                          Premise(F238)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S129)
	S131= CtrlHi=0                                              Premise(F248)
	S132= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S123,S131)
	S133= CtrlLo=0                                              Premise(F249)
	S134= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S125,S133)

MEM(DMMU2)	S135= CtrlPC=0                                              Premise(F270)
	S136= CtrlPCInc=0                                           Premise(F271)
	S137= PC[Out]=addr+4                                        PC-Hold(S128,S135,S136)
	S138= CtrlICache=0                                          Premise(F273)
	S139= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S130,S138)
	S140= CtrlHi=0                                              Premise(F283)
	S141= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S132,S140)
	S142= CtrlLo=0                                              Premise(F284)
	S143= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S134,S142)

WB	S144= CtrlPC=0                                              Premise(F302)
	S145= CtrlPCInc=0                                           Premise(F303)
	S146= PC[Out]=addr+4                                        PC-Hold(S137,S144,S145)
	S147= CtrlICache=0                                          Premise(F305)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S139,S147)
	S149= CtrlHi=0                                              Premise(F315)
	S150= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S141,S149)
	S151= CtrlLo=0                                              Premise(F316)
	S152= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S143,S151)

POST	S146= PC[Out]=addr+4                                        PC-Hold(S137,S144,S145)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S139,S147)
	S150= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S141,S149)
	S152= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S143,S151)

