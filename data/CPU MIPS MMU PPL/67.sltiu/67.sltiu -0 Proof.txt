
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={11,rS,rT,imm}                         Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= IMMU.Addr=>IAddrReg.In                                  Premise(F69)
	S7= PC.Out=>IMMU.IEA                                        Premise(F74)
	S8= IMMU.IEA=addr                                           Path(S5,S7)
	S9= CP0.ASID=>IMMU.PID                                      Premise(F75)
	S10= IMMU.PID=pid                                           Path(S4,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S8)
	S12= IAddrReg.In={pid,addr}                                 Path(S11,S6)
	S13= CtrlGPR=0                                              Premise(F134)
	S14= GPR[rS]=a                                              GPR-Hold(S3,S13)
	S15= CtrlIAddrReg=1                                         Premise(F135)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S15)
	S17= CtrlPC=0                                               Premise(F136)
	S18= CtrlPCInc=0                                            Premise(F137)
	S19= PC[Out]=addr                                           PC-Hold(S1,S17,S18)
	S20= CtrlIMem=0                                             Premise(F138)
	S21= IMem[{pid,addr}]={11,rS,rT,imm}                        IMem-Hold(S2,S20)

IMMU	S22= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S23= PC.Out=addr                                            PC-Out(S19)
	S24= PC.Out=>ICache.IEA                                     Premise(F211)
	S25= ICache.IEA=addr                                        Path(S23,S24)
	S26= IMem.MEM8WordOut=>ICache.WData                         Premise(F213)
	S27= IAddrReg.Out=>IMem.RAddr                               Premise(F217)
	S28= IMem.RAddr={pid,addr}                                  Path(S22,S27)
	S29= IMem.Out={11,rS,rT,imm}                                IMem-Read(S28,S21)
	S30= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S28,S21)
	S31= ICache.WData=IMemGet8Word({pid,addr})                  Path(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F220)
	S33= IRMux.MemData={11,rS,rT,imm}                           Path(S29,S32)
	S34= IRMux.Out={11,rS,rT,imm}                               IRMux-Select2(S33)
	S35= IRMux.Out=>IR_ID.In                                    Premise(F226)
	S36= IR_ID.In={11,rS,rT,imm}                                Path(S34,S35)
	S37= CtrlICache=1                                           Premise(F266)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S31,S37)
	S39= CtrlIR_ID=1                                            Premise(F271)
	S40= [IR_ID]={11,rS,rT,imm}                                 IR_ID-Write(S36,S39)
	S41= CtrlGPR=0                                              Premise(F275)
	S42= GPR[rS]=a                                              GPR-Hold(S14,S41)
	S43= CtrlPC=0                                               Premise(F277)
	S44= CtrlPCInc=1                                            Premise(F278)
	S45= PC[Out]=addr+4                                         PC-Inc(S19,S43,S44)

ID	S46= IR_ID.Out={11,rS,rT,imm}                               IR-Out(S40)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S40)
	S48= IR_ID.Out15_0=imm                                      IR-Out(S40)
	S49= FU.OutID1=>A_EX.In                                     Premise(F293)
	S50= LIMMEXT.Out=>B_EX.In                                   Premise(F295)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F342)
	S52= IR_ID.Out25_21=>GPR.RReg1                              Premise(F349)
	S53= GPR.RReg1=rS                                           Path(S47,S52)
	S54= GPR.Rdata1=a                                           GPR-Read(S53,S42)
	S55= FU.InID1=a                                             Path(S54,S51)
	S56= FU.OutID1=FU(a)                                        FU-Forward(S55)
	S57= A_EX.In=FU(a)                                          Path(S56,S49)
	S58= IR_ID.Out=>IR_EX.In                                    Premise(F366)
	S59= IR_EX.In={11,rS,rT,imm}                                Path(S46,S58)
	S60= IR_ID.Out15_0=>LIMMEXT.In                              Premise(F373)
	S61= LIMMEXT.In=imm                                         Path(S48,S60)
	S62= LIMMEXT.Out={16{0},imm}                                LIMMEXT(S61)
	S63= B_EX.In={16{0},imm}                                    Path(S62,S50)
	S64= CtrlA_EX=1                                             Premise(F398)
	S65= [A_EX]=FU(a)                                           A_EX-Write(S57,S64)
	S66= CtrlB_EX=1                                             Premise(F399)
	S67= [B_EX]={16{0},imm}                                     B_EX-Write(S63,S66)
	S68= CtrlICache=0                                           Premise(F408)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S68)
	S70= CtrlIR_EX=1                                            Premise(F412)
	S71= [IR_EX]={11,rS,rT,imm}                                 IR_EX-Write(S59,S70)
	S72= CtrlPC=0                                               Premise(F419)
	S73= CtrlPCInc=0                                            Premise(F420)
	S74= PC[Out]=addr+4                                         PC-Hold(S45,S72,S73)

EX	S75= A_EX.Out=FU(a)                                         A_EX-Out(S65)
	S76= B_EX.Out={16{0},imm}                                   B_EX-Out(S67)
	S77= IR_EX.Out={11,rS,rT,imm}                               IR_EX-Out(S71)
	S78= A_EX.Out=>ALU.A                                        Premise(F428)
	S79= ALU.A=FU(a)                                            Path(S75,S78)
	S80= B_EX.Out=>ALU.B                                        Premise(F429)
	S81= ALU.B={16{0},imm}                                      Path(S76,S80)
	S82= ALU.Out={31{0},(FU(a)<u{16{0},imm})}                   ALU(S79,S81)
	S83= ALU.Out=>ALUOut_MEM.In                                 Premise(F433)
	S84= ALUOut_MEM.In={31{0},(FU(a)<u{16{0},imm})}             Path(S82,S83)
	S85= IR_EX.Out=>IR_MEM.In                                   Premise(F512)
	S86= IR_MEM.In={11,rS,rT,imm}                               Path(S77,S85)
	S87= CtrlALUOut_MEM=1                                       Premise(F542)
	S88= [ALUOut_MEM]={31{0},(FU(a)<u{16{0},imm})}              ALUOut_MEM-Write(S84,S87)
	S89= CtrlICache=0                                           Premise(F550)
	S90= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S69,S89)
	S91= CtrlIR_MEM=1                                           Premise(F557)
	S92= [IR_MEM]={11,rS,rT,imm}                                IR_MEM-Write(S86,S91)
	S93= CtrlPC=0                                               Premise(F561)
	S94= CtrlPCInc=0                                            Premise(F562)
	S95= PC[Out]=addr+4                                         PC-Hold(S74,S93,S94)

MEM	S96= ALUOut_MEM.Out={31{0},(FU(a)<u{16{0},imm})}            ALUOut_MEM-Out(S88)
	S97= IR_MEM.Out={11,rS,rT,imm}                              IR_MEM-Out(S92)
	S98= ALUOut_MEM.Out=>ALUOut_DMMU1.In                        Premise(F572)
	S99= ALUOut_DMMU1.In={31{0},(FU(a)<u{16{0},imm})}           Path(S96,S98)
	S100= IR_MEM.Out=>IR_DMMU1.In                               Premise(F647)
	S101= IR_DMMU1.In={11,rS,rT,imm}                            Path(S97,S100)
	S102= CtrlALUOut_DMMU1=1                                    Premise(F684)
	S103= [ALUOut_DMMU1]={31{0},(FU(a)<u{16{0},imm})}           ALUOut_DMMU1-Write(S99,S102)
	S104= CtrlICache=0                                          Premise(F691)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S90,S104)
	S106= CtrlIR_DMMU1=1                                        Premise(F693)
	S107= [IR_DMMU1]={11,rS,rT,imm}                             IR_DMMU1-Write(S101,S106)
	S108= CtrlPC=0                                              Premise(F702)
	S109= CtrlPCInc=0                                           Premise(F703)
	S110= PC[Out]=addr+4                                        PC-Hold(S95,S108,S109)

DMMU1	S111= ALUOut_DMMU1.Out={31{0},(FU(a)<u{16{0},imm})}         ALUOut_DMMU1-Out(S103)
	S112= IR_DMMU1.Out={11,rS,rT,imm}                           IR_DMMU1-Out(S107)
	S113= ALUOut_DMMU1.Out=>ALUOut_DMMU2.In                     Premise(F714)
	S114= ALUOut_DMMU2.In={31{0},(FU(a)<u{16{0},imm})}          Path(S111,S113)
	S115= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F789)
	S116= IR_DMMU2.In={11,rS,rT,imm}                            Path(S112,S115)
	S117= CtrlALUOut_DMMU2=1                                    Premise(F826)
	S118= [ALUOut_DMMU2]={31{0},(FU(a)<u{16{0},imm})}           ALUOut_DMMU2-Write(S114,S117)
	S119= CtrlICache=0                                          Premise(F832)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S105,S119)
	S121= CtrlIR_DMMU2=1                                        Premise(F835)
	S122= [IR_DMMU2]={11,rS,rT,imm}                             IR_DMMU2-Write(S116,S121)
	S123= CtrlPC=0                                              Premise(F843)
	S124= CtrlPCInc=0                                           Premise(F844)
	S125= PC[Out]=addr+4                                        PC-Hold(S110,S123,S124)

DMMU2	S126= ALUOut_DMMU2.Out={31{0},(FU(a)<u{16{0},imm})}         ALUOut_DMMU2-Out(S118)
	S127= IR_DMMU2.Out={11,rS,rT,imm}                           IR_DMMU2-Out(S122)
	S128= ALUOut_DMMU2.Out=>ALUOut_WB.In                        Premise(F857)
	S129= ALUOut_WB.In={31{0},(FU(a)<u{16{0},imm})}             Path(S126,S128)
	S130= IR_DMMU2.Out=>IR_WB.In                                Premise(F936)
	S131= IR_WB.In={11,rS,rT,imm}                               Path(S127,S130)
	S132= CtrlALUOut_WB=1                                       Premise(F968)
	S133= [ALUOut_WB]={31{0},(FU(a)<u{16{0},imm})}              ALUOut_WB-Write(S129,S132)
	S134= CtrlICache=0                                          Premise(F973)
	S135= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S134)
	S136= CtrlIR_WB=1                                           Premise(F981)
	S137= [IR_WB]={11,rS,rT,imm}                                IR_WB-Write(S131,S136)
	S138= CtrlPC=0                                              Premise(F984)
	S139= CtrlPCInc=0                                           Premise(F985)
	S140= PC[Out]=addr+4                                        PC-Hold(S125,S138,S139)

WB	S141= ALUOut_WB.Out={31{0},(FU(a)<u{16{0},imm})}            ALUOut_WB-Out(S133)
	S142= IR_WB.Out20_16=rT                                     IR-Out(S137)
	S143= ALUOut_WB.Out=>GPR.WData                              Premise(F1056)
	S144= GPR.WData={31{0},(FU(a)<u{16{0},imm})}                Path(S141,S143)
	S145= IR_WB.Out20_16=>GPR.WReg                              Premise(F1057)
	S146= GPR.WReg=rT                                           Path(S142,S145)
	S147= CtrlICache=0                                          Premise(F1114)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S135,S147)
	S149= CtrlGPR=1                                             Premise(F1123)
	S150= GPR[rT]={31{0},(FU(a)<u{16{0},imm})}                  GPR-Write(S146,S144,S149)
	S151= CtrlPC=0                                              Premise(F1125)
	S152= CtrlPCInc=0                                           Premise(F1126)
	S153= PC[Out]=addr+4                                        PC-Hold(S140,S151,S152)

POST	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S135,S147)
	S150= GPR[rT]={31{0},(FU(a)<u{16{0},imm})}                  GPR-Write(S146,S144,S149)
	S153= PC[Out]=addr+4                                        PC-Hold(S140,S151,S152)

