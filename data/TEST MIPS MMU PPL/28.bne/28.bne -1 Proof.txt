
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F51)
	S20= GPR[rT]=b                                              Premise(F52)

IF(IMMU)	S21= PC.Out=addr                                            PC-Out(S14)
	S22= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F56)
	S24= IMem.RAddr={pid,addr}                                  Path(S22,S23)
	S25= IMem.Out={5,rS,rT,offset}                              IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F57)
	S28= IRMux.MemData={5,rS,rT,offset}                         Path(S25,S27)
	S29= IRMux.Out={5,rS,rT,offset}                             IRMux-Select2(S28)
	S30= IRMux.Out=>IR_ID.In                                    Premise(F61)
	S31= IR_ID.In={5,rS,rT,offset}                              Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F62)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= PC.Out=>ICache.IEA                                     Premise(F63)
	S35= ICache.IEA=addr                                        Path(S21,S34)
	S36= CtrlPC=0                                               Premise(F71)
	S37= CtrlPCInc=1                                            Premise(F72)
	S38= PC[CIA]=addr                                           PC-Inc(S14,S36,S37)
	S39= CtrlICache=1                                           Premise(F74)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S35,S33,S39)
	S41= CtrlIR_ID=1                                            Premise(F77)
	S42= [IR_ID]={5,rS,rT,offset}                               IR_ID-Write(S31,S41)
	S43= CtrlGPR=0                                              Premise(F80)
	S44= GPR[rS]=a                                              GPR-Hold(S19,S43)
	S45= GPR[rT]=b                                              GPR-Hold(S20,S43)

ID	S46= IR_ID.Out={5,rS,rT,offset}                             IR-Out(S42)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S42)
	S48= IR_ID.Out20_16=rT                                      IR-Out(S42)
	S49= IR_ID.Out25_21=>GPR.RReg1                              Premise(F102)
	S50= GPR.RReg1=rS                                           Path(S47,S49)
	S51= GPR.Rdata1=a                                           GPR-Read(S50,S44)
	S52= IR_ID.Out20_16=>GPR.RReg2                              Premise(F103)
	S53= GPR.RReg2=rT                                           Path(S48,S52)
	S54= GPR.Rdata2=b                                           GPR-Read(S53,S45)
	S55= GPR.Rdata1=>FU.InID1                                   Premise(F104)
	S56= FU.InID1=a                                             Path(S51,S55)
	S57= FU.OutID1=FU(a)                                        FU-Forward(S56)
	S58= FU.OutID1=>A_EX.In                                     Premise(F106)
	S59= A_EX.In=FU(a)                                          Path(S57,S58)
	S60= GPR.Rdata2=>FU.InID2                                   Premise(F107)
	S61= FU.InID2=b                                             Path(S54,S60)
	S62= FU.OutID2=FU(b)                                        FU-Forward(S61)
	S63= FU.OutID2=>B_EX.In                                     Premise(F109)
	S64= B_EX.In=FU(b)                                          Path(S62,S63)
	S65= IR_ID.Out=>IR_EX.In                                    Premise(F110)
	S66= IR_EX.In={5,rS,rT,offset}                              Path(S46,S65)
	S67= CtrlPCInc=0                                            Premise(F119)
	S68= PC[CIA]=addr                                           PC-Hold(S38,S67)
	S69= CtrlICache=0                                           Premise(F121)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S69)
	S71= CtrlA_EX=1                                             Premise(F128)
	S72= [A_EX]=FU(a)                                           A_EX-Write(S59,S71)
	S73= CtrlB_EX=1                                             Premise(F129)
	S74= [B_EX]=FU(b)                                           B_EX-Write(S64,S73)
	S75= CtrlIR_EX=1                                            Premise(F130)
	S76= [IR_EX]={5,rS,rT,offset}                               IR_EX-Write(S66,S75)

EX	S77= PC.CIA=addr                                            PC-Out(S68)
	S78= A_EX.Out=FU(a)                                         A_EX-Out(S72)
	S79= B_EX.Out=FU(b)                                         B_EX-Out(S74)
	S80= IR_EX.Out15_0=offset                                   IR_EX-Out(S76)
	S81= IR_EX.Out15_0=>SEXT.In                                 Premise(F149)
	S82= SEXT.In=offset                                         Path(S80,S81)
	S83= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S82)
	S84= PC.CIA=>ALU.A                                          Premise(F150)
	S85= ALU.A=addr                                             Path(S77,S84)
	S86= SEXT.Out=>ALU.B                                        Premise(F151)
	S87= ALU.B={14{offset[15]},offset,2{0}}                     Path(S83,S86)
	S88= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S85,S87)
	S89= ALU.Out=>ALUOut_MEM.In                                 Premise(F153)
	S90= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S88,S89)
	S91= A_EX.Out=>CMPU.A                                       Premise(F154)
	S92= CMPU.A=FU(a)                                           Path(S78,S91)
	S93= B_EX.Out=>CMPU.B                                       Premise(F155)
	S94= CMPU.B=FU(b)                                           Path(S79,S93)
	S95= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S92,S94)
	S96= CMPU.zero=>ConditionReg_MEM.In                         Premise(F157)
	S97= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S95,S96)
	S98= CtrlICache=0                                           Premise(F168)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S98)
	S100= CtrlALUOut_MEM=1                                      Premise(F178)
	S101= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}        ALUOut_MEM-Write(S90,S100)
	S102= CtrlConditionReg_MEM=1                                Premise(F179)
	S103= [ConditionReg_MEM]=CompareS(FU(a),FU(b))              ConditionReg_MEM-Write(S97,S102)

MEM	S104= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}      ALUOut_MEM-Out(S101)
	S105= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))            ConditionReg_MEM-Out(S103)
	S106= ALUOut_MEM.Out=>PC.In                                 Premise(F198)
	S107= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S104,S106)
	S108= ConditionReg_MEM.Out=>ConditionReg_WB.In              Premise(F206)
	S109= ConditionReg_WB.In=CompareS(FU(a),FU(b))              Path(S105,S108)
	S110= CtrlPC=1                                              Premise(F215)
	S111= CtrlPCInc=0                                           Premise(F216)
	S112= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S107,S110,S111)
	S113= CtrlICache=0                                          Premise(F218)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S113)
	S115= CtrlConditionReg_WB=1                                 Premise(F239)
	S116= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Write(S109,S115)

WB	S117= CtrlPC=0                                              Premise(F331)
	S118= CtrlPCInc=0                                           Premise(F332)
	S119= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S117,S118)
	S120= CtrlICache=0                                          Premise(F334)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S120)
	S122= CtrlConditionReg_WB=0                                 Premise(F355)
	S123= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S116,S122)

POST	S119= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S117,S118)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S120)
	S123= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S116,S122)

