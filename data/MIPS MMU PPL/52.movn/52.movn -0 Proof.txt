
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,11}                      Premise(F2)
	S3= GPR[rT]=b                                               Premise(F4)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F26)
	S14= CtrlPCInc=0                                            Premise(F27)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F28)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F33)
	S19= IMem[{pid,addr}]={0,rS,rT,rD,0,11}                     IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F35)
	S21= GPR[rT]=b                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F56)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,rS,rT,rD,0,11}                             IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F57)
	S29= IRMux.MemData={0,rS,rT,rD,0,11}                        Path(S26,S28)
	S30= IRMux.Out={0,rS,rT,rD,0,11}                            IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F61)
	S32= IR_ID.In={0,rS,rT,rD,0,11}                             Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F62)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F63)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F71)
	S38= CtrlPCInc=1                                            Premise(F72)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F74)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F77)
	S43= [IR_ID]={0,rS,rT,rD,0,11}                              IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F80)
	S45= GPR[rT]=b                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out20_16=rT                                      IR-Out(S43)
	S47= IR_ID.Out20_16=>GPR.RReg2                              Premise(F103)
	S48= GPR.RReg2=rT                                           Path(S46,S47)
	S49= GPR.Rdata2=b                                           GPR-Read(S48,S45)
	S50= GPR.Rdata2=>FU.InID2                                   Premise(F108)
	S51= FU.InID2=b                                             Path(S49,S50)
	S52= FU.OutID2=FU(b)                                        FU-Forward(S51)
	S53= FU.OutID2=>B_EX.In                                     Premise(F110)
	S54= B_EX.In=FU(b)                                          Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F119)
	S56= CtrlPCInc=0                                            Premise(F120)
	S57= PC[Out]=addr+4                                         PC-Hold(S39,S55,S56)
	S58= CtrlICache=0                                           Premise(F122)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S58)
	S60= CtrlB_EX=1                                             Premise(F130)
	S61= [B_EX]=FU(b)                                           B_EX-Write(S54,S60)

EX	S62= B_EX.Out=FU(b)                                         B_EX-Out(S61)
	S63= CMPU.A=32'b0                                           Premise(F151)
	S64= B_EX.Out=>CMPU.B                                       Premise(F152)
	S65= CMPU.B=FU(b)                                           Path(S62,S64)
	S66= CMPU.zero=CompareS(32'b0,FU(b))                        CMPU-CMPS(S63,S65)
	S67= CMPU.zero=>ConditionReg_MEM.In                         Premise(F154)
	S68= ConditionReg_MEM.In=CompareS(32'b0,FU(b))              Path(S66,S67)
	S69= CtrlPC=0                                               Premise(F163)
	S70= CtrlPCInc=0                                            Premise(F164)
	S71= PC[Out]=addr+4                                         PC-Hold(S57,S69,S70)
	S72= CtrlICache=0                                           Premise(F166)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S72)
	S74= CtrlConditionReg_MEM=1                                 Premise(F176)
	S75= [ConditionReg_MEM]=CompareS(32'b0,FU(b))               ConditionReg_MEM-Write(S68,S74)

MEM	S76= ConditionReg_MEM.Out=CompareS(32'b0,FU(b))             ConditionReg_MEM-Out(S75)
	S77= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F202)
	S78= ConditionReg_DMMU1.In=CompareS(32'b0,FU(b))            Path(S76,S77)
	S79= CtrlPC=0                                               Premise(F212)
	S80= CtrlPCInc=0                                            Premise(F213)
	S81= PC[Out]=addr+4                                         PC-Hold(S71,S79,S80)
	S82= CtrlICache=0                                           Premise(F215)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S82)
	S84= CtrlConditionReg_DMMU1=1                               Premise(F234)
	S85= [ConditionReg_DMMU1]=CompareS(32'b0,FU(b))             ConditionReg_DMMU1-Write(S78,S84)

MEM(DMMU1)	S86= ConditionReg_DMMU1.Out=CompareS(32'b0,FU(b))           ConditionReg_DMMU1-Out(S85)
	S87= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In          Premise(F249)
	S88= ConditionReg_DMMU2.In=CompareS(32'b0,FU(b))            Path(S86,S87)
	S89= CtrlPC=0                                               Premise(F256)
	S90= CtrlPCInc=0                                            Premise(F257)
	S91= PC[Out]=addr+4                                         PC-Hold(S81,S89,S90)
	S92= CtrlICache=0                                           Premise(F259)
	S93= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S83,S92)
	S94= CtrlConditionReg_DMMU2=1                               Premise(F282)
	S95= [ConditionReg_DMMU2]=CompareS(32'b0,FU(b))             ConditionReg_DMMU2-Write(S88,S94)

MEM(DMMU2)	S96= ConditionReg_DMMU2.Out=CompareS(32'b0,FU(b))           ConditionReg_DMMU2-Out(S95)
	S97= ConditionReg_DMMU2.Out=>ConditionReg_WB.In             Premise(F290)
	S98= ConditionReg_WB.In=CompareS(32'b0,FU(b))               Path(S96,S97)
	S99= CtrlPC=0                                               Premise(F297)
	S100= CtrlPCInc=0                                           Premise(F298)
	S101= PC[Out]=addr+4                                        PC-Hold(S91,S99,S100)
	S102= CtrlICache=0                                          Premise(F300)
	S103= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S93,S102)
	S104= CtrlConditionReg_WB=1                                 Premise(F320)
	S105= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Write(S98,S104)

WB	S106= CtrlPC=0                                              Premise(F337)
	S107= CtrlPCInc=0                                           Premise(F338)
	S108= PC[Out]=addr+4                                        PC-Hold(S101,S106,S107)
	S109= CtrlICache=0                                          Premise(F340)
	S110= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S109)
	S111= CtrlConditionReg_WB=0                                 Premise(F360)
	S112= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S105,S111)

POST	S108= PC[Out]=addr+4                                        PC-Hold(S101,S106,S107)
	S110= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S109)
	S112= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S105,S111)

