
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rT,rD,0,2}                      Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={28,rS,rT,rD,0,2}                     IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F46)
	S20= GPR[rT]=b                                              Premise(F47)

IF(IMMU)	S21= PC.Out=addr                                            PC-Out(S14)
	S22= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F51)
	S24= IMem.RAddr={pid,addr}                                  Path(S22,S23)
	S25= IMem.Out={28,rS,rT,rD,0,2}                             IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F52)
	S28= IRMux.MemData={28,rS,rT,rD,0,2}                        Path(S25,S27)
	S29= IRMux.Out={28,rS,rT,rD,0,2}                            IRMux-Select2(S28)
	S30= IRMux.Out=>IR_ID.In                                    Premise(F56)
	S31= IR_ID.In={28,rS,rT,rD,0,2}                             Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F57)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= PC.Out=>ICache.IEA                                     Premise(F58)
	S35= ICache.IEA=addr                                        Path(S21,S34)
	S36= CtrlPC=0                                               Premise(F66)
	S37= CtrlPCInc=1                                            Premise(F67)
	S38= PC[Out]=addr+4                                         PC-Inc(S14,S36,S37)
	S39= CtrlICache=1                                           Premise(F69)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S35,S33,S39)
	S41= CtrlIR_ID=1                                            Premise(F72)
	S42= [IR_ID]={28,rS,rT,rD,0,2}                              IR_ID-Write(S31,S41)
	S43= CtrlGPR=0                                              Premise(F75)
	S44= GPR[rS]=a                                              GPR-Hold(S19,S43)
	S45= GPR[rT]=b                                              GPR-Hold(S20,S43)

ID	S46= IR_ID.Out={28,rS,rT,rD,0,2}                            IR-Out(S42)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S42)
	S48= IR_ID.Out20_16=rT                                      IR-Out(S42)
	S49= IR_ID.Out25_21=>GPR.RReg1                              Premise(F92)
	S50= GPR.RReg1=rS                                           Path(S47,S49)
	S51= GPR.Rdata1=a                                           GPR-Read(S50,S44)
	S52= IR_ID.Out20_16=>GPR.RReg2                              Premise(F93)
	S53= GPR.RReg2=rT                                           Path(S48,S52)
	S54= GPR.Rdata2=b                                           GPR-Read(S53,S45)
	S55= GPR.Rdata1=>FU.InID1                                   Premise(F95)
	S56= FU.InID1=a                                             Path(S51,S55)
	S57= FU.OutID1=FU(a)                                        FU-Forward(S56)
	S58= FU.OutID1=>A_EX.In                                     Premise(F97)
	S59= A_EX.In=FU(a)                                          Path(S57,S58)
	S60= GPR.Rdata2=>FU.InID2                                   Premise(F98)
	S61= FU.InID2=b                                             Path(S54,S60)
	S62= FU.OutID2=FU(b)                                        FU-Forward(S61)
	S63= FU.OutID2=>B_EX.In                                     Premise(F100)
	S64= B_EX.In=FU(b)                                          Path(S62,S63)
	S65= IR_ID.Out=>IR_EX.In                                    Premise(F101)
	S66= IR_EX.In={28,rS,rT,rD,0,2}                             Path(S46,S65)
	S67= CtrlPC=0                                               Premise(F109)
	S68= CtrlPCInc=0                                            Premise(F110)
	S69= PC[Out]=addr+4                                         PC-Hold(S38,S67,S68)
	S70= CtrlICache=0                                           Premise(F112)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S70)
	S72= CtrlA_EX=1                                             Premise(F119)
	S73= [A_EX]=FU(a)                                           A_EX-Write(S59,S72)
	S74= CtrlB_EX=1                                             Premise(F120)
	S75= [B_EX]=FU(b)                                           B_EX-Write(S64,S74)
	S76= CtrlIR_EX=1                                            Premise(F121)
	S77= [IR_EX]={28,rS,rT,rD,0,2}                              IR_EX-Write(S66,S76)

EX	S78= A_EX.Out=FU(a)                                         A_EX-Out(S73)
	S79= B_EX.Out=FU(b)                                         B_EX-Out(S75)
	S80= IR_EX.Out={28,rS,rT,rD,0,2}                            IR_EX-Out(S77)
	S81= A_EX.Out=>MDU.A                                        Premise(F136)
	S82= MDU.A=FU(a)                                            Path(S78,S81)
	S83= B_EX.Out=>MDU.B                                        Premise(F137)
	S84= MDU.B=FU(b)                                            Path(S79,S83)
	S85= MDU.lo=(FU(a)×FU(b))[31:0]                             MDU(S82,S84)
	S86= MDU.lo=>Lo.In                                          Premise(F139)
	S87= Lo.In=(FU(a)×FU(b))[31:0]                              Path(S85,S86)
	S88= IR_EX.Out=>IR_MEM.In                                   Premise(F142)
	S89= IR_MEM.In={28,rS,rT,rD,0,2}                            Path(S80,S88)
	S90= CtrlPC=0                                               Premise(F148)
	S91= CtrlPCInc=0                                            Premise(F149)
	S92= PC[Out]=addr+4                                         PC-Hold(S69,S90,S91)
	S93= CtrlICache=0                                           Premise(F151)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S93)
	S95= CtrlLo=1                                               Premise(F161)
	S96= [Lo]=(FU(a)×FU(b))[31:0]                               Lo-Write(S87,S95)
	S97= CtrlIR_MEM=1                                           Premise(F162)
	S98= [IR_MEM]={28,rS,rT,rD,0,2}                             IR_MEM-Write(S89,S97)

MEM	S99= IR_MEM.Out={28,rS,rT,rD,0,2}                           IR_MEM-Out(S98)
	S100= IR_MEM.Out=>IR_WB.In                                  Premise(F178)
	S101= IR_WB.In={28,rS,rT,rD,0,2}                            Path(S99,S100)
	S102= CtrlPC=0                                              Premise(F189)
	S103= CtrlPCInc=0                                           Premise(F190)
	S104= PC[Out]=addr+4                                        PC-Hold(S92,S102,S103)
	S105= CtrlICache=0                                          Premise(F192)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S105)
	S107= CtrlLo=0                                              Premise(F202)
	S108= [Lo]=(FU(a)×FU(b))[31:0]                              Lo-Hold(S96,S107)
	S109= CtrlIR_WB=1                                           Premise(F205)
	S110= [IR_WB]={28,rS,rT,rD,0,2}                             IR_WB-Write(S101,S109)

WB	S111= Lo.Out=(FU(a)×FU(b))[31:0]                            Lo-Out(S108)
	S112= IR_WB.Out15_11=rD                                     IR-Out(S110)
	S113= Lo.Out=>GPR.WData                                     Premise(F285)
	S114= GPR.WData=(FU(a)×FU(b))[31:0]                         Path(S111,S113)
	S115= IR_WB.Out15_11=>GPR.WReg                              Premise(F288)
	S116= GPR.WReg=rD                                           Path(S112,S115)
	S117= CtrlPC=0                                              Premise(F294)
	S118= CtrlPCInc=0                                           Premise(F295)
	S119= PC[Out]=addr+4                                        PC-Hold(S104,S117,S118)
	S120= CtrlICache=0                                          Premise(F297)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S120)
	S122= CtrlGPR=1                                             Premise(F303)
	S123= GPR[rD]=(FU(a)×FU(b))[31:0]                           GPR-Write(S116,S114,S122)

POST	S119= PC[Out]=addr+4                                        PC-Hold(S104,S117,S118)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S120)
	S123= GPR[rD]=(FU(a)×FU(b))[31:0]                           GPR-Write(S116,S114,S122)

