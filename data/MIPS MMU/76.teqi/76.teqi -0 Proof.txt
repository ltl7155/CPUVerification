
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,12,imm}                          Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlCP0=0                                              Premise(F13)
	S14= CP0[ASID]=pid                                          CP0-Hold(S0,S13)
	S15= CtrlPC=0                                               Premise(F17)
	S16= CtrlPCInc=0                                            Premise(F18)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F19)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S18)
	S20= CtrlIMem=0                                             Premise(F23)
	S21= IMem[{pid,addr}]={1,rs,12,imm}                         IMem-Hold(S2,S20)
	S22= CtrlGPR=0                                              Premise(F25)
	S23= GPR[rs]=a                                              GPR-Hold(S3,S22)

IF(IMMU)	S24= PC.Out=addr                                            PC-Out(S17)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F32)
	S27= IMem.RAddr={pid,addr}                                  Path(S25,S26)
	S28= IMem.Out={1,rs,12,imm}                                 IMem-Read(S27,S21)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S21)
	S30= IMem.Out=>IRMux.MemData                                Premise(F33)
	S31= IRMux.MemData={1,rs,12,imm}                            Path(S28,S30)
	S32= IRMux.Out={1,rs,12,imm}                                IRMux-Select2(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F37)
	S34= IR.In={1,rs,12,imm}                                    Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F38)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= PC.Out=>ICache.IEA                                     Premise(F39)
	S38= ICache.IEA=addr                                        Path(S24,S37)
	S39= CtrlCP0=0                                              Premise(F41)
	S40= CP0[ASID]=pid                                          CP0-Hold(S14,S39)
	S41= CtrlPC=0                                               Premise(F45)
	S42= CtrlPCInc=1                                            Premise(F46)
	S43= PC[Out]=addr+4                                         PC-Inc(S17,S41,S42)
	S44= CtrlICache=1                                           Premise(F48)
	S45= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S38,S36,S44)
	S46= CtrlIR=1                                               Premise(F49)
	S47= [IR]={1,rs,12,imm}                                     IR-Write(S34,S46)
	S48= CtrlGPR=0                                              Premise(F53)
	S49= GPR[rs]=a                                              GPR-Hold(S23,S48)

ID	S50= IR.Out25_21=rs                                         IR-Out(S47)
	S51= IR.Out15_0=imm                                         IR-Out(S47)
	S52= IR.Out25_21=>GPR.RReg1                                 Premise(F59)
	S53= GPR.RReg1=rs                                           Path(S50,S52)
	S54= GPR.Rdata1=a                                           GPR-Read(S53,S49)
	S55= IR.Out15_0=>IMMEXT.In                                  Premise(F61)
	S56= IMMEXT.In=imm                                          Path(S51,S55)
	S57= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S56)
	S58= GPR.Rdata1=>A.In                                       Premise(F62)
	S59= A.In=a                                                 Path(S54,S58)
	S60= IMMEXT.Out=>B.In                                       Premise(F63)
	S61= B.In={16{imm[15]},imm}                                 Path(S57,S60)
	S62= CtrlCP0=0                                              Premise(F65)
	S63= CP0[ASID]=pid                                          CP0-Hold(S40,S62)
	S64= CtrlPC=0                                               Premise(F69)
	S65= CtrlPCInc=0                                            Premise(F70)
	S66= PC[Out]=addr+4                                         PC-Hold(S43,S64,S65)
	S67= CtrlICache=0                                           Premise(F72)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S45,S67)
	S69= CtrlA=1                                                Premise(F78)
	S70= [A]=a                                                  A-Write(S59,S69)
	S71= CtrlB=1                                                Premise(F79)
	S72= [B]={16{imm[15]},imm}                                  B-Write(S61,S71)

EX	S73= A.Out=a                                                A-Out(S70)
	S74= B.Out={16{imm[15]},imm}                                B-Out(S72)
	S75= A.Out=>CMPU.A                                          Premise(F82)
	S76= CMPU.A=a                                               Path(S73,S75)
	S77= B.Out=>CMPU.B                                          Premise(F83)
	S78= CMPU.B={16{imm[15]},imm}                               Path(S74,S77)
	S79= CMPU.zero=CompareS(a,{16{imm[15]},imm})                CMPU-CMPS(S76,S78)
	S80= CMPU.zero=>ConditionReg.In                             Premise(F85)
	S81= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S79,S80)
	S82= CtrlCP0=0                                              Premise(F87)
	S83= CP0[ASID]=pid                                          CP0-Hold(S63,S82)
	S84= CtrlPC=0                                               Premise(F91)
	S85= CtrlPCInc=0                                            Premise(F92)
	S86= PC[Out]=addr+4                                         PC-Hold(S66,S84,S85)
	S87= CtrlICache=0                                           Premise(F94)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S68,S87)
	S89= CtrlConditionReg=1                                     Premise(F102)
	S90= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S81,S89)

MEM	S91= CP0.ASID=pid                                           CP0-Read-ASID(S83)
	S92= PC.Out=addr+4                                          PC-Out(S86)
	S93= PC.Out=>CP0.EPCIn                                      Premise(F104)
	S94= CP0.EPCIn=addr+4                                       Path(S92,S93)
	S95= CP0.ExCodeIn=5'h0d                                     Premise(F105)
	S96= CP0.ASID=>PIDReg.In                                    Premise(F107)
	S97= PIDReg.In=pid                                          Path(S91,S96)
	S98= CtrlEPCIn=1                                            Premise(F111)
	S99= CP0[EPC]=addr+4                                        CP0-Write-EPC(S94,S98)
	S100= CtrlExCodeIn=1                                        Premise(F112)
	S101= CP0[ExCode]=5'h0d                                     CP0-Write-ExCode(S95,S100)
	S102= CtrlICache=0                                          Premise(F117)
	S103= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S88,S102)
	S104= CtrlConditionReg=0                                    Premise(F125)
	S105= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S90,S104)
	S106= CtrlPIDReg=1                                          Premise(F126)
	S107= [PIDReg]=pid                                          PIDReg-Write(S97,S106)

MEM(DMMU1)	S108= CtrlCP0=0                                             Premise(F128)
	S109= CP0[EPC]=addr+4                                       CP0-Hold(S99,S108)
	S110= CP0[ExCode]=5'h0d                                     CP0-Hold(S101,S108)
	S111= CtrlICache=0                                          Premise(F135)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S111)
	S113= CtrlConditionReg=0                                    Premise(F143)
	S114= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S105,S113)
	S115= CtrlPIDReg=0                                          Premise(F144)
	S116= [PIDReg]=pid                                          PIDReg-Hold(S107,S115)

MEM(DMMU2)	S117= CtrlCP0=0                                             Premise(F146)
	S118= CP0[EPC]=addr+4                                       CP0-Hold(S109,S117)
	S119= CP0[ExCode]=5'h0d                                     CP0-Hold(S110,S117)
	S120= CtrlICache=0                                          Premise(F153)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S120)
	S122= CtrlConditionReg=0                                    Premise(F161)
	S123= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S114,S122)
	S124= CtrlPIDReg=0                                          Premise(F162)
	S125= [PIDReg]=pid                                          PIDReg-Hold(S116,S124)

WB	S126= CtrlCP0=0                                             Premise(F164)
	S127= CP0[EPC]=addr+4                                       CP0-Hold(S118,S126)
	S128= CP0[ExCode]=5'h0d                                     CP0-Hold(S119,S126)
	S129= CtrlICache=0                                          Premise(F171)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S129)
	S131= CtrlConditionReg=0                                    Premise(F179)
	S132= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S123,S131)
	S133= CtrlPIDReg=0                                          Premise(F180)
	S134= [PIDReg]=pid                                          PIDReg-Hold(S125,S133)

POST	S127= CP0[EPC]=addr+4                                       CP0-Hold(S118,S126)
	S128= CP0[ExCode]=5'h0d                                     CP0-Hold(S119,S126)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S129)
	S132= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S123,S131)
	S134= [PIDReg]=pid                                          PIDReg-Hold(S125,S133)

