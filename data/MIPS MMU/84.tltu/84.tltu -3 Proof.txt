
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={0,rs,rt,code,51}                          Premise(F3)
	S2= GPR[rs]=a                                               Premise(F4)
	S3= GPR[rt]=b                                               Premise(F5)

IF	S4= PC.Out=addr                                             PC-Out(S0)
	S5= PC.Out=>ICache.IEA                                      Premise(F10)
	S6= ICache.IEA=addr                                         Path(S4,S5)
	S7= ICache.Out={0,rs,rt,code,51}                            ICache-Search(S6,S1)
	S8= ICache.Out=>IR.In                                       Premise(F11)
	S9= IR.In={0,rs,rt,code,51}                                 Path(S7,S8)
	S10= CtrlIR=1                                               Premise(F23)
	S11= [IR]={0,rs,rt,code,51}                                 IR-Write(S9,S10)
	S12= CtrlGPR=0                                              Premise(F27)
	S13= GPR[rs]=a                                              GPR-Hold(S2,S12)
	S14= GPR[rt]=b                                              GPR-Hold(S3,S12)

ID	S15= IR.Out25_21=rs                                         IR-Out(S11)
	S16= IR.Out20_16=rt                                         IR-Out(S11)
	S17= IR.Out25_21=>GPR.RReg1                                 Premise(F51)
	S18= GPR.RReg1=rs                                           Path(S15,S17)
	S19= GPR.Rdata1=a                                           GPR-Read(S18,S13)
	S20= IR.Out20_16=>GPR.RReg2                                 Premise(F52)
	S21= GPR.RReg2=rt                                           Path(S16,S20)
	S22= GPR.Rdata2=b                                           GPR-Read(S21,S14)
	S23= GPR.Rdata1=>A.In                                       Premise(F54)
	S24= A.In=a                                                 Path(S19,S23)
	S25= GPR.Rdata2=>B.In                                       Premise(F55)
	S26= B.In=b                                                 Path(S22,S25)
	S27= CtrlA=1                                                Premise(F70)
	S28= [A]=a                                                  A-Write(S24,S27)
	S29= CtrlB=1                                                Premise(F71)
	S30= [B]=b                                                  B-Write(S26,S29)

EX	S31= A.Out=a                                                A-Out(S28)
	S32= B.Out=b                                                B-Out(S30)
	S33= A.Out=>CMPU.A                                          Premise(F74)
	S34= CMPU.A=a                                               Path(S31,S33)
	S35= B.Out=>CMPU.B                                          Premise(F75)
	S36= CMPU.B=b                                               Path(S32,S35)
	S37= CMPU.lt=CompareU(a,b)                                  CMPU-CMPU(S34,S36)
	S38= CMPU.lt=>ConditionReg.In                               Premise(F77)
	S39= ConditionReg.In=CompareU(a,b)                          Path(S37,S38)
	S40= CtrlConditionReg=1                                     Premise(F94)
	S41= [ConditionReg]=CompareU(a,b)                           ConditionReg-Write(S39,S40)

MEM	S42= CtrlConditionReg=0                                     Premise(F117)
	S43= [ConditionReg]=CompareU(a,b)                           ConditionReg-Hold(S41,S42)

MEM(DMMU1)	S44= CtrlConditionReg=0                                     Premise(F135)
	S45= [ConditionReg]=CompareU(a,b)                           ConditionReg-Hold(S43,S44)

MEM(DMMU2)	S46= CtrlConditionReg=0                                     Premise(F153)
	S47= [ConditionReg]=CompareU(a,b)                           ConditionReg-Hold(S45,S46)

WB	S48= CtrlConditionReg=0                                     Premise(F171)
	S49= [ConditionReg]=CompareU(a,b)                           ConditionReg-Hold(S47,S48)

POST	S49= [ConditionReg]=CompareU(a,b)                           ConditionReg-Hold(S47,S48)

