
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F16)
	S13= CtrlPCInc=0                                            Premise(F17)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F18)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F22)
	S18= IMem[{pid,addr}]={17,8,cc,0,1,offset}                  IMem-Hold(S2,S17)

IF(IMMU)	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= IAddrReg.Out=>IMem.RAddr                               Premise(F30)
	S22= IMem.RAddr={pid,addr}                                  Path(S20,S21)
	S23= IMem.Out={17,8,cc,0,1,offset}                          IMem-Read(S22,S18)
	S24= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S22,S18)
	S25= IMem.Out=>IRMux.MemData                                Premise(F31)
	S26= IRMux.MemData={17,8,cc,0,1,offset}                     Path(S23,S25)
	S27= IRMux.Out={17,8,cc,0,1,offset}                         IRMux-Select2(S26)
	S28= IRMux.Out=>IR.In                                       Premise(F35)
	S29= IR.In={17,8,cc,0,1,offset}                             Path(S27,S28)
	S30= IMem.MEM8WordOut=>ICache.WData                         Premise(F36)
	S31= ICache.WData=IMemGet8Word({pid,addr})                  Path(S24,S30)
	S32= PC.Out=>ICache.IEA                                     Premise(F37)
	S33= ICache.IEA=addr                                        Path(S19,S32)
	S34= CtrlPC=0                                               Premise(F43)
	S35= CtrlPCInc=1                                            Premise(F44)
	S36= PC[CIA]=addr                                           PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F46)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S31,S37)
	S39= CtrlIR=1                                               Premise(F47)
	S40= [IR]={17,8,cc,0,1,offset}                              IR-Write(S29,S39)

ID	S41= IR.Out15_0=offset                                      IR-Out(S40)
	S42= IR.Out15_0=>SEXT.In                                    Premise(F57)
	S43= SEXT.In=offset                                         Path(S41,S42)
	S44= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S43)
	S45= SEXT.Out=>A.In                                         Premise(F58)
	S46= A.In={14{offset[15]},offset,2{0}}                      Path(S44,S45)
	S47= CtrlPCInc=0                                            Premise(F65)
	S48= PC[CIA]=addr                                           PC-Hold(S36,S47)
	S49= CtrlICache=0                                           Premise(F67)
	S50= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S49)
	S51= CtrlA=1                                                Premise(F72)
	S52= [A]={14{offset[15]},offset,2{0}}                       A-Write(S46,S51)

EX	S53= PC.CIA=addr                                            PC-Out(S48)
	S54= A.Out={14{offset[15]},offset,2{0}}                     A-Out(S52)
	S55= PC.CIA=>ALU.A                                          Premise(F76)
	S56= ALU.A=addr                                             Path(S53,S55)
	S57= A.Out=>ALU.B                                           Premise(F77)
	S58= ALU.B={14{offset[15]},offset,2{0}}                     Path(S54,S57)
	S59= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S56,S58)
	S60= ALU.Out=>ALUOut.In                                     Premise(F79)
	S61= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S59,S60)
	S62= CtrlICache=0                                           Premise(F88)
	S63= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S50,S62)
	S64= CtrlALUOut=1                                           Premise(F94)
	S65= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S61,S64)

MEM	S66= CtrlICache=0                                           Premise(F108)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S63,S66)
	S68= CtrlALUOut=0                                           Premise(F114)
	S69= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Hold(S65,S68)

WB	S70= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S69)
	S71= ALUOut.Out=>PC.In                                      Premise(F151)
	S72= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S70,S71)
	S73= CtrlPC=1                                               Premise(F158)
	S74= CtrlPCInc=0                                            Premise(F159)
	S75= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S72,S73,S74)
	S76= CtrlICache=0                                           Premise(F161)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S76)

POST	S75= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S72,S73,S74)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S76)

