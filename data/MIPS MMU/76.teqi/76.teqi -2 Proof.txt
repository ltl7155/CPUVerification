
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= ICache[addr]={1,rs,12,imm}                              Premise(F3)
	S3= GPR[rs]=a                                               Premise(F4)

IF	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PC.Out=>ICache.IEA                                      Premise(F9)
	S6= ICache.IEA=addr                                         Path(S4,S5)
	S7= ICache.Out={1,rs,12,imm}                                ICache-Search(S6,S2)
	S8= ICache.Out=>IR.In                                       Premise(F10)
	S9= IR.In={1,rs,12,imm}                                     Path(S7,S8)
	S10= CtrlCP0=0                                              Premise(F14)
	S11= CP0[ASID]=pid                                          CP0-Hold(S0,S10)
	S12= CtrlPC=0                                               Premise(F18)
	S13= CtrlPCInc=1                                            Premise(F19)
	S14= PC[Out]=addr+4                                         PC-Inc(S1,S12,S13)
	S15= CtrlIR=1                                               Premise(F22)
	S16= [IR]={1,rs,12,imm}                                     IR-Write(S9,S15)
	S17= CtrlGPR=0                                              Premise(F26)
	S18= GPR[rs]=a                                              GPR-Hold(S3,S17)

ID	S19= IR.Out25_21=rs                                         IR-Out(S16)
	S20= IR.Out15_0=imm                                         IR-Out(S16)
	S21= IR.Out25_21=>GPR.RReg1                                 Premise(F50)
	S22= GPR.RReg1=rs                                           Path(S19,S21)
	S23= GPR.Rdata1=a                                           GPR-Read(S22,S18)
	S24= IR.Out15_0=>IMMEXT.In                                  Premise(F52)
	S25= IMMEXT.In=imm                                          Path(S20,S24)
	S26= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S25)
	S27= GPR.Rdata1=>A.In                                       Premise(F53)
	S28= A.In=a                                                 Path(S23,S27)
	S29= IMMEXT.Out=>B.In                                       Premise(F54)
	S30= B.In={16{imm[15]},imm}                                 Path(S26,S29)
	S31= CtrlCP0=0                                              Premise(F56)
	S32= CP0[ASID]=pid                                          CP0-Hold(S11,S31)
	S33= CtrlPC=0                                               Premise(F60)
	S34= CtrlPCInc=0                                            Premise(F61)
	S35= PC[Out]=addr+4                                         PC-Hold(S14,S33,S34)
	S36= CtrlA=1                                                Premise(F69)
	S37= [A]=a                                                  A-Write(S28,S36)
	S38= CtrlB=1                                                Premise(F70)
	S39= [B]={16{imm[15]},imm}                                  B-Write(S30,S38)

EX	S40= A.Out=a                                                A-Out(S37)
	S41= B.Out={16{imm[15]},imm}                                B-Out(S39)
	S42= A.Out=>CMPU.A                                          Premise(F73)
	S43= CMPU.A=a                                               Path(S40,S42)
	S44= B.Out=>CMPU.B                                          Premise(F74)
	S45= CMPU.B={16{imm[15]},imm}                               Path(S41,S44)
	S46= CMPU.zero=CompareS(a,{16{imm[15]},imm})                CMPU-CMPS(S43,S45)
	S47= CMPU.zero=>ConditionReg.In                             Premise(F76)
	S48= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S46,S47)
	S49= CtrlCP0=0                                              Premise(F78)
	S50= CP0[ASID]=pid                                          CP0-Hold(S32,S49)
	S51= CtrlPC=0                                               Premise(F82)
	S52= CtrlPCInc=0                                            Premise(F83)
	S53= PC[Out]=addr+4                                         PC-Hold(S35,S51,S52)
	S54= CtrlConditionReg=1                                     Premise(F93)
	S55= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S48,S54)

MEM	S56= CP0.ASID=pid                                           CP0-Read-ASID(S50)
	S57= PC.Out=addr+4                                          PC-Out(S53)
	S58= PC.Out=>CP0.EPCIn                                      Premise(F95)
	S59= CP0.EPCIn=addr+4                                       Path(S57,S58)
	S60= CP0.ExCodeIn=5'h0d                                     Premise(F96)
	S61= CP0.ASID=>PIDReg.In                                    Premise(F98)
	S62= PIDReg.In=pid                                          Path(S56,S61)
	S63= CtrlEPCIn=1                                            Premise(F102)
	S64= CP0[EPC]=addr+4                                        CP0-Write-EPC(S59,S63)
	S65= CtrlExCodeIn=1                                         Premise(F103)
	S66= CP0[ExCode]=5'h0d                                      CP0-Write-ExCode(S60,S65)
	S67= CtrlConditionReg=0                                     Premise(F116)
	S68= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S55,S67)
	S69= CtrlPIDReg=1                                           Premise(F117)
	S70= [PIDReg]=pid                                           PIDReg-Write(S62,S69)

MEM(DMMU1)	S71= CtrlCP0=0                                              Premise(F119)
	S72= CP0[EPC]=addr+4                                        CP0-Hold(S64,S71)
	S73= CP0[ExCode]=5'h0d                                      CP0-Hold(S66,S71)
	S74= CtrlConditionReg=0                                     Premise(F134)
	S75= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S68,S74)
	S76= CtrlPIDReg=0                                           Premise(F135)
	S77= [PIDReg]=pid                                           PIDReg-Hold(S70,S76)

MEM(DMMU2)	S78= CtrlCP0=0                                              Premise(F137)
	S79= CP0[EPC]=addr+4                                        CP0-Hold(S72,S78)
	S80= CP0[ExCode]=5'h0d                                      CP0-Hold(S73,S78)
	S81= CtrlConditionReg=0                                     Premise(F152)
	S82= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S75,S81)
	S83= CtrlPIDReg=0                                           Premise(F153)
	S84= [PIDReg]=pid                                           PIDReg-Hold(S77,S83)

WB	S85= CtrlCP0=0                                              Premise(F155)
	S86= CP0[EPC]=addr+4                                        CP0-Hold(S79,S85)
	S87= CP0[ExCode]=5'h0d                                      CP0-Hold(S80,S85)
	S88= CtrlConditionReg=0                                     Premise(F170)
	S89= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S82,S88)
	S90= CtrlPIDReg=0                                           Premise(F171)
	S91= [PIDReg]=pid                                           PIDReg-Hold(S84,S90)

POST	S86= CP0[EPC]=addr+4                                        CP0-Hold(S79,S85)
	S87= CP0[ExCode]=5'h0d                                      CP0-Hold(S80,S85)
	S89= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S82,S88)
	S91= [PIDReg]=pid                                           PIDReg-Hold(S84,S90)

