
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                      Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F26)
	S15= CtrlPCInc=0                                            Premise(F27)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F28)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F33)
	S20= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                     IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F35)
	S22= GPR[rS]=a                                              GPR-Hold(S3,S21)
	S23= GPR[rT]=b                                              GPR-Hold(S4,S21)

IF(IMMU)	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F56)
	S27= IMem.RAddr={pid,addr}                                  Path(S25,S26)
	S28= IMem.Out={0,rS,rT,rD,0,10}                             IMem-Read(S27,S20)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S20)
	S30= IMem.Out=>IRMux.MemData                                Premise(F57)
	S31= IRMux.MemData={0,rS,rT,rD,0,10}                        Path(S28,S30)
	S32= IRMux.Out={0,rS,rT,rD,0,10}                            IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F61)
	S34= IR_ID.In={0,rS,rT,rD,0,10}                             Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F62)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= PC.Out=>ICache.IEA                                     Premise(F63)
	S38= ICache.IEA=addr                                        Path(S24,S37)
	S39= CtrlPC=0                                               Premise(F71)
	S40= CtrlPCInc=1                                            Premise(F72)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F74)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S38,S36,S42)
	S44= CtrlIR_ID=1                                            Premise(F77)
	S45= [IR_ID]={0,rS,rT,rD,0,10}                              IR_ID-Write(S34,S44)
	S46= CtrlGPR=0                                              Premise(F80)
	S47= GPR[rS]=a                                              GPR-Hold(S22,S46)
	S48= GPR[rT]=b                                              GPR-Hold(S23,S46)

ID	S49= IR_ID.Out={0,rS,rT,rD,0,10}                            IR-Out(S45)
	S50= IR_ID.Out25_21=rS                                      IR-Out(S45)
	S51= IR_ID.Out20_16=rT                                      IR-Out(S45)
	S52= IR_ID.Out25_21=>GPR.RReg1                              Premise(F102)
	S53= GPR.RReg1=rS                                           Path(S50,S52)
	S54= GPR.Rdata1=a                                           GPR-Read(S53,S47)
	S55= IR_ID.Out20_16=>GPR.RReg2                              Premise(F103)
	S56= GPR.RReg2=rT                                           Path(S51,S55)
	S57= GPR.Rdata2=b                                           GPR-Read(S56,S48)
	S58= GPR.Rdata1=>FU.InID1                                   Premise(F105)
	S59= FU.InID1=a                                             Path(S54,S58)
	S60= FU.OutID1=FU(a)                                        FU-Forward(S59)
	S61= FU.OutID1=>A_EX.In                                     Premise(F107)
	S62= A_EX.In=FU(a)                                          Path(S60,S61)
	S63= GPR.Rdata2=>FU.InID2                                   Premise(F108)
	S64= FU.InID2=b                                             Path(S57,S63)
	S65= FU.OutID2=FU(b)                                        FU-Forward(S64)
	S66= FU.OutID2=>B_EX.In                                     Premise(F110)
	S67= B_EX.In=FU(b)                                          Path(S65,S66)
	S68= IR_ID.Out=>IR_EX.In                                    Premise(F111)
	S69= IR_EX.In={0,rS,rT,rD,0,10}                             Path(S49,S68)
	S70= CtrlPC=0                                               Premise(F119)
	S71= CtrlPCInc=0                                            Premise(F120)
	S72= PC[Out]=addr+4                                         PC-Hold(S41,S70,S71)
	S73= CtrlICache=0                                           Premise(F122)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S73)
	S75= CtrlA_EX=1                                             Premise(F129)
	S76= [A_EX]=FU(a)                                           A_EX-Write(S62,S75)
	S77= CtrlB_EX=1                                             Premise(F130)
	S78= [B_EX]=FU(b)                                           B_EX-Write(S67,S77)
	S79= CtrlIR_EX=1                                            Premise(F131)
	S80= [IR_EX]={0,rS,rT,rD,0,10}                              IR_EX-Write(S69,S79)

EX	S81= A_EX.Out=FU(a)                                         A_EX-Out(S76)
	S82= B_EX.Out=FU(b)                                         B_EX-Out(S78)
	S83= IR_EX.Out={0,rS,rT,rD,0,10}                            IR_EX-Out(S80)
	S84= CMPU.A=32'b0                                           Premise(F151)
	S85= B_EX.Out=>CMPU.B                                       Premise(F152)
	S86= CMPU.B=FU(b)                                           Path(S82,S85)
	S87= CMPU.zero=CompareS(32'b0,FU(b))                        CMPU-CMPS(S84,S86)
	S88= CMPU.zero=>ConditionReg_MEM.In                         Premise(F154)
	S89= ConditionReg_MEM.In=CompareS(32'b0,FU(b))              Path(S87,S88)
	S90= IR_EX.Out=>IR_MEM.In                                   Premise(F155)
	S91= IR_MEM.In={0,rS,rT,rD,0,10}                            Path(S83,S90)
	S92= A_EX.Out=>A_MEM.In                                     Premise(F156)
	S93= A_MEM.In=FU(a)                                         Path(S81,S92)
	S94= CtrlPC=0                                               Premise(F163)
	S95= CtrlPCInc=0                                            Premise(F164)
	S96= PC[Out]=addr+4                                         PC-Hold(S72,S94,S95)
	S97= CtrlICache=0                                           Premise(F166)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S97)
	S99= CtrlConditionReg_MEM=1                                 Premise(F176)
	S100= [ConditionReg_MEM]=CompareS(32'b0,FU(b))              ConditionReg_MEM-Write(S89,S99)
	S101= CtrlIR_MEM=1                                          Premise(F177)
	S102= [IR_MEM]={0,rS,rT,rD,0,10}                            IR_MEM-Write(S91,S101)
	S103= CtrlA_MEM=1                                           Premise(F178)
	S104= [A_MEM]=FU(a)                                         A_MEM-Write(S93,S103)

MEM	S105= ConditionReg_MEM.Out=CompareS(32'b0,FU(b))            ConditionReg_MEM-Out(S100)
	S106= IR_MEM.Out={0,rS,rT,rD,0,10}                          IR_MEM-Out(S102)
	S107= A_MEM.Out=FU(a)                                       A_MEM-Out(S104)
	S108= IR_MEM.Out=>IR_DMMU1.In                               Premise(F197)
	S109= IR_DMMU1.In={0,rS,rT,rD,0,10}                         Path(S106,S108)
	S110= A_MEM.Out=>A_DMMU1.In                                 Premise(F199)
	S111= A_DMMU1.In=FU(a)                                      Path(S107,S110)
	S112= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In           Premise(F202)
	S113= ConditionReg_DMMU1.In=CompareS(32'b0,FU(b))           Path(S105,S112)
	S114= CtrlPC=0                                              Premise(F212)
	S115= CtrlPCInc=0                                           Premise(F213)
	S116= PC[Out]=addr+4                                        PC-Hold(S96,S114,S115)
	S117= CtrlICache=0                                          Premise(F215)
	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S117)
	S119= CtrlIR_DMMU1=1                                        Premise(F228)
	S120= [IR_DMMU1]={0,rS,rT,rD,0,10}                          IR_DMMU1-Write(S109,S119)
	S121= CtrlA_DMMU1=1                                         Premise(F230)
	S122= [A_DMMU1]=FU(a)                                       A_DMMU1-Write(S111,S121)
	S123= CtrlConditionReg_DMMU1=1                              Premise(F234)
	S124= [ConditionReg_DMMU1]=CompareS(32'b0,FU(b))            ConditionReg_DMMU1-Write(S113,S123)

MEM(DMMU1)	S125= IR_DMMU1.Out={0,rS,rT,rD,0,10}                        IR_DMMU1-Out(S120)
	S126= A_DMMU1.Out=FU(a)                                     A_DMMU1-Out(S122)
	S127= ConditionReg_DMMU1.Out=CompareS(32'b0,FU(b))          ConditionReg_DMMU1-Out(S124)
	S128= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F247)
	S129= IR_DMMU2.In={0,rS,rT,rD,0,10}                         Path(S125,S128)
	S130= A_DMMU1.Out=>A_DMMU2.In                               Premise(F248)
	S131= A_DMMU2.In=FU(a)                                      Path(S126,S130)
	S132= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F249)
	S133= ConditionReg_DMMU2.In=CompareS(32'b0,FU(b))           Path(S127,S132)
	S134= CtrlPC=0                                              Premise(F256)
	S135= CtrlPCInc=0                                           Premise(F257)
	S136= PC[Out]=addr+4                                        PC-Hold(S116,S134,S135)
	S137= CtrlICache=0                                          Premise(F259)
	S138= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S137)
	S139= CtrlIR_DMMU2=1                                        Premise(F280)
	S140= [IR_DMMU2]={0,rS,rT,rD,0,10}                          IR_DMMU2-Write(S129,S139)
	S141= CtrlA_DMMU2=1                                         Premise(F281)
	S142= [A_DMMU2]=FU(a)                                       A_DMMU2-Write(S131,S141)
	S143= CtrlConditionReg_DMMU2=1                              Premise(F282)
	S144= [ConditionReg_DMMU2]=CompareS(32'b0,FU(b))            ConditionReg_DMMU2-Write(S133,S143)

MEM(DMMU2)	S145= IR_DMMU2.Out={0,rS,rT,rD,0,10}                        IR_DMMU2-Out(S140)
	S146= A_DMMU2.Out=FU(a)                                     A_DMMU2-Out(S142)
	S147= ConditionReg_DMMU2.Out=CompareS(32'b0,FU(b))          ConditionReg_DMMU2-Out(S144)
	S148= IR_DMMU2.Out=>IR_WB.In                                Premise(F288)
	S149= IR_WB.In={0,rS,rT,rD,0,10}                            Path(S145,S148)
	S150= A_DMMU2.Out=>A_WB.In                                  Premise(F289)
	S151= A_WB.In=FU(a)                                         Path(S146,S150)
	S152= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F290)
	S153= ConditionReg_WB.In=CompareS(32'b0,FU(b))              Path(S147,S152)
	S154= CtrlPC=0                                              Premise(F297)
	S155= CtrlPCInc=0                                           Premise(F298)
	S156= PC[Out]=addr+4                                        PC-Hold(S136,S154,S155)
	S157= CtrlICache=0                                          Premise(F300)
	S158= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S138,S157)
	S159= CtrlIR_WB=1                                           Premise(F314)
	S160= [IR_WB]={0,rS,rT,rD,0,10}                             IR_WB-Write(S149,S159)
	S161= CtrlA_WB=1                                            Premise(F316)
	S162= [A_WB]=FU(a)                                          A_WB-Write(S151,S161)
	S163= CtrlConditionReg_WB=1                                 Premise(F320)
	S164= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Write(S153,S163)

WB	S165= IR_WB.Out15_11=rD                                     IR-Out(S160)
	S166= A_WB.Out=FU(a)                                        A_WB-Out(S162)
	S167= IR_WB.Out15_11=>GPR.WReg                              Premise(F327)
	S168= GPR.WReg=rD                                           Path(S165,S167)
	S169= A_WB.Out=>GPR.WData                                   Premise(F328)
	S170= GPR.WData=FU(a)                                       Path(S166,S169)
	S171= CtrlPC=0                                              Premise(F337)
	S172= CtrlPCInc=0                                           Premise(F338)
	S173= PC[Out]=addr+4                                        PC-Hold(S156,S171,S172)
	S174= CtrlICache=0                                          Premise(F340)
	S175= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S158,S174)
	S176= CtrlGPR=1                                             Premise(F346)
	S177= GPR[rD]=FU(a)                                         GPR-Write(S168,S170,S176)
	S178= CtrlConditionReg_WB=0                                 Premise(F360)
	S179= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S164,S178)

POST	S173= PC[Out]=addr+4                                        PC-Hold(S156,S171,S172)
	S175= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S158,S174)
	S177= GPR[rD]=FU(a)                                         GPR-Write(S168,S170,S176)
	S179= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S164,S178)

