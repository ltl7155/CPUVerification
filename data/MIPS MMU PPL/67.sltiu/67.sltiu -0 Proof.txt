
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={11,rS,rT,imm}                         Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={11,rS,rT,imm}                        IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F53)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={11,rS,rT,imm}                                IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F54)
	S29= IRMux.MemData={11,rS,rT,imm}                           Path(S26,S28)
	S30= IRMux.Out={11,rS,rT,imm}                               IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F58)
	S32= IR_ID.In={11,rS,rT,imm}                                Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F59)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F60)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F68)
	S38= CtrlPCInc=1                                            Premise(F69)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F71)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F74)
	S43= [IR_ID]={11,rS,rT,imm}                                 IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F77)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out={11,rS,rT,imm}                               IR-Out(S43)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S43)
	S48= IR_ID.Out15_0=imm                                      IR-Out(S43)
	S49= IR_ID.Out25_21=>GPR.RReg1                              Premise(F97)
	S50= GPR.RReg1=rS                                           Path(S47,S49)
	S51= GPR.Rdata1=a                                           GPR-Read(S50,S45)
	S52= IR_ID.Out15_0=>LIMMEXT.In                              Premise(F98)
	S53= LIMMEXT.In=imm                                         Path(S48,S52)
	S54= LIMMEXT.Out={16{0},imm}                                LIMMEXT(S53)
	S55= GPR.Rdata1=>FU.InID1                                   Premise(F99)
	S56= FU.InID1=a                                             Path(S51,S55)
	S57= FU.OutID1=FU(a)                                        FU-Forward(S56)
	S58= FU.OutID1=>A_EX.In                                     Premise(F101)
	S59= A_EX.In=FU(a)                                          Path(S57,S58)
	S60= LIMMEXT.Out=>B_EX.In                                   Premise(F102)
	S61= B_EX.In={16{0},imm}                                    Path(S54,S60)
	S62= IR_ID.Out=>IR_EX.In                                    Premise(F103)
	S63= IR_EX.In={11,rS,rT,imm}                                Path(S46,S62)
	S64= CtrlPC=0                                               Premise(F112)
	S65= CtrlPCInc=0                                            Premise(F113)
	S66= PC[Out]=addr+4                                         PC-Hold(S39,S64,S65)
	S67= CtrlICache=0                                           Premise(F115)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S67)
	S69= CtrlA_EX=1                                             Premise(F122)
	S70= [A_EX]=FU(a)                                           A_EX-Write(S59,S69)
	S71= CtrlB_EX=1                                             Premise(F123)
	S72= [B_EX]={16{0},imm}                                     B_EX-Write(S61,S71)
	S73= CtrlIR_EX=1                                            Premise(F124)
	S74= [IR_EX]={11,rS,rT,imm}                                 IR_EX-Write(S63,S73)

EX	S75= A_EX.Out=FU(a)                                         A_EX-Out(S70)
	S76= B_EX.Out={16{0},imm}                                   B_EX-Out(S72)
	S77= IR_EX.Out={11,rS,rT,imm}                               IR_EX-Out(S74)
	S78= A_EX.Out=>ALU.A                                        Premise(F141)
	S79= ALU.A=FU(a)                                            Path(S75,S78)
	S80= B_EX.Out=>ALU.B                                        Premise(F142)
	S81= ALU.B={16{0},imm}                                      Path(S76,S80)
	S82= ALU.Out={31{0},(FU(a)<u{16{0},imm})}                   ALU(S79,S81)
	S83= ALU.Out=>ALUOut_MEM.In                                 Premise(F144)
	S84= ALUOut_MEM.In={31{0},(FU(a)<u{16{0},imm})}             Path(S82,S83)
	S85= IR_EX.Out=>IR_MEM.In                                   Premise(F147)
	S86= IR_MEM.In={11,rS,rT,imm}                               Path(S77,S85)
	S87= CtrlPC=0                                               Premise(F153)
	S88= CtrlPCInc=0                                            Premise(F154)
	S89= PC[Out]=addr+4                                         PC-Hold(S66,S87,S88)
	S90= CtrlICache=0                                           Premise(F156)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S68,S90)
	S92= CtrlALUOut_MEM=1                                       Premise(F166)
	S93= [ALUOut_MEM]={31{0},(FU(a)<u{16{0},imm})}              ALUOut_MEM-Write(S84,S92)
	S94= CtrlIR_MEM=1                                           Premise(F167)
	S95= [IR_MEM]={11,rS,rT,imm}                                IR_MEM-Write(S86,S94)

MEM	S96= ALUOut_MEM.Out={31{0},(FU(a)<u{16{0},imm})}            ALUOut_MEM-Out(S93)
	S97= IR_MEM.Out={11,rS,rT,imm}                              IR_MEM-Out(S95)
	S98= IR_MEM.Out=>IR_DMMU1.In                                Premise(F184)
	S99= IR_DMMU1.In={11,rS,rT,imm}                             Path(S97,S98)
	S100= ALUOut_MEM.Out=>ALUOut_DMMU1.In                       Premise(F188)
	S101= ALUOut_DMMU1.In={31{0},(FU(a)<u{16{0},imm})}          Path(S96,S100)
	S102= CtrlPC=0                                              Premise(F199)
	S103= CtrlPCInc=0                                           Premise(F200)
	S104= PC[Out]=addr+4                                        PC-Hold(S89,S102,S103)
	S105= CtrlICache=0                                          Premise(F202)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S105)
	S107= CtrlIR_DMMU1=1                                        Premise(F214)
	S108= [IR_DMMU1]={11,rS,rT,imm}                             IR_DMMU1-Write(S99,S107)
	S109= CtrlALUOut_DMMU1=1                                    Premise(F220)
	S110= [ALUOut_DMMU1]={31{0},(FU(a)<u{16{0},imm})}           ALUOut_DMMU1-Write(S101,S109)

MEM(DMMU1)	S111= IR_DMMU1.Out={11,rS,rT,imm}                           IR_DMMU1-Out(S108)
	S112= ALUOut_DMMU1.Out={31{0},(FU(a)<u{16{0},imm})}         ALUOut_DMMU1-Out(S110)
	S113= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F231)
	S114= IR_DMMU2.In={11,rS,rT,imm}                            Path(S111,S113)
	S115= ALUOut_DMMU1.Out=>ALUOut_DMMU2.In                     Premise(F232)
	S116= ALUOut_DMMU2.In={31{0},(FU(a)<u{16{0},imm})}          Path(S112,S115)
	S117= CtrlPC=0                                              Premise(F240)
	S118= CtrlPCInc=0                                           Premise(F241)
	S119= PC[Out]=addr+4                                        PC-Hold(S104,S117,S118)
	S120= CtrlICache=0                                          Premise(F243)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S120)
	S122= CtrlIR_DMMU2=1                                        Premise(F263)
	S123= [IR_DMMU2]={11,rS,rT,imm}                             IR_DMMU2-Write(S114,S122)
	S124= CtrlALUOut_DMMU2=1                                    Premise(F264)
	S125= [ALUOut_DMMU2]={31{0},(FU(a)<u{16{0},imm})}           ALUOut_DMMU2-Write(S116,S124)

MEM(DMMU2)	S126= IR_DMMU2.Out={11,rS,rT,imm}                           IR_DMMU2-Out(S123)
	S127= ALUOut_DMMU2.Out={31{0},(FU(a)<u{16{0},imm})}         ALUOut_DMMU2-Out(S125)
	S128= IR_DMMU2.Out=>IR_WB.In                                Premise(F269)
	S129= IR_WB.In={11,rS,rT,imm}                               Path(S126,S128)
	S130= ALUOut_DMMU2.Out=>ALUOut_WB.In                        Premise(F270)
	S131= ALUOut_WB.In={31{0},(FU(a)<u{16{0},imm})}             Path(S127,S130)
	S132= CtrlPC=0                                              Premise(F278)
	S133= CtrlPCInc=0                                           Premise(F279)
	S134= PC[Out]=addr+4                                        PC-Hold(S119,S132,S133)
	S135= CtrlICache=0                                          Premise(F281)
	S136= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S135)
	S137= CtrlIR_WB=1                                           Premise(F294)
	S138= [IR_WB]={11,rS,rT,imm}                                IR_WB-Write(S129,S137)
	S139= CtrlALUOut_WB=1                                       Premise(F300)
	S140= [ALUOut_WB]={31{0},(FU(a)<u{16{0},imm})}              ALUOut_WB-Write(S131,S139)

WB	S141= IR_WB.Out20_16=rT                                     IR-Out(S138)
	S142= ALUOut_WB.Out={31{0},(FU(a)<u{16{0},imm})}            ALUOut_WB-Out(S140)
	S143= IR_WB.Out20_16=>GPR.WReg                              Premise(F305)
	S144= GPR.WReg=rT                                           Path(S141,S143)
	S145= ALUOut_WB.Out=>GPR.WData                              Premise(F306)
	S146= GPR.WData={31{0},(FU(a)<u{16{0},imm})}                Path(S142,S145)
	S147= CtrlPC=0                                              Premise(F314)
	S148= CtrlPCInc=0                                           Premise(F315)
	S149= PC[Out]=addr+4                                        PC-Hold(S134,S147,S148)
	S150= CtrlICache=0                                          Premise(F317)
	S151= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S136,S150)
	S152= CtrlGPR=1                                             Premise(F323)
	S153= GPR[rT]={31{0},(FU(a)<u{16{0},imm})}                  GPR-Write(S144,S146,S152)

POST	S149= PC[Out]=addr+4                                        PC-Hold(S134,S147,S148)
	S151= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S136,S150)
	S153= GPR[rT]={31{0},(FU(a)<u{16{0},imm})}                  GPR-Write(S144,S146,S152)

