
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={7,rS,0,offset}                        Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PC.Out=>IMem.RAddr                                      Premise(F3)
	S6= IMem.RAddr=addr                                         Path(S4,S5)
	S7= CP0.ASID=>IMem.ASID                                     Premise(F4)
	S8= IMem.ASID=pid                                           Path(S3,S7)
	S9= IMem.Out={7,rS,0,offset}                                IMem-Read(S8,S6,S2)
	S10= IMem.Out=>IR_ID.In                                     Premise(F6)
	S11= IR_ID.In={7,rS,0,offset}                               Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F40)
	S13= CtrlPCInc=1                                            Premise(F41)
	S14= PC[CIA]=addr                                           PC-Inc(S1,S12,S13)
	S15= CtrlIR_ID=1                                            Premise(F47)
	S16= [IR_ID]={7,rS,0,offset}                                IR_ID-Write(S11,S15)
	S17= GPR[rS]=a                                              Premise(F57)

ID	S18= IR_ID.Out={7,rS,0,offset}                              IR-Out(S16)
	S19= IR_ID.Out25_21=rS                                      IR-Out(S16)
	S20= IR_ID.Out25_21=>GPR.RReg1                              Premise(F66)
	S21= GPR.RReg1=rS                                           Path(S19,S20)
	S22= GPR.Rdata1=a                                           GPR-Read(S21,S17)
	S23= GPR.Rdata1=>FU.InID1                                   Premise(F68)
	S24= FU.InID1=a                                             Path(S22,S23)
	S25= FU.OutID1=FU(a)                                        FU-Forward(S24)
	S26= FU.OutID1=>A_EX.In                                     Premise(F70)
	S27= A_EX.In=FU(a)                                          Path(S25,S26)
	S28= B_EX.In=32'b0                                          Premise(F71)
	S29= IR_ID.Out=>IR_EX.In                                    Premise(F72)
	S30= IR_EX.In={7,rS,0,offset}                               Path(S18,S29)
	S31= CtrlPCInc=0                                            Premise(F98)
	S32= PC[CIA]=addr                                           PC-Hold(S14,S31)
	S33= CtrlA_EX=1                                             Premise(F106)
	S34= [A_EX]=FU(a)                                           A_EX-Write(S27,S33)
	S35= CtrlB_EX=1                                             Premise(F107)
	S36= [B_EX]=32'b0                                           B_EX-Write(S28,S35)
	S37= CtrlIR_EX=1                                            Premise(F108)
	S38= [IR_EX]={7,rS,0,offset}                                IR_EX-Write(S30,S37)

EX	S39= PC.CIA=addr                                            PC-Out(S32)
	S40= A_EX.Out=FU(a)                                         A_EX-Out(S34)
	S41= B_EX.Out=32'b0                                         B_EX-Out(S36)
	S42= IR_EX.Out15_0=offset                                   IR_EX-Out(S38)
	S43= IR_EX.Out15_0=>SEXT.In                                 Premise(F133)
	S44= SEXT.In=offset                                         Path(S42,S43)
	S45= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S44)
	S46= PC.CIA=>ALU.A                                          Premise(F134)
	S47= ALU.A=addr                                             Path(S39,S46)
	S48= SEXT.Out=>ALU.B                                        Premise(F135)
	S49= ALU.B={14{offset[15]},offset,2{0}}                     Path(S45,S48)
	S50= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S47,S49)
	S51= ALU.Out=>ALUOut_MEM.In                                 Premise(F137)
	S52= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S50,S51)
	S53= A_EX.Out=>CMPU.A                                       Premise(F138)
	S54= CMPU.A=FU(a)                                           Path(S40,S53)
	S55= B_EX.Out=>CMPU.B                                       Premise(F139)
	S56= CMPU.B=32'b0                                           Path(S41,S55)
	S57= CMPU.gt=CompareS(FU(a),32'b0)                          CMPU-CMPS(S54,S56)
	S58= CMPU.gt=>ConditionReg_MEM.In                           Premise(F141)
	S59= ConditionReg_MEM.In=CompareS(FU(a),32'b0)              Path(S57,S58)
	S60= CtrlALUOut_MEM=1                                       Premise(F166)
	S61= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S52,S60)
	S62= CtrlConditionReg_MEM=1                                 Premise(F167)
	S63= [ConditionReg_MEM]=CompareS(FU(a),32'b0)               ConditionReg_MEM-Write(S59,S62)

MEM	S64= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S61)
	S65= ConditionReg_MEM.Out=CompareS(FU(a),32'b0)             ConditionReg_MEM-Out(S63)
	S66= ALUOut_MEM.Out=>PC.In                                  Premise(F201)
	S67= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S64,S66)
	S68= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F204)
	S69= ConditionReg_WB.In=CompareS(FU(a),32'b0)               Path(S65,S68)
	S70= CtrlPC=1                                               Premise(F209)
	S71= CtrlPCInc=0                                            Premise(F210)
	S72= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S67,S70,S71)
	S73= CtrlConditionReg_WB=1                                  Premise(F225)
	S74= [ConditionReg_WB]=CompareS(FU(a),32'b0)                ConditionReg_WB-Write(S69,S73)

WB	S75= CtrlPC=0                                               Premise(F264)
	S76= CtrlPCInc=0                                            Premise(F265)
	S77= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S72,S75,S76)
	S78= CtrlConditionReg_WB=0                                  Premise(F280)
	S79= [ConditionReg_WB]=CompareS(FU(a),32'b0)                ConditionReg_WB-Hold(S74,S78)

POST	S77= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S72,S75,S76)
	S79= [ConditionReg_WB]=CompareS(FU(a),32'b0)                ConditionReg_WB-Hold(S74,S78)

