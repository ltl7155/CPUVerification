
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                   Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F5)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F25)
	S13= CtrlPCInc=0                                            Premise(F26)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F27)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F32)
	S18= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                  IMem-Hold(S2,S17)

IF(IMMU)	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= IAddrReg.Out=>IMem.RAddr                               Premise(F53)
	S22= IMem.RAddr={pid,addr}                                  Path(S20,S21)
	S23= IMem.Out={0,rS,cc,0,0,rD,0,1}                          IMem-Read(S22,S18)
	S24= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S22,S18)
	S25= IMem.Out=>IRMux.MemData                                Premise(F54)
	S26= IRMux.MemData={0,rS,cc,0,0,rD,0,1}                     Path(S23,S25)
	S27= IRMux.Out={0,rS,cc,0,0,rD,0,1}                         IRMux-Select2(S26)
	S28= IRMux.Out=>IR_ID.In                                    Premise(F58)
	S29= IR_ID.In={0,rS,cc,0,0,rD,0,1}                          Path(S27,S28)
	S30= IMem.MEM8WordOut=>ICache.WData                         Premise(F59)
	S31= ICache.WData=IMemGet8Word({pid,addr})                  Path(S24,S30)
	S32= PC.Out=>ICache.IEA                                     Premise(F60)
	S33= ICache.IEA=addr                                        Path(S19,S32)
	S34= CtrlPC=0                                               Premise(F68)
	S35= CtrlPCInc=1                                            Premise(F69)
	S36= PC[Out]=addr+4                                         PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F71)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S31,S37)
	S39= CtrlIR_ID=1                                            Premise(F74)
	S40= [IR_ID]={0,rS,cc,0,0,rD,0,1}                           IR_ID-Write(S29,S39)

ID	S41= IR_ID.Out={0,rS,cc,0,0,rD,0,1}                         IR-Out(S40)
	S42= IR_ID.Out=>IR_EX.In                                    Premise(F102)
	S43= IR_EX.In={0,rS,cc,0,0,rD,0,1}                          Path(S41,S42)
	S44= CtrlPC=0                                               Premise(F111)
	S45= CtrlPCInc=0                                            Premise(F112)
	S46= PC[Out]=addr+4                                         PC-Hold(S36,S44,S45)
	S47= CtrlICache=0                                           Premise(F114)
	S48= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S47)
	S49= CtrlIR_EX=1                                            Premise(F122)
	S50= [IR_EX]={0,rS,cc,0,0,rD,0,1}                           IR_EX-Write(S43,S49)

EX	S51= IR_EX.Out20_18=cc                                      IR_EX-Out(S50)
	S52= IR_EX.Out16=0                                          IR_EX-Out(S50)
	S53= IR_EX.Out20_18=>CP1.cc                                 Premise(F141)
	S54= CP1.cc=cc                                              Path(S51,S53)
	S55= IR_EX.Out16=>CP1.tf                                    Premise(F142)
	S56= CP1.tf=0                                               Path(S52,S55)
	S57= CP1.fp=FPConditionCode(cc,0)                           FP-PRODUCT(S54,S56)
	S58= CP1.fp=>ConditionReg_MEM.In                            Premise(F143)
	S59= ConditionReg_MEM.In=FPConditionCode(cc,0)              Path(S57,S58)
	S60= CtrlPC=0                                               Premise(F152)
	S61= CtrlPCInc=0                                            Premise(F153)
	S62= PC[Out]=addr+4                                         PC-Hold(S46,S60,S61)
	S63= CtrlICache=0                                           Premise(F155)
	S64= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S48,S63)
	S65= CtrlConditionReg_MEM=1                                 Premise(F165)
	S66= [ConditionReg_MEM]=FPConditionCode(cc,0)               ConditionReg_MEM-Write(S59,S65)

MEM	S67= ConditionReg_MEM.Out=FPConditionCode(cc,0)             ConditionReg_MEM-Out(S66)
	S68= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F188)
	S69= ConditionReg_DMMU1.In=FPConditionCode(cc,0)            Path(S67,S68)
	S70= CtrlPC=0                                               Premise(F198)
	S71= CtrlPCInc=0                                            Premise(F199)
	S72= PC[Out]=addr+4                                         PC-Hold(S62,S70,S71)
	S73= CtrlICache=0                                           Premise(F201)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S73)
	S75= CtrlConditionReg_DMMU1=1                               Premise(F218)
	S76= [ConditionReg_DMMU1]=FPConditionCode(cc,0)             ConditionReg_DMMU1-Write(S69,S75)

MEM(DMMU1)	S77= ConditionReg_DMMU1.Out=FPConditionCode(cc,0)           ConditionReg_DMMU1-Out(S76)
	S78= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In          Premise(F233)
	S79= ConditionReg_DMMU2.In=FPConditionCode(cc,0)            Path(S77,S78)
	S80= CtrlPC=0                                               Premise(F240)
	S81= CtrlPCInc=0                                            Premise(F241)
	S82= PC[Out]=addr+4                                         PC-Hold(S72,S80,S81)
	S83= CtrlICache=0                                           Premise(F243)
	S84= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S83)
	S85= CtrlConditionReg_DMMU2=1                               Premise(F264)
	S86= [ConditionReg_DMMU2]=FPConditionCode(cc,0)             ConditionReg_DMMU2-Write(S79,S85)

MEM(DMMU2)	S87= ConditionReg_DMMU2.Out=FPConditionCode(cc,0)           ConditionReg_DMMU2-Out(S86)
	S88= ConditionReg_DMMU2.Out=>ConditionReg_WB.In             Premise(F272)
	S89= ConditionReg_WB.In=FPConditionCode(cc,0)               Path(S87,S88)
	S90= CtrlPC=0                                               Premise(F279)
	S91= CtrlPCInc=0                                            Premise(F280)
	S92= PC[Out]=addr+4                                         PC-Hold(S82,S90,S91)
	S93= CtrlICache=0                                           Premise(F282)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S93)
	S95= CtrlConditionReg_WB=1                                  Premise(F300)
	S96= [ConditionReg_WB]=FPConditionCode(cc,0)                ConditionReg_WB-Write(S89,S95)

WB	S97= CtrlPC=0                                               Premise(F317)
	S98= CtrlPCInc=0                                            Premise(F318)
	S99= PC[Out]=addr+4                                         PC-Hold(S92,S97,S98)
	S100= CtrlICache=0                                          Premise(F320)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S100)
	S102= CtrlConditionReg_WB=0                                 Premise(F338)
	S103= [ConditionReg_WB]=FPConditionCode(cc,0)               ConditionReg_WB-Hold(S96,S102)

POST	S99= PC[Out]=addr+4                                         PC-Hold(S92,S97,S98)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S100)
	S103= [ConditionReg_WB]=FPConditionCode(cc,0)               ConditionReg_WB-Hold(S96,S102)

