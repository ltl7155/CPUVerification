
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={36,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= DCache[base+{16{offset[15]},offset}]=a                  Premise(F5)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F7)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F8)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F20)
	S15= CtrlPCInc=0                                            Premise(F21)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F22)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F26)
	S20= IMem[{pid,addr}]={36,rS,rT,offset}                     IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F28)
	S22= GPR[rS]=base                                           GPR-Hold(S3,S21)
	S23= CtrlDCache=0                                           Premise(F34)
	S24= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S4,S23)

IF(IMMU)	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= IAddrReg.Out=>IMem.RAddr                               Premise(F41)
	S28= IMem.RAddr={pid,addr}                                  Path(S26,S27)
	S29= IMem.Out={36,rS,rT,offset}                             IMem-Read(S28,S20)
	S30= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S28,S20)
	S31= IMem.Out=>IRMux.MemData                                Premise(F42)
	S32= IRMux.MemData={36,rS,rT,offset}                        Path(S29,S31)
	S33= IRMux.Out={36,rS,rT,offset}                            IRMux-Select2(S32)
	S34= IRMux.Out=>IR.In                                       Premise(F46)
	S35= IR.In={36,rS,rT,offset}                                Path(S33,S34)
	S36= IMem.MEM8WordOut=>ICache.WData                         Premise(F47)
	S37= ICache.WData=IMemGet8Word({pid,addr})                  Path(S30,S36)
	S38= PC.Out=>ICache.IEA                                     Premise(F48)
	S39= ICache.IEA=addr                                        Path(S25,S38)
	S40= CtrlPC=0                                               Premise(F54)
	S41= CtrlPCInc=1                                            Premise(F55)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F57)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S39,S37,S43)
	S45= CtrlIR=1                                               Premise(F58)
	S46= [IR]={36,rS,rT,offset}                                 IR-Write(S35,S45)
	S47= CtrlGPR=0                                              Premise(F62)
	S48= GPR[rS]=base                                           GPR-Hold(S22,S47)
	S49= CtrlDCache=0                                           Premise(F68)
	S50= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S24,S49)

ID	S51= IR.Out25_21=rS                                         IR-Out(S46)
	S52= IR.Out15_0=offset                                      IR-Out(S46)
	S53= IR.Out25_21=>GPR.RReg1                                 Premise(F74)
	S54= GPR.RReg1=rS                                           Path(S51,S53)
	S55= GPR.Rdata1=base                                        GPR-Read(S54,S48)
	S56= IR.Out15_0=>IMMEXT.In                                  Premise(F75)
	S57= IMMEXT.In=offset                                       Path(S52,S56)
	S58= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S57)
	S59= GPR.Rdata1=>A.In                                       Premise(F76)
	S60= A.In=base                                              Path(S55,S59)
	S61= IMMEXT.Out=>B.In                                       Premise(F77)
	S62= B.In={16{offset[15]},offset}                           Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F83)
	S64= CtrlPCInc=0                                            Premise(F84)
	S65= PC[Out]=addr+4                                         PC-Hold(S42,S63,S64)
	S66= CtrlICache=0                                           Premise(F86)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S66)
	S68= CtrlIR=0                                               Premise(F87)
	S69= [IR]={36,rS,rT,offset}                                 IR-Hold(S46,S68)
	S70= CtrlA=1                                                Premise(F92)
	S71= [A]=base                                               A-Write(S60,S70)
	S72= CtrlB=1                                                Premise(F93)
	S73= [B]={16{offset[15]},offset}                            B-Write(S62,S72)
	S74= CtrlDCache=0                                           Premise(F97)
	S75= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S50,S74)

EX	S76= A.Out=base                                             A-Out(S71)
	S77= B.Out={16{offset[15]},offset}                          B-Out(S73)
	S78= A.Out=>ALU.A                                           Premise(F102)
	S79= ALU.A=base                                             Path(S76,S78)
	S80= B.Out=>ALU.B                                           Premise(F103)
	S81= ALU.B={16{offset[15]},offset}                          Path(S77,S80)
	S82= ALU.Out=base+{16{offset[15]},offset}                   ALU(S79,S81)
	S83= ALU.Out=>ALUOut.In                                     Premise(F105)
	S84= ALUOut.In=base+{16{offset[15]},offset}                 Path(S82,S83)
	S85= CtrlPC=0                                               Premise(F111)
	S86= CtrlPCInc=0                                            Premise(F112)
	S87= PC[Out]=addr+4                                         PC-Hold(S65,S85,S86)
	S88= CtrlICache=0                                           Premise(F114)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S88)
	S90= CtrlIR=0                                               Premise(F115)
	S91= [IR]={36,rS,rT,offset}                                 IR-Hold(S69,S90)
	S92= CtrlALUOut=1                                           Premise(F122)
	S93= [ALUOut]=base+{16{offset[15]},offset}                  ALUOut-Write(S84,S92)
	S94= CtrlDCache=0                                           Premise(F125)
	S95= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S75,S94)

MEM	S96= ALUOut.Out=base+{16{offset[15]},offset}                ALUOut-Out(S93)
	S97= ALUOut.Out=>DCache.IEA                                 Premise(F134)
	S98= DCache.IEA=base+{16{offset[15]},offset}                Path(S96,S97)
	S99= DCache.Out=a                                           DCache-Search(S98,S95)
	S100= DCache.Out=>DR.In                                     Premise(F136)
	S101= DR.In=a                                               Path(S99,S100)
	S102= CtrlPC=0                                              Premise(F143)
	S103= CtrlPCInc=0                                           Premise(F144)
	S104= PC[Out]=addr+4                                        PC-Hold(S87,S102,S103)
	S105= CtrlICache=0                                          Premise(F146)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S89,S105)
	S107= CtrlIR=0                                              Premise(F147)
	S108= [IR]={36,rS,rT,offset}                                IR-Hold(S91,S107)
	S109= CtrlALUOut=0                                          Premise(F154)
	S110= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S93,S109)
	S111= CtrlDR=1                                              Premise(F159)
	S112= [DR]=a                                                DR-Write(S101,S111)

WB	S113= IR.Out20_16=rT                                        IR-Out(S108)
	S114= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]     ALUOut-Out(S110)
	S115= DR.Out=a                                              DR-Out(S112)
	S116= IR.Out20_16=>GPR.WReg                                 Premise(F210)
	S117= GPR.WReg=rT                                           Path(S113,S116)
	S118= DR.Out=>MemDataSelL.In                                Premise(F211)
	S119= MemDataSelL.In=a                                      Path(S115,S118)
	S120= ALUOut.Out1_0=>MemDataSelL.Addr                       Premise(F212)
	S121= MemDataSelL.Addr={base+{16{offset[15]},offset}}[1:0]  Path(S114,S120)
	S122= MemDataSelL.Out={24{0},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}MemDataSelL(S119,S121)
	S123= MemDataSelL.Out=>GPR.WData                            Premise(F214)
	S124= GPR.WData={24{0},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}Path(S122,S123)
	S125= CtrlPC=0                                              Premise(F220)
	S126= CtrlPCInc=0                                           Premise(F221)
	S127= PC[Out]=addr+4                                        PC-Hold(S104,S125,S126)
	S128= CtrlICache=0                                          Premise(F223)
	S129= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S128)
	S130= CtrlGPR=1                                             Premise(F228)
	S131= GPR[rT]={24{0},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S117,S124,S130)

POST	S127= PC[Out]=addr+4                                        PC-Hold(S104,S125,S126)
	S129= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S128)
	S131= GPR[rT]={24{0},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S117,S124,S130)

