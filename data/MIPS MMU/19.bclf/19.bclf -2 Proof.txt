
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={17,8,cc,0,0,offset}                       Premise(F3)

IF	S2= PC.Out=addr                                             PC-Out(S0)
	S3= PC.Out=>ICache.IEA                                      Premise(F8)
	S4= ICache.IEA=addr                                         Path(S2,S3)
	S5= ICache.Out={17,8,cc,0,0,offset}                         ICache-Search(S4,S1)
	S6= ICache.Out=>IR.In                                       Premise(F9)
	S7= IR.In={17,8,cc,0,0,offset}                              Path(S5,S6)
	S8= CtrlPC=0                                                Premise(F17)
	S9= CtrlPCInc=1                                             Premise(F18)
	S10= PC[CIA]=addr                                           PC-Inc(S0,S8,S9)
	S11= CtrlIR=1                                               Premise(F21)
	S12= [IR]={17,8,cc,0,0,offset}                              IR-Write(S7,S11)

ID	S13= IR.Out15_0=offset                                      IR-Out(S12)
	S14= IR.Out15_0=>SEXT.In                                    Premise(F48)
	S15= SEXT.In=offset                                         Path(S13,S14)
	S16= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S15)
	S17= SEXT.Out=>A.In                                         Premise(F49)
	S18= A.In={14{offset[15]},offset,2{0}}                      Path(S16,S17)
	S19= CtrlPCInc=0                                            Premise(F56)
	S20= PC[CIA]=addr                                           PC-Hold(S10,S19)
	S21= CtrlA=1                                                Premise(F63)
	S22= [A]={14{offset[15]},offset,2{0}}                       A-Write(S18,S21)

EX	S23= PC.CIA=addr                                            PC-Out(S20)
	S24= A.Out={14{offset[15]},offset,2{0}}                     A-Out(S22)
	S25= PC.CIA=>ALU.A                                          Premise(F67)
	S26= ALU.A=addr                                             Path(S23,S25)
	S27= A.Out=>ALU.B                                           Premise(F68)
	S28= ALU.B={14{offset[15]},offset,2{0}}                     Path(S24,S27)
	S29= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S26,S28)
	S30= ALU.Out=>ALUOut.In                                     Premise(F70)
	S31= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S29,S30)
	S32= CtrlALUOut=1                                           Premise(F85)
	S33= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S31,S32)

MEM	S34= CtrlALUOut=0                                           Premise(F105)
	S35= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Hold(S33,S34)

WB	S36= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S35)
	S37= ALUOut.Out=>PC.In                                      Premise(F142)
	S38= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S36,S37)
	S39= CtrlPC=1                                               Premise(F149)
	S40= CtrlPCInc=0                                            Premise(F150)
	S41= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S38,S39,S40)

POST	S41= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S38,S39,S40)

