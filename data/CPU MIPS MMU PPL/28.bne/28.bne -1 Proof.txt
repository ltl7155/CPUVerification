
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F64)
	S6= PC.Out=>IMMU.IEA                                        Premise(F69)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F70)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlPC=0                                               Premise(F111)
	S13= CtrlPCInc=0                                            Premise(F112)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F135)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F136)
	S18= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F143)
	S20= GPR[rT]=b                                              Premise(F144)

IMMU	S21= PC.Out=addr                                            PC-Out(S14)
	S22= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S23= PC.Out=>ICache.IEA                                     Premise(F207)
	S24= ICache.IEA=addr                                        Path(S21,S23)
	S25= IMem.MEM8WordOut=>ICache.WData                         Premise(F209)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F213)
	S27= IMem.RAddr={pid,addr}                                  Path(S22,S26)
	S28= IMem.Out={5,rS,rT,offset}                              IMem-Read(S27,S18)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S18)
	S30= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S25)
	S31= IMem.Out=>IRMux.MemData                                Premise(F216)
	S32= IRMux.MemData={5,rS,rT,offset}                         Path(S28,S31)
	S33= IRMux.Out={5,rS,rT,offset}                             IRMux-Select2(S32)
	S34= IRMux.Out=>IR_ID.In                                    Premise(F222)
	S35= IR_ID.In={5,rS,rT,offset}                              Path(S33,S34)
	S36= CtrlPC=0                                               Premise(F253)
	S37= CtrlPCInc=1                                            Premise(F254)
	S38= PC[CIA]=addr                                           PC-Inc(S14,S36,S37)
	S39= CtrlICache=1                                           Premise(F263)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S24,S30,S39)
	S41= CtrlIR_ID=1                                            Premise(F272)
	S42= [IR_ID]={5,rS,rT,offset}                               IR_ID-Write(S35,S41)
	S43= CtrlGPR=0                                              Premise(F276)
	S44= GPR[rS]=a                                              GPR-Hold(S19,S43)
	S45= GPR[rT]=b                                              GPR-Hold(S20,S43)

ID	S46= IR_ID.Out={5,rS,rT,offset}                             IR-Out(S42)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S42)
	S48= IR_ID.Out20_16=rT                                      IR-Out(S42)
	S49= FU.OutID1=>A_EX.In                                     Premise(F289)
	S50= FU.OutID2=>B_EX.In                                     Premise(F291)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F340)
	S52= GPR.Rdata2=>FU.InID2                                   Premise(F342)
	S53= IR_ID.Out25_21=>GPR.RReg1                              Premise(F344)
	S54= GPR.RReg1=rS                                           Path(S47,S53)
	S55= GPR.Rdata1=a                                           GPR-Read(S54,S44)
	S56= FU.InID1=a                                             Path(S55,S51)
	S57= FU.OutID1=FU(a)                                        FU-Forward(S56)
	S58= A_EX.In=FU(a)                                          Path(S57,S49)
	S59= IR_ID.Out20_16=>GPR.RReg2                              Premise(F345)
	S60= GPR.RReg2=rT                                           Path(S48,S59)
	S61= GPR.Rdata2=b                                           GPR-Read(S60,S45)
	S62= FU.InID2=b                                             Path(S61,S52)
	S63= FU.OutID2=FU(b)                                        FU-Forward(S62)
	S64= B_EX.In=FU(b)                                          Path(S63,S50)
	S65= IR_ID.Out=>IR_EX.In                                    Premise(F360)
	S66= IR_EX.In={5,rS,rT,offset}                              Path(S46,S65)
	S67= CtrlPCInc=0                                            Premise(F394)
	S68= PC[CIA]=addr                                           PC-Hold(S38,S67)
	S69= CtrlA_EX=1                                             Premise(F397)
	S70= [A_EX]=FU(a)                                           A_EX-Write(S58,S69)
	S71= CtrlB_EX=1                                             Premise(F400)
	S72= [B_EX]=FU(b)                                           B_EX-Write(S64,S71)
	S73= CtrlICache=0                                           Premise(F403)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S73)
	S75= CtrlIR_EX=1                                            Premise(F411)
	S76= [IR_EX]={5,rS,rT,offset}                               IR_EX-Write(S66,S75)

EX	S77= PC.CIA=addr                                            PC-Out(S68)
	S78= A_EX.Out=FU(a)                                         A_EX-Out(S70)
	S79= B_EX.Out=FU(b)                                         B_EX-Out(S72)
	S80= IR_EX.Out15_0=offset                                   IR_EX-Out(S76)
	S81= PC.CIA=>ALU.A                                          Premise(F425)
	S82= ALU.A=addr                                             Path(S77,S81)
	S83= SEXT.Out=>ALU.B                                        Premise(F426)
	S84= ALU.Out=>ALUOut_MEM.In                                 Premise(F428)
	S85= A_EX.Out=>CMPU.A                                       Premise(F434)
	S86= CMPU.A=FU(a)                                           Path(S78,S85)
	S87= B_EX.Out=>CMPU.B                                       Premise(F435)
	S88= CMPU.B=FU(b)                                           Path(S79,S87)
	S89= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S86,S88)
	S90= CMPU.zero=>ConditionReg_MEM.In                         Premise(F470)
	S91= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S89,S90)
	S92= IR_EX.Out15_0=>SEXT.In                                 Premise(F511)
	S93= SEXT.In=offset                                         Path(S80,S92)
	S94= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S93)
	S95= ALU.B={14{offset[15]},offset,2{0}}                     Path(S94,S83)
	S96= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S82,S95)
	S97= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S96,S84)
	S98= CtrlALUOut_MEM=1                                       Premise(F538)
	S99= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S97,S98)
	S100= CtrlICache=0                                          Premise(F546)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S74,S100)
	S102= CtrlConditionReg_MEM=1                                Premise(F548)
	S103= [ConditionReg_MEM]=CompareS(FU(a),FU(b))              ConditionReg_MEM-Write(S91,S102)

MEM	S104= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}      ALUOut_MEM-Out(S99)
	S105= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))            ConditionReg_MEM-Out(S103)
	S106= ConditionReg_MEM.Out=>ConditionReg_WB.In              Premise(F613)
	S107= ConditionReg_WB.In=CompareS(FU(a),FU(b))              Path(S105,S106)
	S108= ALUOut_MEM.Out=>PC.In                                 Premise(F651)
	S109= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S104,S108)
	S110= CtrlPC=1                                              Premise(F677)
	S111= CtrlPCInc=0                                           Premise(F678)
	S112= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S109,S110,S111)
	S113= CtrlICache=0                                          Premise(F687)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S113)
	S115= CtrlConditionReg_WB=1                                 Premise(F692)
	S116= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Write(S107,S115)

WB	S117= CtrlPC=0                                              Premise(F1100)
	S118= CtrlPCInc=0                                           Premise(F1101)
	S119= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S117,S118)
	S120= CtrlICache=0                                          Premise(F1110)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S120)
	S122= CtrlConditionReg_WB=0                                 Premise(F1115)
	S123= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S116,S122)

POST	S119= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S117,S118)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S120)
	S123= [ConditionReg_WB]=CompareS(FU(a),FU(b))               ConditionReg_WB-Hold(S116,S122)

