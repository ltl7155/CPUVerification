
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,19}                            Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={0,rS,0,19}                           IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F44)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,rS,0,19}                                   IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F45)
	S29= IRMux.MemData={0,rS,0,19}                              Path(S26,S28)
	S30= IRMux.Out={0,rS,0,19}                                  IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F49)
	S32= IR_ID.In={0,rS,0,19}                                   Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F50)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F51)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F59)
	S38= CtrlPCInc=1                                            Premise(F60)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F62)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F65)
	S43= [IR_ID]={0,rS,0,19}                                    IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F68)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out25_21=rS                                      IR-Out(S43)
	S47= IR_ID.Out25_21=>GPR.RReg1                              Premise(F79)
	S48= GPR.RReg1=rS                                           Path(S46,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S45)
	S50= GPR.Rdata1=>FU.InID1                                   Premise(F81)
	S51= FU.InID1=a                                             Path(S49,S50)
	S52= FU.OutID1=FU(a)                                        FU-Forward(S51)
	S53= FU.OutID1=>Lo.In                                       Premise(F83)
	S54= Lo.In=FU(a)                                            Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F93)
	S56= CtrlPCInc=0                                            Premise(F94)
	S57= PC[Out]=addr+4                                         PC-Hold(S39,S55,S56)
	S58= CtrlICache=0                                           Premise(F96)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S58)
	S60= CtrlLo=1                                               Premise(F103)
	S61= [Lo]=FU(a)                                             Lo-Write(S54,S60)

EX	S62= CtrlPC=0                                               Premise(F121)
	S63= CtrlPCInc=0                                            Premise(F122)
	S64= PC[Out]=addr+4                                         PC-Hold(S57,S62,S63)
	S65= CtrlICache=0                                           Premise(F124)
	S66= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S65)
	S67= CtrlLo=0                                               Premise(F131)
	S68= [Lo]=FU(a)                                             Lo-Hold(S61,S67)

MEM	S69= CtrlPC=0                                               Premise(F154)
	S70= CtrlPCInc=0                                            Premise(F155)
	S71= PC[Out]=addr+4                                         PC-Hold(S64,S69,S70)
	S72= CtrlICache=0                                           Premise(F157)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S66,S72)
	S74= CtrlLo=0                                               Premise(F164)
	S75= [Lo]=FU(a)                                             Lo-Hold(S68,S74)

MEM(DMMU1)	S76= CtrlPC=0                                               Premise(F185)
	S77= CtrlPCInc=0                                            Premise(F186)
	S78= PC[Out]=addr+4                                         PC-Hold(S71,S76,S77)
	S79= CtrlICache=0                                           Premise(F188)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S79)
	S81= CtrlLo=0                                               Premise(F195)
	S82= [Lo]=FU(a)                                             Lo-Hold(S75,S81)

MEM(DMMU2)	S83= CtrlPC=0                                               Premise(F213)
	S84= CtrlPCInc=0                                            Premise(F214)
	S85= PC[Out]=addr+4                                         PC-Hold(S78,S83,S84)
	S86= CtrlICache=0                                           Premise(F216)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S80,S86)
	S88= CtrlLo=0                                               Premise(F223)
	S89= [Lo]=FU(a)                                             Lo-Hold(S82,S88)

WB	S90= CtrlPC=0                                               Premise(F238)
	S91= CtrlPCInc=0                                            Premise(F239)
	S92= PC[Out]=addr+4                                         PC-Hold(S85,S90,S91)
	S93= CtrlICache=0                                           Premise(F241)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S93)
	S95= CtrlLo=0                                               Premise(F248)
	S96= [Lo]=FU(a)                                             Lo-Hold(S89,S95)

POST	S92= PC[Out]=addr+4                                         PC-Hold(S85,S90,S91)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S93)
	S96= [Lo]=FU(a)                                             Lo-Hold(S89,S95)

