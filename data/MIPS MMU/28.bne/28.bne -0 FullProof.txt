
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Hit=IMMUHit(pid,addr)                             IMMU-Search(S8,S10)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S14= IAddrReg.In={pid,addr}                                 Path(S11,S13)
	S15= IMMU.Hit=>CU.IMMUHit                                   Premise(F8)
	S16= CU.IMMUHit=IMMUHit(pid,addr)                           Path(S12,S15)
	S17= PC.Out=>ICache.IEA                                     Premise(F9)
	S18= ICache.IEA=addr                                        Path(S6,S17)
	S19= ICache.Hit=ICacheHit(addr)                             ICache-Search(S18)
	S20= ICache.Out=>IR.In                                      Premise(F10)
	S21= ICache.Out=>ICacheReg.In                               Premise(F11)
	S22= ICache.Hit=>CU.ICacheHit                               Premise(F12)
	S23= CU.ICacheHit=ICacheHit(addr)                           Path(S19,S22)
	S24= CtrlASIDIn=0                                           Premise(F13)
	S25= CtrlCP0=0                                              Premise(F14)
	S26= CP0[ASID]=pid                                          CP0-Hold(S0,S25)
	S27= CtrlEPCIn=0                                            Premise(F15)
	S28= CtrlExCodeIn=0                                         Premise(F16)
	S29= CtrlIMMU=0                                             Premise(F17)
	S30= CtrlPC=0                                               Premise(F18)
	S31= CtrlPCInc=0                                            Premise(F19)
	S32= PC[Out]=addr                                           PC-Hold(S1,S30,S31)
	S33= CtrlIAddrReg=1                                         Premise(F20)
	S34= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S33)
	S35= CtrlICache=0                                           Premise(F21)
	S36= CtrlIR=0                                               Premise(F22)
	S37= CtrlICacheReg=1                                        Premise(F23)
	S38= CtrlIMem=0                                             Premise(F24)
	S39= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S38)
	S40= CtrlIRMux=0                                            Premise(F25)
	S41= CtrlGPR=0                                              Premise(F26)
	S42= GPR[rS]=a                                              GPR-Hold(S3,S41)
	S43= GPR[rT]=b                                              GPR-Hold(S4,S41)
	S44= CtrlA=0                                                Premise(F27)
	S45= CtrlB=0                                                Premise(F28)
	S46= CtrlALUOut=0                                           Premise(F29)
	S47= CtrlConditionReg=0                                     Premise(F30)

IF(IMMU)	S48= CP0.ASID=pid                                           CP0-Read-ASID(S26)
	S49= PC.Out=addr                                            PC-Out(S32)
	S50= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S34)
	S51= IAddrReg.Out1_0={{pid,addr}}[1:0]                      IAddrReg-Out(S34)
	S52= IAddrReg.Out4_0={{pid,addr}}[4:0]                      IAddrReg-Out(S34)
	S53= CU.IMMUHit=>CU.IMMUHit                                 Premise(F31)
	S54= CU.ICacheHit=>CU.ICacheHit                             Premise(F32)
	S55= IAddrReg.Out=>IMem.RAddr                               Premise(F33)
	S56= IMem.RAddr={pid,addr}                                  Path(S50,S55)
	S57= IMem.Out={5,rS,rT,offset}                              IMem-Read(S56,S39)
	S58= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S56,S39)
	S59= IMem.Out=>IRMux.MemData                                Premise(F34)
	S60= IRMux.MemData={5,rS,rT,offset}                         Path(S57,S59)
	S61= IRMux.Out={5,rS,rT,offset}                             IRMux-Select2(S60)
	S62= ICacheReg.Out=>IRMux.CacheData                         Premise(F35)
	S63= CU.IMMUHit=>IRMux.MemSel                               Premise(F36)
	S64= CU.ICacheHit=>IRMux.CacheSel                           Premise(F37)
	S65= IRMux.Out=>IR.In                                       Premise(F38)
	S66= IR.In={5,rS,rT,offset}                                 Path(S61,S65)
	S67= IMem.MEM8WordOut=>ICache.WData                         Premise(F39)
	S68= ICache.WData=IMemGet8Word({pid,addr})                  Path(S58,S67)
	S69= PC.Out=>ICache.IEA                                     Premise(F40)
	S70= ICache.IEA=addr                                        Path(S49,S69)
	S71= ICache.Hit=ICacheHit(addr)                             ICache-Search(S70)
	S72= CtrlASIDIn=0                                           Premise(F41)
	S73= CtrlCP0=0                                              Premise(F42)
	S74= CP0[ASID]=pid                                          CP0-Hold(S26,S73)
	S75= CtrlEPCIn=0                                            Premise(F43)
	S76= CtrlExCodeIn=0                                         Premise(F44)
	S77= CtrlIMMU=0                                             Premise(F45)
	S78= CtrlPC=0                                               Premise(F46)
	S79= CtrlPCInc=1                                            Premise(F47)
	S80= PC[Out]=addr+4                                         PC-Inc(S32,S78,S79)
	S81= PC[CIA]=addr                                           PC-Inc(S32,S78,S79)
	S82= CtrlIAddrReg=0                                         Premise(F48)
	S83= [IAddrReg]={pid,addr}                                  IAddrReg-Hold(S34,S82)
	S84= CtrlICache=1                                           Premise(F49)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S70,S68,S84)
	S86= CtrlIR=1                                               Premise(F50)
	S87= [IR]={5,rS,rT,offset}                                  IR-Write(S66,S86)
	S88= CtrlICacheReg=0                                        Premise(F51)
	S89= CtrlIMem=0                                             Premise(F52)
	S90= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S39,S89)
	S91= CtrlIRMux=0                                            Premise(F53)
	S92= CtrlGPR=0                                              Premise(F54)
	S93= GPR[rS]=a                                              GPR-Hold(S42,S92)
	S94= GPR[rT]=b                                              GPR-Hold(S43,S92)
	S95= CtrlA=0                                                Premise(F55)
	S96= CtrlB=0                                                Premise(F56)
	S97= CtrlALUOut=0                                           Premise(F57)
	S98= CtrlConditionReg=0                                     Premise(F58)

ID	S99= CP0.ASID=pid                                           CP0-Read-ASID(S74)
	S100= PC.Out=addr+4                                         PC-Out(S80)
	S101= PC.CIA=addr                                           PC-Out(S81)
	S102= PC.CIA31_28=addr[31:28]                               PC-Out(S81)
	S103= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S83)
	S104= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S83)
	S105= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S83)
	S106= IR.Out={5,rS,rT,offset}                               IR-Out(S87)
	S107= IR.Out31_26=5                                         IR-Out(S87)
	S108= IR.Out25_21=rS                                        IR-Out(S87)
	S109= IR.Out20_16=rT                                        IR-Out(S87)
	S110= IR.Out15_0=offset                                     IR-Out(S87)
	S111= IR.Out31_26=>CU.Op                                    Premise(F59)
	S112= CU.Op=5                                               Path(S107,S111)
	S113= IR.Out25_21=>GPR.RReg1                                Premise(F60)
	S114= GPR.RReg1=rS                                          Path(S108,S113)
	S115= GPR.Rdata1=a                                          GPR-Read(S114,S93)
	S116= IR.Out20_16=>GPR.RReg2                                Premise(F61)
	S117= GPR.RReg2=rT                                          Path(S109,S116)
	S118= GPR.Rdata2=b                                          GPR-Read(S117,S94)
	S119= GPR.Rdata1=>A.In                                      Premise(F62)
	S120= A.In=a                                                Path(S115,S119)
	S121= GPR.Rdata2=>B.In                                      Premise(F63)
	S122= B.In=b                                                Path(S118,S121)
	S123= CtrlASIDIn=0                                          Premise(F64)
	S124= CtrlCP0=0                                             Premise(F65)
	S125= CP0[ASID]=pid                                         CP0-Hold(S74,S124)
	S126= CtrlEPCIn=0                                           Premise(F66)
	S127= CtrlExCodeIn=0                                        Premise(F67)
	S128= CtrlIMMU=0                                            Premise(F68)
	S129= CtrlPC=0                                              Premise(F69)
	S130= CtrlPCInc=0                                           Premise(F70)
	S131= PC[CIA]=addr                                          PC-Hold(S81,S130)
	S132= PC[Out]=addr+4                                        PC-Hold(S80,S129,S130)
	S133= CtrlIAddrReg=0                                        Premise(F71)
	S134= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S83,S133)
	S135= CtrlICache=0                                          Premise(F72)
	S136= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S85,S135)
	S137= CtrlIR=0                                              Premise(F73)
	S138= [IR]={5,rS,rT,offset}                                 IR-Hold(S87,S137)
	S139= CtrlICacheReg=0                                       Premise(F74)
	S140= CtrlIMem=0                                            Premise(F75)
	S141= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S90,S140)
	S142= CtrlIRMux=0                                           Premise(F76)
	S143= CtrlGPR=0                                             Premise(F77)
	S144= GPR[rS]=a                                             GPR-Hold(S93,S143)
	S145= GPR[rT]=b                                             GPR-Hold(S94,S143)
	S146= CtrlA=1                                               Premise(F78)
	S147= [A]=a                                                 A-Write(S120,S146)
	S148= CtrlB=1                                               Premise(F79)
	S149= [B]=b                                                 B-Write(S122,S148)
	S150= CtrlALUOut=0                                          Premise(F80)
	S151= CtrlConditionReg=0                                    Premise(F81)

EX	S152= CP0.ASID=pid                                          CP0-Read-ASID(S125)
	S153= PC.CIA=addr                                           PC-Out(S131)
	S154= PC.CIA31_28=addr[31:28]                               PC-Out(S131)
	S155= PC.Out=addr+4                                         PC-Out(S132)
	S156= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S134)
	S157= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S134)
	S158= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S134)
	S159= IR.Out={5,rS,rT,offset}                               IR-Out(S138)
	S160= IR.Out31_26=5                                         IR-Out(S138)
	S161= IR.Out25_21=rS                                        IR-Out(S138)
	S162= IR.Out20_16=rT                                        IR-Out(S138)
	S163= IR.Out15_0=offset                                     IR-Out(S138)
	S164= A.Out=a                                               A-Out(S147)
	S165= A.Out1_0={a}[1:0]                                     A-Out(S147)
	S166= A.Out4_0={a}[4:0]                                     A-Out(S147)
	S167= B.Out=b                                               B-Out(S149)
	S168= B.Out1_0={b}[1:0]                                     B-Out(S149)
	S169= B.Out4_0={b}[4:0]                                     B-Out(S149)
	S170= IR.Out15_0=>SEXT.In                                   Premise(F82)
	S171= SEXT.In=offset                                        Path(S163,S170)
	S172= SEXT.Out={14{offset[15]},offset,2{0}}                 SEXT(S171)
	S173= PC.CIA=>ALU.A                                         Premise(F83)
	S174= ALU.A=addr                                            Path(S153,S173)
	S175= SEXT.Out=>ALU.B                                       Premise(F84)
	S176= ALU.B={14{offset[15]},offset,2{0}}                    Path(S172,S175)
	S177= ALU.Func=6'b010010                                    Premise(F85)
	S178= ALU.Out=addr+{14{offset[15]},offset,2{0}}             ALU(S174,S176)
	S179= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]   ALU(S174,S176)
	S180= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})   ALU(S174,S176)
	S181= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})    ALU(S174,S176)
	S182= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})       ALU(S174,S176)
	S183= ALU.Out=>ALUOut.In                                    Premise(F86)
	S184= ALUOut.In=addr+{14{offset[15]},offset,2{0}}           Path(S178,S183)
	S185= A.Out=>CMPU.A                                         Premise(F87)
	S186= CMPU.A=a                                              Path(S164,S185)
	S187= B.Out=>CMPU.B                                         Premise(F88)
	S188= CMPU.B=b                                              Path(S167,S187)
	S189= CMPU.Func=6'b000011                                   Premise(F89)
	S190= CMPU.Out=CompareS(a,b)                                CMPU-CMPS(S186,S188)
	S191= CMPU.zero=CompareS(a,b)                               CMPU-CMPS(S186,S188)
	S192= CMPU.gt=CompareS(a,b)                                 CMPU-CMPS(S186,S188)
	S193= CMPU.lt=CompareS(a,b)                                 CMPU-CMPS(S186,S188)
	S194= CMPU.zero=>ConditionReg.In                            Premise(F90)
	S195= ConditionReg.In=CompareS(a,b)                         Path(S191,S194)
	S196= CtrlASIDIn=0                                          Premise(F91)
	S197= CtrlCP0=0                                             Premise(F92)
	S198= CP0[ASID]=pid                                         CP0-Hold(S125,S197)
	S199= CtrlEPCIn=0                                           Premise(F93)
	S200= CtrlExCodeIn=0                                        Premise(F94)
	S201= CtrlIMMU=0                                            Premise(F95)
	S202= CtrlPC=0                                              Premise(F96)
	S203= CtrlPCInc=0                                           Premise(F97)
	S204= PC[CIA]=addr                                          PC-Hold(S131,S203)
	S205= PC[Out]=addr+4                                        PC-Hold(S132,S202,S203)
	S206= CtrlIAddrReg=0                                        Premise(F98)
	S207= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S134,S206)
	S208= CtrlICache=0                                          Premise(F99)
	S209= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S136,S208)
	S210= CtrlIR=0                                              Premise(F100)
	S211= [IR]={5,rS,rT,offset}                                 IR-Hold(S138,S210)
	S212= CtrlICacheReg=0                                       Premise(F101)
	S213= CtrlIMem=0                                            Premise(F102)
	S214= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S141,S213)
	S215= CtrlIRMux=0                                           Premise(F103)
	S216= CtrlGPR=0                                             Premise(F104)
	S217= GPR[rS]=a                                             GPR-Hold(S144,S216)
	S218= GPR[rT]=b                                             GPR-Hold(S145,S216)
	S219= CtrlA=0                                               Premise(F105)
	S220= [A]=a                                                 A-Hold(S147,S219)
	S221= CtrlB=0                                               Premise(F106)
	S222= [B]=b                                                 B-Hold(S149,S221)
	S223= CtrlALUOut=1                                          Premise(F107)
	S224= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Write(S184,S223)
	S225= CtrlConditionReg=1                                    Premise(F108)
	S226= [ConditionReg]=CompareS(a,b)                          ConditionReg-Write(S195,S225)

MEM	S227= CP0.ASID=pid                                          CP0-Read-ASID(S198)
	S228= PC.CIA=addr                                           PC-Out(S204)
	S229= PC.CIA31_28=addr[31:28]                               PC-Out(S204)
	S230= PC.Out=addr+4                                         PC-Out(S205)
	S231= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S207)
	S232= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S207)
	S233= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S207)
	S234= IR.Out={5,rS,rT,offset}                               IR-Out(S211)
	S235= IR.Out31_26=5                                         IR-Out(S211)
	S236= IR.Out25_21=rS                                        IR-Out(S211)
	S237= IR.Out20_16=rT                                        IR-Out(S211)
	S238= IR.Out15_0=offset                                     IR-Out(S211)
	S239= A.Out=a                                               A-Out(S220)
	S240= A.Out1_0={a}[1:0]                                     A-Out(S220)
	S241= A.Out4_0={a}[4:0]                                     A-Out(S220)
	S242= B.Out=b                                               B-Out(S222)
	S243= B.Out1_0={b}[1:0]                                     B-Out(S222)
	S244= B.Out4_0={b}[4:0]                                     B-Out(S222)
	S245= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S224)
	S246= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S224)
	S247= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S224)
	S248= ConditionReg.Out=CompareS(a,b)                        ConditionReg-Out(S226)
	S249= ConditionReg.Out1_0={CompareS(a,b)}[1:0]              ConditionReg-Out(S226)
	S250= ConditionReg.Out4_0={CompareS(a,b)}[4:0]              ConditionReg-Out(S226)
	S251= ALUOut.Out=>PC.In                                     Premise(F109)
	S252= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S245,S251)
	S253= ConditionReg.Out=>CU.zero                             Premise(F110)
	S254= CU.zero=CompareS(a,b)                                 Path(S248,S253)
	S255= CtrlASIDIn=0                                          Premise(F111)
	S256= CtrlCP0=0                                             Premise(F112)
	S257= CP0[ASID]=pid                                         CP0-Hold(S198,S256)
	S258= CtrlEPCIn=0                                           Premise(F113)
	S259= CtrlExCodeIn=0                                        Premise(F114)
	S260= CtrlIMMU=0                                            Premise(F115)
	S261= CtrlPC=0                                              Premise(F116)
	S262= CtrlPCInc=0                                           Premise(F117)
	S263= PC[CIA]=addr                                          PC-Hold(S204,S262)
	S264= PC[Out]=addr+4                                        PC-Hold(S205,S261,S262)
	S265= CtrlIAddrReg=0                                        Premise(F118)
	S266= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S207,S265)
	S267= CtrlICache=0                                          Premise(F119)
	S268= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S209,S267)
	S269= CtrlIR=0                                              Premise(F120)
	S270= [IR]={5,rS,rT,offset}                                 IR-Hold(S211,S269)
	S271= CtrlICacheReg=0                                       Premise(F121)
	S272= CtrlIMem=0                                            Premise(F122)
	S273= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S214,S272)
	S274= CtrlIRMux=0                                           Premise(F123)
	S275= CtrlGPR=0                                             Premise(F124)
	S276= GPR[rS]=a                                             GPR-Hold(S217,S275)
	S277= GPR[rT]=b                                             GPR-Hold(S218,S275)
	S278= CtrlA=0                                               Premise(F125)
	S279= [A]=a                                                 A-Hold(S220,S278)
	S280= CtrlB=0                                               Premise(F126)
	S281= [B]=b                                                 B-Hold(S222,S280)
	S282= CtrlALUOut=0                                          Premise(F127)
	S283= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S224,S282)
	S284= CtrlConditionReg=0                                    Premise(F128)
	S285= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S226,S284)

WB	S286= CP0.ASID=pid                                          CP0-Read-ASID(S257)
	S287= PC.CIA=addr                                           PC-Out(S263)
	S288= PC.CIA31_28=addr[31:28]                               PC-Out(S263)
	S289= PC.Out=addr+4                                         PC-Out(S264)
	S290= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S266)
	S291= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S266)
	S292= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S266)
	S293= IR.Out={5,rS,rT,offset}                               IR-Out(S270)
	S294= IR.Out31_26=5                                         IR-Out(S270)
	S295= IR.Out25_21=rS                                        IR-Out(S270)
	S296= IR.Out20_16=rT                                        IR-Out(S270)
	S297= IR.Out15_0=offset                                     IR-Out(S270)
	S298= A.Out=a                                               A-Out(S279)
	S299= A.Out1_0={a}[1:0]                                     A-Out(S279)
	S300= A.Out4_0={a}[4:0]                                     A-Out(S279)
	S301= B.Out=b                                               B-Out(S281)
	S302= B.Out1_0={b}[1:0]                                     B-Out(S281)
	S303= B.Out4_0={b}[4:0]                                     B-Out(S281)
	S304= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S283)
	S305= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S283)
	S306= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S283)
	S307= ConditionReg.Out=CompareS(a,b)                        ConditionReg-Out(S285)
	S308= ConditionReg.Out1_0={CompareS(a,b)}[1:0]              ConditionReg-Out(S285)
	S309= ConditionReg.Out4_0={CompareS(a,b)}[4:0]              ConditionReg-Out(S285)
	S310= CtrlASIDIn=0                                          Premise(F165)
	S311= CtrlCP0=0                                             Premise(F166)
	S312= CP0[ASID]=pid                                         CP0-Hold(S257,S311)
	S313= CtrlEPCIn=0                                           Premise(F167)
	S314= CtrlExCodeIn=0                                        Premise(F168)
	S315= CtrlIMMU=0                                            Premise(F169)
	S316= CtrlPC=0                                              Premise(F170)
	S317= CtrlPCInc=0                                           Premise(F171)
	S318= PC[CIA]=addr                                          PC-Hold(S263,S317)
	S319= PC[Out]=addr+4                                        PC-Hold(S264,S316,S317)
	S320= CtrlIAddrReg=0                                        Premise(F172)
	S321= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S266,S320)
	S322= CtrlICache=0                                          Premise(F173)
	S323= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S268,S322)
	S324= CtrlIR=0                                              Premise(F174)
	S325= [IR]={5,rS,rT,offset}                                 IR-Hold(S270,S324)
	S326= CtrlICacheReg=0                                       Premise(F175)
	S327= CtrlIMem=0                                            Premise(F176)
	S328= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S273,S327)
	S329= CtrlIRMux=0                                           Premise(F177)
	S330= CtrlGPR=0                                             Premise(F178)
	S331= GPR[rS]=a                                             GPR-Hold(S276,S330)
	S332= GPR[rT]=b                                             GPR-Hold(S277,S330)
	S333= CtrlA=0                                               Premise(F179)
	S334= [A]=a                                                 A-Hold(S279,S333)
	S335= CtrlB=0                                               Premise(F180)
	S336= [B]=b                                                 B-Hold(S281,S335)
	S337= CtrlALUOut=0                                          Premise(F181)
	S338= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S283,S337)
	S339= CtrlConditionReg=0                                    Premise(F182)
	S340= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S285,S339)

POST	S312= CP0[ASID]=pid                                         CP0-Hold(S257,S311)
	S318= PC[CIA]=addr                                          PC-Hold(S263,S317)
	S319= PC[Out]=addr+4                                        PC-Hold(S264,S316,S317)
	S321= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S266,S320)
	S323= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S268,S322)
	S325= [IR]={5,rS,rT,offset}                                 IR-Hold(S270,S324)
	S328= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S273,S327)
	S331= GPR[rS]=a                                             GPR-Hold(S276,S330)
	S332= GPR[rT]=b                                             GPR-Hold(S277,S330)
	S334= [A]=a                                                 A-Hold(S279,S333)
	S336= [B]=b                                                 B-Hold(S281,S335)
	S338= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S283,S337)
	S340= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S285,S339)

