
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={1,rS,0,offset}                            Premise(F3)

IF	S2= PC.Out=addr                                             PC-Out(S0)
	S3= PC.Out=>ICache.IEA                                      Premise(F8)
	S4= ICache.IEA=addr                                         Path(S2,S3)
	S5= ICache.Out={1,rS,0,offset}                              ICache-Search(S4,S1)
	S6= ICache.Out=>IR_ID.In                                    Premise(F12)
	S7= IR_ID.In={1,rS,0,offset}                                Path(S5,S6)
	S8= CtrlPC=0                                                Premise(F25)
	S9= CtrlPCInc=1                                             Premise(F26)
	S10= PC[CIA]=addr                                           PC-Inc(S0,S8,S9)
	S11= CtrlIR_ID=1                                            Premise(F31)
	S12= [IR_ID]={1,rS,0,offset}                                IR_ID-Write(S7,S11)
	S13= GPR[rS]=a                                              Premise(F52)

ID	S14= IR_ID.Out={1,rS,0,offset}                              IR-Out(S12)
	S15= IR_ID.Out25_21=rS                                      IR-Out(S12)
	S16= IR_ID.Out25_21=>GPR.RReg1                              Premise(F89)
	S17= GPR.RReg1=rS                                           Path(S15,S16)
	S18= GPR.Rdata1=a                                           GPR-Read(S17,S13)
	S19= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S20= GPR.Rdata1=>FU.InID1                                   Premise(F91)
	S21= FU.InID1=a                                             Path(S18,S20)
	S22= FU.OutID1=FU(a)                                        FU-Forward(S21)
	S23= FU.OutID1=>A_EX.In                                     Premise(F93)
	S24= A_EX.In=FU(a)                                          Path(S22,S23)
	S25= GPR.Rdata2=>FU.InID2                                   Premise(F94)
	S26= FU.InID2=32'b0                                         Path(S19,S25)
	S27= FU.OutID2=FU(32'b0)                                    FU-Forward(S26)
	S28= FU.OutID2=>B_EX.In                                     Premise(F96)
	S29= B_EX.In=FU(32'b0)                                      Path(S27,S28)
	S30= IR_ID.Out=>IR_EX.In                                    Premise(F97)
	S31= IR_EX.In={1,rS,0,offset}                               Path(S14,S30)
	S32= CtrlPCInc=0                                            Premise(F106)
	S33= PC[CIA]=addr                                           PC-Hold(S10,S32)
	S34= CtrlA_EX=1                                             Premise(F115)
	S35= [A_EX]=FU(a)                                           A_EX-Write(S24,S34)
	S36= CtrlB_EX=1                                             Premise(F116)
	S37= [B_EX]=FU(32'b0)                                       B_EX-Write(S29,S36)
	S38= CtrlIR_EX=1                                            Premise(F117)
	S39= [IR_EX]={1,rS,0,offset}                                IR_EX-Write(S31,S38)

EX	S40= PC.CIA=addr                                            PC-Out(S33)
	S41= A_EX.Out=FU(a)                                         A_EX-Out(S35)
	S42= B_EX.Out=FU(32'b0)                                     B_EX-Out(S37)
	S43= IR_EX.Out15_0=offset                                   IR_EX-Out(S39)
	S44= IR_EX.Out15_0=>SEXT.In                                 Premise(F136)
	S45= SEXT.In=offset                                         Path(S43,S44)
	S46= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S45)
	S47= PC.CIA=>ALU.A                                          Premise(F137)
	S48= ALU.A=addr                                             Path(S40,S47)
	S49= SEXT.Out=>ALU.B                                        Premise(F138)
	S50= ALU.B={14{offset[15]},offset,2{0}}                     Path(S46,S49)
	S51= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S48,S50)
	S52= ALU.Out=>ALUOut_MEM.In                                 Premise(F140)
	S53= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S51,S52)
	S54= A_EX.Out=>CMPU.A                                       Premise(F141)
	S55= CMPU.A=FU(a)                                           Path(S41,S54)
	S56= B_EX.Out=>CMPU.B                                       Premise(F142)
	S57= CMPU.B=FU(32'b0)                                       Path(S42,S56)
	S58= CMPU.lt=CompareS(FU(a),FU(32'b0))                      CMPU-CMPS(S55,S57)
	S59= CMPU.lt=>ConditionReg_MEM.In                           Premise(F144)
	S60= ConditionReg_MEM.In=CompareS(FU(a),FU(32'b0))          Path(S58,S59)
	S61= CtrlALUOut_MEM=1                                       Premise(F165)
	S62= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S53,S61)
	S63= CtrlConditionReg_MEM=1                                 Premise(F166)
	S64= [ConditionReg_MEM]=CompareS(FU(a),FU(32'b0))           ConditionReg_MEM-Write(S60,S63)

MEM	S65= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S62)
	S66= ConditionReg_MEM.Out=CompareS(FU(a),FU(32'b0))         ConditionReg_MEM-Out(S64)
	S67= ALUOut_MEM.Out=>PC.In                                  Premise(F185)
	S68= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S65,S67)
	S69= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F193)
	S70= ConditionReg_WB.In=CompareS(FU(a),FU(32'b0))           Path(S66,S69)
	S71= CtrlPC=1                                               Premise(F202)
	S72= CtrlPCInc=0                                            Premise(F203)
	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S68,S71,S72)
	S74= CtrlConditionReg_WB=1                                  Premise(F226)
	S75= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Write(S70,S74)

WB	S76= CtrlPC=0                                               Premise(F318)
	S77= CtrlPCInc=0                                            Premise(F319)
	S78= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S73,S76,S77)
	S79= CtrlConditionReg_WB=0                                  Premise(F342)
	S80= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Hold(S75,S79)

POST	S78= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S73,S76,S77)
	S80= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Hold(S75,S79)

