
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,1,rD,0,1}                   Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={0,rS,cc,0,1,rD,0,1}                          IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={0,rS,cc,0,1,rD,0,1}                             Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F7)
	S14= CtrlPCInc=1                                            Premise(F8)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F14)
	S17= [IR]={0,rS,cc,0,1,rD,0,1}                              IR-Write(S12,S16)
	S18= CtrlGPR=0                                              Premise(F15)
	S19= GPR[rS]=a                                              GPR-Hold(S3,S18)

ID	S20= IR.Out25_21=rS                                         IR-Out(S17)
	S21= IR.Out25_21=>GPR.RReg1                                 Premise(F20)
	S22= GPR.RReg1=rS                                           Path(S20,S21)
	S23= GPR.Rdata1=a                                           GPR-Read(S22,S19)
	S24= GPR.Rdata1=>A.In                                       Premise(F22)
	S25= A.In=a                                                 Path(S23,S24)
	S26= CtrlPC=0                                               Premise(F23)
	S27= CtrlPCInc=0                                            Premise(F24)
	S28= PC[Out]=addr+4                                         PC-Hold(S15,S26,S27)
	S29= CtrlIR=0                                               Premise(F30)
	S30= [IR]={0,rS,cc,0,1,rD,0,1}                              IR-Hold(S17,S29)
	S31= CtrlA=1                                                Premise(F32)
	S32= [A]=a                                                  A-Write(S25,S31)

EX	S33= IR.Out20_18=cc                                         IR-Out(S30)
	S34= IR.Out16=1                                             IR-Out(S30)
	S35= IR.Out20_18=>CP1.cc                                    Premise(F35)
	S36= CP1.cc=cc                                              Path(S33,S35)
	S37= IR.Out16=>CP1.tf                                       Premise(F36)
	S38= CP1.tf=1                                               Path(S34,S37)
	S39= CP1.fp=FPConditionCode(cc,1)                           FP-PRODUCT(S36,S38)
	S40= CP1.fp=>ConditionReg.In                                Premise(F37)
	S41= ConditionReg.In=FPConditionCode(cc,1)                  Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F38)
	S43= CtrlPCInc=0                                            Premise(F39)
	S44= PC[Out]=addr+4                                         PC-Hold(S28,S42,S43)
	S45= CtrlIR=0                                               Premise(F45)
	S46= [IR]={0,rS,cc,0,1,rD,0,1}                              IR-Hold(S30,S45)
	S47= CtrlA=0                                                Premise(F47)
	S48= [A]=a                                                  A-Hold(S32,S47)
	S49= CtrlConditionReg=1                                     Premise(F49)
	S50= [ConditionReg]=FPConditionCode(cc,1)                   ConditionReg-Write(S41,S49)

MEM	S51= CtrlPC=0                                               Premise(F50)
	S52= CtrlPCInc=0                                            Premise(F51)
	S53= PC[Out]=addr+4                                         PC-Hold(S44,S51,S52)
	S54= CtrlIR=0                                               Premise(F57)
	S55= [IR]={0,rS,cc,0,1,rD,0,1}                              IR-Hold(S46,S54)
	S56= CtrlA=0                                                Premise(F59)
	S57= [A]=a                                                  A-Hold(S48,S56)
	S58= CtrlConditionReg=0                                     Premise(F61)
	S59= [ConditionReg]=FPConditionCode(cc,1)                   ConditionReg-Hold(S50,S58)

WB	S60= IR.Out15_11=rD                                         IR-Out(S55)
	S61= A.Out=a                                                A-Out(S57)
	S62= IR.Out15_11=>GPR.WReg                                  Premise(F62)
	S63= GPR.WReg=rD                                            Path(S60,S62)
	S64= A.Out=>GPR.WData                                       Premise(F63)
	S65= GPR.WData=a                                            Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F65)
	S67= CtrlPCInc=0                                            Premise(F66)
	S68= PC[Out]=addr+4                                         PC-Hold(S53,S66,S67)
	S69= CtrlGPR=1                                              Premise(F73)
	S70= GPR[rD]=a                                              GPR-Write(S63,S65,S69)
	S71= CtrlConditionReg=0                                     Premise(F76)
	S72= [ConditionReg]=FPConditionCode(cc,1)                   ConditionReg-Hold(S59,S71)

POST	S68= PC[Out]=addr+4                                         PC-Hold(S53,S66,S67)
	S70= GPR[rD]=a                                              GPR-Write(S63,S65,S69)
	S72= [ConditionReg]=FPConditionCode(cc,1)                   ConditionReg-Hold(S59,S71)

