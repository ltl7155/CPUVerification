
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,16,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F17)
	S14= CtrlPCInc=0                                            Premise(F18)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F19)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F23)
	S19= IMem[{pid,addr}]={1,rS,16,offset}                      IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F25)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F32)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={1,rS,16,offset}                              IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F33)
	S29= IRMux.MemData={1,rS,16,offset}                         Path(S26,S28)
	S30= IRMux.Out={1,rS,16,offset}                             IRMux-Select2(S29)
	S31= IRMux.Out=>IR.In                                       Premise(F37)
	S32= IR.In={1,rS,16,offset}                                 Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F38)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F39)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F45)
	S38= CtrlPCInc=1                                            Premise(F46)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F48)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR=1                                               Premise(F49)
	S43= [IR]={1,rS,16,offset}                                  IR-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F53)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out25_21=rS                                         IR-Out(S43)
	S47= IR.Out25_21=>GPR.RReg1                                 Premise(F59)
	S48= GPR.RReg1=rS                                           Path(S46,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S45)
	S50= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S51= GPR.Rdata1=>A.In                                       Premise(F61)
	S52= A.In=a                                                 Path(S49,S51)
	S53= GPR.Rdata2=>B.In                                       Premise(F62)
	S54= B.In=32'b0                                             Path(S50,S53)
	S55= CtrlPC=0                                               Premise(F68)
	S56= CtrlPCInc=0                                            Premise(F69)
	S57= PC[Out]=addr+4                                         PC-Hold(S39,S55,S56)
	S58= CtrlICache=0                                           Premise(F71)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S58)
	S60= CtrlA=1                                                Premise(F77)
	S61= [A]=a                                                  A-Write(S52,S60)
	S62= CtrlB=1                                                Premise(F78)
	S63= [B]=32'b0                                              B-Write(S54,S62)

EX	S64= PC.Out=addr+4                                          PC-Out(S57)
	S65= A.Out=a                                                A-Out(S61)
	S66= B.Out=32'b0                                            B-Out(S63)
	S67= A.Out=>CMPU.A                                          Premise(F86)
	S68= CMPU.A=a                                               Path(S65,S67)
	S69= B.Out=>CMPU.B                                          Premise(F87)
	S70= CMPU.B=32'b0                                           Path(S66,S69)
	S71= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S68,S70)
	S72= CMPU.lt=>ConditionReg.In                               Premise(F89)
	S73= ConditionReg.In=CompareS(a,32'b0)                      Path(S71,S72)
	S74= GPR.WReg=5'd31                                         Premise(F90)
	S75= PC.Out=>GPR.WData                                      Premise(F91)
	S76= GPR.WData=addr+4                                       Path(S64,S75)
	S77= CtrlICache=0                                           Premise(F100)
	S78= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S77)
	S79= CtrlGPR=1                                              Premise(F105)
	S80= GPR[5'd31]=addr+4                                      GPR-Write(S74,S76,S79)
	S81= CtrlConditionReg=1                                     Premise(F109)
	S82= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S73,S81)

MEM	S83= CtrlICache=0                                           Premise(F120)
	S84= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S78,S83)
	S85= CtrlGPR=0                                              Premise(F125)
	S86= GPR[5'd31]=addr+4                                      GPR-Hold(S80,S85)
	S87= CtrlConditionReg=0                                     Premise(F129)
	S88= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S82,S87)

WB	S89= CtrlICache=0                                           Premise(F174)
	S90= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S89)
	S91= CtrlGPR=0                                              Premise(F179)
	S92= GPR[5'd31]=addr+4                                      GPR-Hold(S86,S91)
	S93= CtrlConditionReg=0                                     Premise(F183)
	S94= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S88,S93)

POST	S90= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S89)
	S92= GPR[5'd31]=addr+4                                      GPR-Hold(S86,S91)
	S94= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S88,S93)

