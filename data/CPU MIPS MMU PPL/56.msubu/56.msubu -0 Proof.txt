
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rT,0,0,5}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)
	S5= [Lo]=lo                                                 Premise(F5)
	S6= [Hi]=hi                                                 Premise(F6)

IF	S7= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= IMMU.Addr=>IAddrReg.In                                  Premise(F57)
	S10= PC.Out=>IMMU.IEA                                       Premise(F62)
	S11= IMMU.IEA=addr                                          Path(S8,S10)
	S12= CP0.ASID=>IMMU.PID                                     Premise(F63)
	S13= IMMU.PID=pid                                           Path(S7,S12)
	S14= IMMU.Addr={pid,addr}                                   IMMU-Search(S13,S11)
	S15= IAddrReg.In={pid,addr}                                 Path(S14,S9)
	S16= CtrlGPR=0                                              Premise(F122)
	S17= GPR[rS]=a                                              GPR-Hold(S3,S16)
	S18= GPR[rT]=b                                              GPR-Hold(S4,S16)
	S19= CtrlHi=0                                               Premise(F123)
	S20= [Hi]=hi                                                Hi-Hold(S6,S19)
	S21= CtrlIAddrReg=1                                         Premise(F124)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S21)
	S23= CtrlPC=0                                               Premise(F125)
	S24= CtrlPCInc=0                                            Premise(F126)
	S25= PC[Out]=addr                                           PC-Hold(S1,S23,S24)
	S26= CtrlIMem=0                                             Premise(F127)
	S27= IMem[{pid,addr}]={28,rS,rT,0,0,5}                      IMem-Hold(S2,S26)
	S28= CtrlLo=0                                               Premise(F134)
	S29= [Lo]=lo                                                Lo-Hold(S5,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S31= PC.Out=addr                                            PC-Out(S25)
	S32= PC.Out=>ICache.IEA                                     Premise(F186)
	S33= ICache.IEA=addr                                        Path(S31,S32)
	S34= IMem.MEM8WordOut=>ICache.WData                         Premise(F188)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F192)
	S36= IMem.RAddr={pid,addr}                                  Path(S30,S35)
	S37= IMem.Out={28,rS,rT,0,0,5}                              IMem-Read(S36,S27)
	S38= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S36,S27)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S38,S34)
	S40= IMem.Out=>IRMux.MemData                                Premise(F195)
	S41= IRMux.MemData={28,rS,rT,0,0,5}                         Path(S37,S40)
	S42= IRMux.Out={28,rS,rT,0,0,5}                             IRMux-Select2(S41)
	S43= IRMux.Out=>IR_ID.In                                    Premise(F201)
	S44= IR_ID.In={28,rS,rT,0,0,5}                              Path(S42,S43)
	S45= CtrlICache=1                                           Premise(F241)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S39,S45)
	S47= CtrlIR_ID=1                                            Premise(F246)
	S48= [IR_ID]={28,rS,rT,0,0,5}                               IR_ID-Write(S44,S47)
	S49= CtrlGPR=0                                              Premise(F250)
	S50= GPR[rS]=a                                              GPR-Hold(S17,S49)
	S51= GPR[rT]=b                                              GPR-Hold(S18,S49)
	S52= CtrlHi=0                                               Premise(F251)
	S53= [Hi]=hi                                                Hi-Hold(S20,S52)
	S54= CtrlPC=0                                               Premise(F253)
	S55= CtrlPCInc=1                                            Premise(F254)
	S56= PC[Out]=addr+4                                         PC-Inc(S25,S54,S55)
	S57= CtrlLo=0                                               Premise(F262)
	S58= [Lo]=lo                                                Lo-Hold(S29,S57)

ID	S59= IR_ID.Out25_21=rS                                      IR-Out(S48)
	S60= IR_ID.Out20_16=rT                                      IR-Out(S48)
	S61= FU.OutID1=>A_EX.In                                     Premise(F263)
	S62= FU.OutID2=>B_EX.In                                     Premise(F265)
	S63= GPR.Rdata1=>FU.InID1                                   Premise(F306)
	S64= GPR.Rdata2=>FU.InID2                                   Premise(F308)
	S65= IR_ID.Out25_21=>GPR.RReg1                              Premise(F310)
	S66= GPR.RReg1=rS                                           Path(S59,S65)
	S67= GPR.Rdata1=a                                           GPR-Read(S66,S50)
	S68= FU.InID1=a                                             Path(S67,S63)
	S69= FU.OutID1=FU(a)                                        FU-Forward(S68)
	S70= A_EX.In=FU(a)                                          Path(S69,S61)
	S71= IR_ID.Out20_16=>GPR.RReg2                              Premise(F311)
	S72= GPR.RReg2=rT                                           Path(S60,S71)
	S73= GPR.Rdata2=b                                           GPR-Read(S72,S51)
	S74= FU.InID2=b                                             Path(S73,S64)
	S75= FU.OutID2=FU(b)                                        FU-Forward(S74)
	S76= B_EX.In=FU(b)                                          Path(S75,S62)
	S77= CtrlA_EX=1                                             Premise(F363)
	S78= [A_EX]=FU(a)                                           A_EX-Write(S70,S77)
	S79= CtrlB_EX=1                                             Premise(F366)
	S80= [B_EX]=FU(b)                                           B_EX-Write(S76,S79)
	S81= CtrlICache=0                                           Premise(F369)
	S82= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S81)
	S83= CtrlHi=0                                               Premise(F379)
	S84= [Hi]=hi                                                Hi-Hold(S53,S83)
	S85= CtrlPC=0                                               Premise(F381)
	S86= CtrlPCInc=0                                            Premise(F382)
	S87= PC[Out]=addr+4                                         PC-Hold(S56,S85,S86)
	S88= CtrlLo=0                                               Premise(F390)
	S89= [Lo]=lo                                                Lo-Hold(S58,S88)

EX	S90= A_EX.Out=FU(a)                                         A_EX-Out(S78)
	S91= B_EX.Out=FU(b)                                         B_EX-Out(S80)
	S92= Hi.Out=hi                                              Hi-Out(S84)
	S93= Lo.Out=lo                                              Lo-Out(S89)
	S94= MDU.hi=>Hi.In                                          Premise(F441)
	S95= MDU.lo=>Lo.In                                          Premise(F463)
	S96= A_EX.Out=>MDU.A                                        Premise(F464)
	S97= MDU.A=FU(a)                                            Path(S90,S96)
	S98= B_EX.Out=>MDU.B                                        Premise(F465)
	S99= MDU.B=FU(b)                                            Path(S91,S98)
	S100= Hi.Out=>MDU.Hi                                        Premise(F467)
	S101= MDU.Hi=hi                                             Path(S92,S100)
	S102= Lo.Out=>MDU.Lo                                        Premise(F468)
	S103= MDU.Lo=lo                                             Path(S93,S102)
	S104= MDU.lo=({hi,lo}-FU(a)*FU(b))[31:0]                    MDU(S97,S99,S101,S103)
	S105= Lo.In=({hi,lo}-FU(a)*FU(b))[31:0]                     Path(S104,S95)
	S106= MDU.hi=({hi,lo}-FU(a)*FU(b))[63:32]                   MDU(S97,S99,S101,S103)
	S107= Hi.In=({hi,lo}-FU(a)*FU(b))[63:32]                    Path(S106,S94)
	S108= CtrlICache=0                                          Premise(F499)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S82,S108)
	S110= CtrlHi=1                                              Premise(F509)
	S111= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Write(S107,S110)
	S112= CtrlPC=0                                              Premise(F511)
	S113= CtrlPCInc=0                                           Premise(F512)
	S114= PC[Out]=addr+4                                        PC-Hold(S87,S112,S113)
	S115= CtrlLo=1                                              Premise(F520)
	S116= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Write(S105,S115)

MEM	S117= CtrlICache=0                                          Premise(F628)
	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S117)
	S119= CtrlHi=0                                              Premise(F638)
	S120= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S111,S119)
	S121= CtrlPC=0                                              Premise(F640)
	S122= CtrlPCInc=0                                           Premise(F641)
	S123= PC[Out]=addr+4                                        PC-Hold(S114,S121,S122)
	S124= CtrlLo=0                                              Premise(F649)
	S125= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S116,S124)

DMMU1	S126= CtrlICache=0                                          Premise(F757)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S126)
	S128= CtrlHi=0                                              Premise(F767)
	S129= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S120,S128)
	S130= CtrlPC=0                                              Premise(F769)
	S131= CtrlPCInc=0                                           Premise(F770)
	S132= PC[Out]=addr+4                                        PC-Hold(S123,S130,S131)
	S133= CtrlLo=0                                              Premise(F778)
	S134= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S125,S133)

DMMU2	S135= CtrlICache=0                                          Premise(F886)
	S136= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S135)
	S137= CtrlHi=0                                              Premise(F896)
	S138= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S129,S137)
	S139= CtrlPC=0                                              Premise(F898)
	S140= CtrlPCInc=0                                           Premise(F899)
	S141= PC[Out]=addr+4                                        PC-Hold(S132,S139,S140)
	S142= CtrlLo=0                                              Premise(F907)
	S143= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S134,S142)

WB	S144= CtrlICache=0                                          Premise(F1015)
	S145= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S136,S144)
	S146= CtrlHi=0                                              Premise(F1025)
	S147= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S138,S146)
	S148= CtrlPC=0                                              Premise(F1027)
	S149= CtrlPCInc=0                                           Premise(F1028)
	S150= PC[Out]=addr+4                                        PC-Hold(S141,S148,S149)
	S151= CtrlLo=0                                              Premise(F1036)
	S152= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S143,S151)

POST	S145= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S136,S144)
	S147= [Hi]=({hi,lo}-FU(a)*FU(b))[63:32]                     Hi-Hold(S138,S146)
	S150= PC[Out]=addr+4                                        PC-Hold(S141,S148,S149)
	S152= [Lo]=({hi,lo}-FU(a)*FU(b))[31:0]                      Lo-Hold(S143,S151)

