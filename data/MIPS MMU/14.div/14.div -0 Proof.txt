
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,0,0,26}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F18)
	S15= CtrlPCInc=0                                            Premise(F19)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F20)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F24)
	S20= IMem[{pid,addr}]={0,rS,rT,0,0,26}                      IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F26)
	S22= GPR[rS]=a                                              GPR-Hold(S3,S21)
	S23= GPR[rT]=b                                              GPR-Hold(S4,S21)

IF(IMMU)	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F33)
	S27= IMem.RAddr={pid,addr}                                  Path(S25,S26)
	S28= IMem.Out={0,rS,rT,0,0,26}                              IMem-Read(S27,S20)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S20)
	S30= IMem.Out=>IRMux.MemData                                Premise(F34)
	S31= IRMux.MemData={0,rS,rT,0,0,26}                         Path(S28,S30)
	S32= IRMux.Out={0,rS,rT,0,0,26}                             IRMux-Select2(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F38)
	S34= IR.In={0,rS,rT,0,0,26}                                 Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F39)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= PC.Out=>ICache.IEA                                     Premise(F40)
	S38= ICache.IEA=addr                                        Path(S24,S37)
	S39= CtrlPC=0                                               Premise(F46)
	S40= CtrlPCInc=1                                            Premise(F47)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F49)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S38,S36,S42)
	S44= CtrlIR=1                                               Premise(F50)
	S45= [IR]={0,rS,rT,0,0,26}                                  IR-Write(S34,S44)
	S46= CtrlGPR=0                                              Premise(F54)
	S47= GPR[rS]=a                                              GPR-Hold(S22,S46)
	S48= GPR[rT]=b                                              GPR-Hold(S23,S46)

ID	S49= IR.Out25_21=rS                                         IR-Out(S45)
	S50= IR.Out20_16=rT                                         IR-Out(S45)
	S51= IR.Out25_21=>GPR.RReg1                                 Premise(F60)
	S52= GPR.RReg1=rS                                           Path(S49,S51)
	S53= GPR.Rdata1=a                                           GPR-Read(S52,S47)
	S54= IR.Out20_16=>GPR.RReg2                                 Premise(F61)
	S55= GPR.RReg2=rT                                           Path(S50,S54)
	S56= GPR.Rdata2=b                                           GPR-Read(S55,S48)
	S57= GPR.Rdata1=>A.In                                       Premise(F63)
	S58= A.In=a                                                 Path(S53,S57)
	S59= GPR.Rdata2=>B.In                                       Premise(F64)
	S60= B.In=b                                                 Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F70)
	S62= CtrlPCInc=0                                            Premise(F71)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F73)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlA=1                                                Premise(F79)
	S67= [A]=a                                                  A-Write(S58,S66)
	S68= CtrlB=1                                                Premise(F80)
	S69= [B]=b                                                  B-Write(S60,S68)

EX	S70= A.Out=a                                                A-Out(S67)
	S71= B.Out=b                                                B-Out(S69)
	S72= A.Out=>MDU.A                                           Premise(F83)
	S73= MDU.A=a                                                Path(S70,S72)
	S74= B.Out=>MDU.B                                           Premise(F84)
	S75= MDU.B=b                                                Path(S71,S74)
	S76= MDU.lo=a÷b                                             MDU(S73,S75)
	S77= MDU.hi=a%b                                             MDU(S73,S75)
	S78= MDU.hi=>Hi.In                                          Premise(F86)
	S79= Hi.In=a%b                                              Path(S77,S78)
	S80= MDU.lo=>Lo.In                                          Premise(F87)
	S81= Lo.In=a÷b                                              Path(S76,S80)
	S82= CtrlPC=0                                               Premise(F93)
	S83= CtrlPCInc=0                                            Premise(F94)
	S84= PC[Out]=addr+4                                         PC-Hold(S63,S82,S83)
	S85= CtrlICache=0                                           Premise(F96)
	S86= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S85)
	S87= CtrlHi=1                                               Premise(F104)
	S88= [Hi]=a%b                                               Hi-Write(S79,S87)
	S89= CtrlLo=1                                               Premise(F105)
	S90= [Lo]=a÷b                                               Lo-Write(S81,S89)

MEM	S91= CtrlPC=0                                               Premise(F111)
	S92= CtrlPCInc=0                                            Premise(F112)
	S93= PC[Out]=addr+4                                         PC-Hold(S84,S91,S92)
	S94= CtrlICache=0                                           Premise(F114)
	S95= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S86,S94)
	S96= CtrlHi=0                                               Premise(F122)
	S97= [Hi]=a%b                                               Hi-Hold(S88,S96)
	S98= CtrlLo=0                                               Premise(F123)
	S99= [Lo]=a÷b                                               Lo-Hold(S90,S98)

WB	S100= CtrlPC=0                                              Premise(F165)
	S101= CtrlPCInc=0                                           Premise(F166)
	S102= PC[Out]=addr+4                                        PC-Hold(S93,S100,S101)
	S103= CtrlICache=0                                          Premise(F168)
	S104= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S95,S103)
	S105= CtrlHi=0                                              Premise(F176)
	S106= [Hi]=a%b                                              Hi-Hold(S97,S105)
	S107= CtrlLo=0                                              Premise(F177)
	S108= [Lo]=a÷b                                              Lo-Hold(S99,S107)

POST	S102= PC[Out]=addr+4                                        PC-Hold(S93,S100,S101)
	S104= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S95,S103)
	S106= [Hi]=a%b                                              Hi-Hold(S97,S105)
	S108= [Lo]=a÷b                                              Lo-Hold(S99,S107)

