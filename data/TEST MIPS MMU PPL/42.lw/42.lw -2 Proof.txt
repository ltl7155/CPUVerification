
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={35,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= DCache[FU(base)+{16{offset[15]},offset}]=a              Premise(F5)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F7)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F8)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F28)
	S15= CtrlPCInc=0                                            Premise(F29)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F30)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F35)
	S20= IMem[{pid,addr}]={35,rS,rT,offset}                     IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F37)
	S22= GPR[rS]=base                                           GPR-Hold(S3,S21)
	S23= CtrlDCache=0                                           Premise(F45)
	S24= DCache[FU(base)+{16{offset[15]},offset}]=a             DCache-Hold(S4,S23)

IF(IMMU)	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= IAddrReg.Out=>IMem.RAddr                               Premise(F68)
	S28= IMem.RAddr={pid,addr}                                  Path(S26,S27)
	S29= IMem.Out={35,rS,rT,offset}                             IMem-Read(S28,S20)
	S30= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S28,S20)
	S31= IMem.Out=>IRMux.MemData                                Premise(F69)
	S32= IRMux.MemData={35,rS,rT,offset}                        Path(S29,S31)
	S33= IRMux.Out={35,rS,rT,offset}                            IRMux-Select2(S32)
	S34= IRMux.Out=>IR_ID.In                                    Premise(F73)
	S35= IR_ID.In={35,rS,rT,offset}                             Path(S33,S34)
	S36= IMem.MEM8WordOut=>ICache.WData                         Premise(F74)
	S37= ICache.WData=IMemGet8Word({pid,addr})                  Path(S30,S36)
	S38= PC.Out=>ICache.IEA                                     Premise(F75)
	S39= ICache.IEA=addr                                        Path(S25,S38)
	S40= CtrlPC=0                                               Premise(F83)
	S41= CtrlPCInc=1                                            Premise(F84)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F86)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S39,S37,S43)
	S45= CtrlIR_ID=1                                            Premise(F89)
	S46= [IR_ID]={35,rS,rT,offset}                              IR_ID-Write(S35,S45)
	S47= CtrlGPR=0                                              Premise(F92)
	S48= GPR[rS]=base                                           GPR-Hold(S22,S47)
	S49= CtrlDCache=0                                           Premise(F100)
	S50= DCache[FU(base)+{16{offset[15]},offset}]=a             DCache-Hold(S24,S49)

ID	S51= IR_ID.Out={35,rS,rT,offset}                            IR-Out(S46)
	S52= IR_ID.Out25_21=rS                                      IR-Out(S46)
	S53= IR_ID.Out15_0=offset                                   IR-Out(S46)
	S54= IR_ID.Out25_21=>GPR.RReg1                              Premise(F124)
	S55= GPR.RReg1=rS                                           Path(S52,S54)
	S56= GPR.Rdata1=base                                        GPR-Read(S55,S48)
	S57= IR_ID.Out15_0=>IMMEXT.In                               Premise(F125)
	S58= IMMEXT.In=offset                                       Path(S53,S57)
	S59= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S58)
	S60= GPR.Rdata1=>FU.InID1                                   Premise(F126)
	S61= FU.InID1=base                                          Path(S56,S60)
	S62= FU.OutID1=FU(base)                                     FU-Forward(S61)
	S63= FU.OutID1=>A_EX.In                                     Premise(F128)
	S64= A_EX.In=FU(base)                                       Path(S62,S63)
	S65= IMMEXT.Out=>B_EX.In                                    Premise(F129)
	S66= B_EX.In={16{offset[15]},offset}                        Path(S59,S65)
	S67= IR_ID.Out=>IR_EX.In                                    Premise(F130)
	S68= IR_EX.In={35,rS,rT,offset}                             Path(S51,S67)
	S69= CtrlPC=0                                               Premise(F139)
	S70= CtrlPCInc=0                                            Premise(F140)
	S71= PC[Out]=addr+4                                         PC-Hold(S42,S69,S70)
	S72= CtrlICache=0                                           Premise(F142)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S72)
	S74= CtrlA_EX=1                                             Premise(F149)
	S75= [A_EX]=FU(base)                                        A_EX-Write(S64,S74)
	S76= CtrlB_EX=1                                             Premise(F150)
	S77= [B_EX]={16{offset[15]},offset}                         B_EX-Write(S66,S76)
	S78= CtrlIR_EX=1                                            Premise(F151)
	S79= [IR_EX]={35,rS,rT,offset}                              IR_EX-Write(S68,S78)
	S80= CtrlDCache=0                                           Premise(F156)
	S81= DCache[FU(base)+{16{offset[15]},offset}]=a             DCache-Hold(S50,S80)

EX	S82= A_EX.Out=FU(base)                                      A_EX-Out(S75)
	S83= B_EX.Out={16{offset[15]},offset}                       B_EX-Out(S77)
	S84= IR_EX.Out={35,rS,rT,offset}                            IR_EX-Out(S79)
	S85= A_EX.Out=>ALU.A                                        Premise(F180)
	S86= ALU.A=FU(base)                                         Path(S82,S85)
	S87= B_EX.Out=>ALU.B                                        Premise(F181)
	S88= ALU.B={16{offset[15]},offset}                          Path(S83,S87)
	S89= ALU.Out=FU(base)+{16{offset[15]},offset}               ALU(S86,S88)
	S90= ALU.Out=>ALUOut_MEM.In                                 Premise(F183)
	S91= ALUOut_MEM.In=FU(base)+{16{offset[15]},offset}         Path(S89,S90)
	S92= IR_EX.Out=>IR_MEM.In                                   Premise(F184)
	S93= IR_MEM.In={35,rS,rT,offset}                            Path(S84,S92)
	S94= CtrlPC=0                                               Premise(F191)
	S95= CtrlPCInc=0                                            Premise(F192)
	S96= PC[Out]=addr+4                                         PC-Hold(S71,S94,S95)
	S97= CtrlICache=0                                           Premise(F194)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S97)
	S99= CtrlALUOut_MEM=1                                       Premise(F204)
	S100= [ALUOut_MEM]=FU(base)+{16{offset[15]},offset}         ALUOut_MEM-Write(S91,S99)
	S101= CtrlIR_MEM=1                                          Premise(F205)
	S102= [IR_MEM]={35,rS,rT,offset}                            IR_MEM-Write(S93,S101)
	S103= CtrlDCache=0                                          Premise(F208)
	S104= DCache[FU(base)+{16{offset[15]},offset}]=a            DCache-Hold(S81,S103)

MEM	S105= ALUOut_MEM.Out=FU(base)+{16{offset[15]},offset}       ALUOut_MEM-Out(S100)
	S106= IR_MEM.Out={35,rS,rT,offset}                          IR_MEM-Out(S102)
	S107= ALUOut_MEM.Out=>DCache.IEA                            Premise(F238)
	S108= DCache.IEA=FU(base)+{16{offset[15]},offset}           Path(S105,S107)
	S109= DCache.Out=a                                          DCache-Search(S108,S104)
	S110= IR_MEM.Out=>IR_WB.In                                  Premise(F243)
	S111= IR_WB.In={35,rS,rT,offset}                            Path(S106,S110)
	S112= ALUOut_MEM.Out=>ALUOut_WB.In                          Premise(F247)
	S113= ALUOut_WB.In=FU(base)+{16{offset[15]},offset}         Path(S105,S112)
	S114= DCache.Out=>DR_WB.In                                  Premise(F248)
	S115= DR_WB.In=a                                            Path(S109,S114)
	S116= CtrlPC=0                                              Premise(F260)
	S117= CtrlPCInc=0                                           Premise(F261)
	S118= PC[Out]=addr+4                                        PC-Hold(S96,S116,S117)
	S119= CtrlICache=0                                          Premise(F263)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S119)
	S121= CtrlIR_WB=1                                           Premise(F281)
	S122= [IR_WB]={35,rS,rT,offset}                             IR_WB-Write(S111,S121)
	S123= CtrlALUOut_WB=1                                       Premise(F287)
	S124= [ALUOut_WB]=FU(base)+{16{offset[15]},offset}          ALUOut_WB-Write(S113,S123)
	S125= CtrlDR_WB=1                                           Premise(F288)
	S126= [DR_WB]=a                                             DR_WB-Write(S115,S125)

WB	S127= IR_WB.Out20_16=rT                                     IR-Out(S122)
	S128= ALUOut_WB.Out1_0={FU(base)+{16{offset[15]},offset}}[1:0]ALUOut_WB-Out(S124)
	S129= DR_WB.Out=a                                           DR_WB-Out(S126)
	S130= IR_WB.Out20_16=>GPR.WReg                              Premise(F383)
	S131= GPR.WReg=rT                                           Path(S127,S130)
	S132= DR_WB.Out=>MemDataSelL.In                             Premise(F384)
	S133= MemDataSelL.In=a                                      Path(S129,S132)
	S134= ALUOut_WB.Out1_0=>MemDataSelL.Addr                    Premise(F385)
	S135= MemDataSelL.Addr={FU(base)+{16{offset[15]},offset}}[1:0]Path(S128,S134)
	S136= MemDataSelL.Out=a                                     MemDataSelL(S133,S135)
	S137= MemDataSelL.Out=>GPR.WData                            Premise(F387)
	S138= GPR.WData=a                                           Path(S136,S137)
	S139= CtrlPC=0                                              Premise(F395)
	S140= CtrlPCInc=0                                           Premise(F396)
	S141= PC[Out]=addr+4                                        PC-Hold(S118,S139,S140)
	S142= CtrlICache=0                                          Premise(F398)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S142)
	S144= CtrlGPR=1                                             Premise(F404)
	S145= GPR[rT]=a                                             GPR-Write(S131,S138,S144)

POST	S141= PC[Out]=addr+4                                        PC-Hold(S118,S139,S140)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S142)
	S145= GPR[rT]=a                                             GPR-Write(S131,S138,S144)

