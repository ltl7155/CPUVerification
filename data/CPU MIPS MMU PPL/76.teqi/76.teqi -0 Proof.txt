
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,12,imm}                          Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= IMMU.Addr=>IAddrReg.In                                  Premise(F59)
	S7= PC.Out=>IMMU.IEA                                        Premise(F65)
	S8= IMMU.IEA=addr                                           Path(S5,S7)
	S9= CP0.ASID=>IMMU.PID                                      Premise(F66)
	S10= IMMU.PID=pid                                           Path(S4,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S8)
	S12= IAddrReg.In={pid,addr}                                 Path(S11,S6)
	S13= CtrlPC=0                                               Premise(F113)
	S14= CtrlPCInc=0                                            Premise(F114)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlCP0=0                                              Premise(F116)
	S17= CP0[ASID]=pid                                          CP0-Hold(S0,S16)
	S18= CtrlGPR=0                                              Premise(F132)
	S19= GPR[rs]=a                                              GPR-Hold(S3,S18)
	S20= CtrlIAddrReg=1                                         Premise(F133)
	S21= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S20)
	S22= CtrlIMem=0                                             Premise(F134)
	S23= IMem[{pid,addr}]={1,rs,12,imm}                         IMem-Hold(S2,S22)

IMMU	S24= PC.Out=addr                                            PC-Out(S15)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S21)
	S26= PC.Out=>ICache.IEA                                     Premise(F194)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IMem.MEM8WordOut=>ICache.WData                         Premise(F196)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F201)
	S30= IMem.RAddr={pid,addr}                                  Path(S25,S29)
	S31= IMem.Out={1,rs,12,imm}                                 IMem-Read(S30,S23)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S23)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S28)
	S34= IMem.Out=>IRMux.MemData                                Premise(F204)
	S35= IRMux.MemData={1,rs,12,imm}                            Path(S31,S34)
	S36= IRMux.Out={1,rs,12,imm}                                IRMux-Select2(S35)
	S37= IRMux.Out=>IR_ID.In                                    Premise(F210)
	S38= IR_ID.In={1,rs,12,imm}                                 Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F247)
	S40= CtrlPCInc=1                                            Premise(F248)
	S41= PC[Out]=addr+4                                         PC-Inc(S15,S39,S40)
	S42= CtrlCP0=0                                              Premise(F250)
	S43= CP0[ASID]=pid                                          CP0-Hold(S17,S42)
	S44= CtrlICache=1                                           Premise(F253)
	S45= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S33,S44)
	S46= CtrlIR_ID=1                                            Premise(F262)
	S47= [IR_ID]={1,rs,12,imm}                                  IR_ID-Write(S38,S46)
	S48= CtrlGPR=0                                              Premise(F266)
	S49= GPR[rs]=a                                              GPR-Hold(S19,S48)

ID	S50= IR_ID.Out25_21=rs                                      IR-Out(S47)
	S51= IR_ID.Out15_0=imm                                      IR-Out(S47)
	S52= FU.OutID1=>A_EX.In                                     Premise(F272)
	S53= IMMEXT.Out=>B_EX.In                                    Premise(F274)
	S54= GPR.Rdata1=>FU.InID1                                   Premise(F324)
	S55= IR_ID.Out25_21=>GPR.RReg1                              Premise(F327)
	S56= GPR.RReg1=rs                                           Path(S50,S55)
	S57= GPR.Rdata1=a                                           GPR-Read(S56,S49)
	S58= FU.InID1=a                                             Path(S57,S54)
	S59= FU.OutID1=FU(a)                                        FU-Forward(S58)
	S60= A_EX.In=FU(a)                                          Path(S59,S52)
	S61= IR_ID.Out15_0=>IMMEXT.In                               Premise(F333)
	S62= IMMEXT.In=imm                                          Path(S51,S61)
	S63= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S62)
	S64= B_EX.In={16{imm[15]},imm}                              Path(S63,S53)
	S65= CtrlA_EX=1                                             Premise(F376)
	S66= [A_EX]=FU(a)                                           A_EX-Write(S60,S65)
	S67= CtrlB_EX=1                                             Premise(F379)
	S68= [B_EX]={16{imm[15]},imm}                               B_EX-Write(S64,S67)
	S69= CtrlPC=0                                               Premise(F382)
	S70= CtrlPCInc=0                                            Premise(F383)
	S71= PC[Out]=addr+4                                         PC-Hold(S41,S69,S70)
	S72= CtrlCP0=0                                              Premise(F385)
	S73= CP0[ASID]=pid                                          CP0-Hold(S43,S72)
	S74= CtrlICache=0                                           Premise(F388)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S45,S74)

EX	S76= A_EX.Out=FU(a)                                         A_EX-Out(S66)
	S77= B_EX.Out={16{imm[15]},imm}                             B_EX-Out(S68)
	S78= A_EX.Out=>CMPU.A                                       Premise(F411)
	S79= CMPU.A=FU(a)                                           Path(S76,S78)
	S80= B_EX.Out=>CMPU.B                                       Premise(F412)
	S81= CMPU.B={16{imm[15]},imm}                               Path(S77,S80)
	S82= CMPU.zero=CompareS(FU(a),{16{imm[15]},imm})            CMPU-CMPS(S79,S81)
	S83= CMPU.zero=>ConditionReg_MEM.In                         Premise(F448)
	S84= ConditionReg_MEM.In=CompareS(FU(a),{16{imm[15]},imm})  Path(S82,S83)
	S85= CtrlPC=0                                               Premise(F518)
	S86= CtrlPCInc=0                                            Premise(F519)
	S87= PC[Out]=addr+4                                         PC-Hold(S71,S85,S86)
	S88= CtrlCP0=0                                              Premise(F521)
	S89= CP0[ASID]=pid                                          CP0-Hold(S73,S88)
	S90= CtrlICache=0                                           Premise(F524)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S75,S90)
	S92= CtrlConditionReg_MEM=1                                 Premise(F526)
	S93= [ConditionReg_MEM]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_MEM-Write(S84,S92)

MEM	S94= PC.Out=addr+4                                          PC-Out(S87)
	S95= CP0.ASID=pid                                           CP0-Read-ASID(S89)
	S96= ConditionReg_MEM.Out=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_MEM-Out(S93)
	S97= PC.Out=>CP0.EPCIn                                      Premise(F549)
	S98= CP0.EPCIn=addr+4                                       Path(S94,S97)
	S99= CP0.ExCodeIn=5'h0d                                     Premise(F550)
	S100= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In           Premise(F582)
	S101= ConditionReg_DMMU1.In=CompareS(FU(a),{16{imm[15]},imm})Path(S96,S100)
	S102= CP0.ASID=>PIDReg.In                                   Premise(F623)
	S103= PIDReg.In=pid                                         Path(S95,S102)
	S104= CtrlEPCIn=1                                           Premise(F658)
	S105= CP0[EPC]=addr+4                                       CP0-Write-EPC(S98,S104)
	S106= CtrlExCodeIn=1                                        Premise(F659)
	S107= CP0[ExCode]=5'h0d                                     CP0-Write-ExCode(S99,S106)
	S108= CtrlICache=0                                          Premise(F660)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S108)
	S110= CtrlConditionReg_DMMU1=1                              Premise(F663)
	S111= [ConditionReg_DMMU1]=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU1-Write(S101,S110)
	S112= CtrlPIDReg=1                                          Premise(F678)
	S113= [PIDReg]=pid                                          PIDReg-Write(S103,S112)

DMMU1	S114= ConditionReg_DMMU1.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU1-Out(S111)
	S115= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F718)
	S116= ConditionReg_DMMU2.In=CompareS(FU(a),{16{imm[15]},imm})Path(S114,S115)
	S117= CtrlCP0=0                                             Premise(F792)
	S118= CP0[EPC]=addr+4                                       CP0-Hold(S105,S117)
	S119= CP0[ExCode]=5'h0d                                     CP0-Hold(S107,S117)
	S120= CtrlICache=0                                          Premise(F795)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S120)
	S122= CtrlConditionReg_DMMU2=1                              Premise(F799)
	S123= [ConditionReg_DMMU2]=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU2-Write(S116,S122)
	S124= CtrlPIDReg=0                                          Premise(F813)
	S125= [PIDReg]=pid                                          PIDReg-Hold(S113,S124)

DMMU2	S126= ConditionReg_DMMU2.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU2-Out(S123)
	S127= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F855)
	S128= ConditionReg_WB.In=CompareS(FU(a),{16{imm[15]},imm})  Path(S126,S127)
	S129= CtrlCP0=0                                             Premise(F927)
	S130= CP0[EPC]=addr+4                                       CP0-Hold(S118,S129)
	S131= CP0[ExCode]=5'h0d                                     CP0-Hold(S119,S129)
	S132= CtrlICache=0                                          Premise(F930)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S132)
	S134= CtrlConditionReg_WB=1                                 Premise(F935)
	S135= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Write(S128,S134)
	S136= CtrlPIDReg=0                                          Premise(F948)
	S137= [PIDReg]=pid                                          PIDReg-Hold(S125,S136)

WB	S138= CtrlCP0=0                                             Premise(F1062)
	S139= CP0[EPC]=addr+4                                       CP0-Hold(S130,S138)
	S140= CP0[ExCode]=5'h0d                                     CP0-Hold(S131,S138)
	S141= CtrlICache=0                                          Premise(F1065)
	S142= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S141)
	S143= CtrlConditionReg_WB=0                                 Premise(F1070)
	S144= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S135,S143)
	S145= CtrlPIDReg=0                                          Premise(F1083)
	S146= [PIDReg]=pid                                          PIDReg-Hold(S137,S145)

POST	S139= CP0[EPC]=addr+4                                       CP0-Hold(S130,S138)
	S140= CP0[ExCode]=5'h0d                                     CP0-Hold(S131,S138)
	S142= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S141)
	S144= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S135,S143)
	S146= [PIDReg]=pid                                          PIDReg-Hold(S137,S145)

