
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,0,0,24}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={0,rS,rT,0,0,24}                      IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F47)
	S20= GPR[rT]=b                                              Premise(F48)

IF(IMMU)	S21= PC.Out=addr                                            PC-Out(S14)
	S22= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F52)
	S24= IMem.RAddr={pid,addr}                                  Path(S22,S23)
	S25= IMem.Out={0,rS,rT,0,0,24}                              IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F53)
	S28= IRMux.MemData={0,rS,rT,0,0,24}                         Path(S25,S27)
	S29= IRMux.Out={0,rS,rT,0,0,24}                             IRMux-Select2(S28)
	S30= IRMux.Out=>IR_ID.In                                    Premise(F57)
	S31= IR_ID.In={0,rS,rT,0,0,24}                              Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F58)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= PC.Out=>ICache.IEA                                     Premise(F59)
	S35= ICache.IEA=addr                                        Path(S21,S34)
	S36= CtrlPC=0                                               Premise(F67)
	S37= CtrlPCInc=1                                            Premise(F68)
	S38= PC[Out]=addr+4                                         PC-Inc(S14,S36,S37)
	S39= CtrlICache=1                                           Premise(F70)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S35,S33,S39)
	S41= CtrlIR_ID=1                                            Premise(F73)
	S42= [IR_ID]={0,rS,rT,0,0,24}                               IR_ID-Write(S31,S41)
	S43= CtrlGPR=0                                              Premise(F76)
	S44= GPR[rS]=a                                              GPR-Hold(S19,S43)
	S45= GPR[rT]=b                                              GPR-Hold(S20,S43)

ID	S46= IR_ID.Out25_21=rS                                      IR-Out(S42)
	S47= IR_ID.Out20_16=rT                                      IR-Out(S42)
	S48= IR_ID.Out25_21=>GPR.RReg1                              Premise(F94)
	S49= GPR.RReg1=rS                                           Path(S46,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S44)
	S51= IR_ID.Out20_16=>GPR.RReg2                              Premise(F95)
	S52= GPR.RReg2=rT                                           Path(S47,S51)
	S53= GPR.Rdata2=b                                           GPR-Read(S52,S45)
	S54= GPR.Rdata1=>FU.InID1                                   Premise(F97)
	S55= FU.InID1=a                                             Path(S50,S54)
	S56= FU.OutID1=FU(a)                                        FU-Forward(S55)
	S57= FU.OutID1=>A_EX.In                                     Premise(F99)
	S58= A_EX.In=FU(a)                                          Path(S56,S57)
	S59= GPR.Rdata2=>FU.InID2                                   Premise(F100)
	S60= FU.InID2=b                                             Path(S53,S59)
	S61= FU.OutID2=FU(b)                                        FU-Forward(S60)
	S62= FU.OutID2=>B_EX.In                                     Premise(F102)
	S63= B_EX.In=FU(b)                                          Path(S61,S62)
	S64= CtrlPC=0                                               Premise(F111)
	S65= CtrlPCInc=0                                            Premise(F112)
	S66= PC[Out]=addr+4                                         PC-Hold(S38,S64,S65)
	S67= CtrlICache=0                                           Premise(F114)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S67)
	S69= CtrlA_EX=1                                             Premise(F121)
	S70= [A_EX]=FU(a)                                           A_EX-Write(S58,S69)
	S71= CtrlB_EX=1                                             Premise(F122)
	S72= [B_EX]=FU(b)                                           B_EX-Write(S63,S71)

EX	S73= A_EX.Out=FU(a)                                         A_EX-Out(S70)
	S74= B_EX.Out=FU(b)                                         B_EX-Out(S72)
	S75= A_EX.Out=>MDU.A                                        Premise(F139)
	S76= MDU.A=FU(a)                                            Path(S73,S75)
	S77= B_EX.Out=>MDU.B                                        Premise(F140)
	S78= MDU.B=FU(b)                                            Path(S74,S77)
	S79= MDU.lo=(FU(a)×FU(b))[31:0]                             MDU(S76,S78)
	S80= MDU.hi=(FU(a)×FU(b))[63:32]                            MDU(S76,S78)
	S81= MDU.hi=>Hi.In                                          Premise(F142)
	S82= Hi.In=(FU(a)×FU(b))[63:32]                             Path(S80,S81)
	S83= MDU.lo=>Lo.In                                          Premise(F143)
	S84= Lo.In=(FU(a)×FU(b))[31:0]                              Path(S79,S83)
	S85= CtrlPC=0                                               Premise(F151)
	S86= CtrlPCInc=0                                            Premise(F152)
	S87= PC[Out]=addr+4                                         PC-Hold(S66,S85,S86)
	S88= CtrlICache=0                                           Premise(F154)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S68,S88)
	S90= CtrlHi=1                                               Premise(F164)
	S91= [Hi]=(FU(a)×FU(b))[63:32]                              Hi-Write(S82,S90)
	S92= CtrlLo=1                                               Premise(F165)
	S93= [Lo]=(FU(a)×FU(b))[31:0]                               Lo-Write(S84,S92)

MEM	S94= CtrlPC=0                                               Premise(F193)
	S95= CtrlPCInc=0                                            Premise(F194)
	S96= PC[Out]=addr+4                                         PC-Hold(S87,S94,S95)
	S97= CtrlICache=0                                           Premise(F196)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S89,S97)
	S99= CtrlHi=0                                               Premise(F206)
	S100= [Hi]=(FU(a)×FU(b))[63:32]                             Hi-Hold(S91,S99)
	S101= CtrlLo=0                                              Premise(F207)
	S102= [Lo]=(FU(a)×FU(b))[31:0]                              Lo-Hold(S93,S101)

WB	S103= CtrlPC=0                                              Premise(F298)
	S104= CtrlPCInc=0                                           Premise(F299)
	S105= PC[Out]=addr+4                                        PC-Hold(S96,S103,S104)
	S106= CtrlICache=0                                          Premise(F301)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S106)
	S108= CtrlHi=0                                              Premise(F311)
	S109= [Hi]=(FU(a)×FU(b))[63:32]                             Hi-Hold(S100,S108)
	S110= CtrlLo=0                                              Premise(F312)
	S111= [Lo]=(FU(a)×FU(b))[31:0]                              Lo-Hold(S102,S110)

POST	S105= PC[Out]=addr+4                                        PC-Hold(S96,S103,S104)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S106)
	S109= [Hi]=(FU(a)×FU(b))[63:32]                             Hi-Hold(S100,S108)
	S111= [Lo]=(FU(a)×FU(b))[31:0]                              Lo-Hold(S102,S110)

