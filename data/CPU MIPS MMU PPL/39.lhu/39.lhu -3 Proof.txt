
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={37,rS,rT,offset}                      Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F62)
	S6= PC.Out=>IMMU.IEA                                        Premise(F68)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F69)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlIAddrReg=1                                         Premise(F144)
	S13= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S12)
	S14= CtrlPC=0                                               Premise(F145)
	S15= CtrlPCInc=0                                            Premise(F146)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIMem=0                                             Premise(F147)
	S18= IMem[{pid,addr}]={37,rS,rT,offset}                     IMem-Hold(S2,S17)
	S19= GPR[rS]=base                                           Premise(F150)

IMMU	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S13)
	S21= PC.Out=addr                                            PC-Out(S16)
	S22= PC.Out=>ICache.IEA                                     Premise(F211)
	S23= ICache.IEA=addr                                        Path(S21,S22)
	S24= IMem.MEM8WordOut=>ICache.WData                         Premise(F213)
	S25= IAddrReg.Out=>IMem.RAddr                               Premise(F218)
	S26= IMem.RAddr={pid,addr}                                  Path(S20,S25)
	S27= IMem.Out={37,rS,rT,offset}                             IMem-Read(S26,S18)
	S28= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S26,S18)
	S29= ICache.WData=IMemGet8Word({pid,addr})                  Path(S28,S24)
	S30= IMem.Out=>IRMux.MemData                                Premise(F221)
	S31= IRMux.MemData={37,rS,rT,offset}                        Path(S27,S30)
	S32= IRMux.Out={37,rS,rT,offset}                            IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F226)
	S34= IR_ID.In={37,rS,rT,offset}                             Path(S32,S33)
	S35= CtrlICache=1                                           Premise(F267)
	S36= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S23,S29,S35)
	S37= CtrlIR_ID=1                                            Premise(F287)
	S38= [IR_ID]={37,rS,rT,offset}                              IR_ID-Write(S34,S37)
	S39= CtrlGPR=0                                              Premise(F291)
	S40= GPR[rS]=base                                           GPR-Hold(S19,S39)
	S41= CtrlPC=0                                               Premise(F293)
	S42= CtrlPCInc=1                                            Premise(F294)
	S43= PC[Out]=addr+4                                         PC-Inc(S16,S41,S42)

ID	S44= IR_ID.Out={37,rS,rT,offset}                            IR-Out(S38)
	S45= IR_ID.Out25_21=rS                                      IR-Out(S38)
	S46= IR_ID.Out15_0=offset                                   IR-Out(S38)
	S47= FU.OutID1=>A_EX.In                                     Premise(F303)
	S48= IMMEXT.Out=>B_EX.In                                    Premise(F305)
	S49= GPR.Rdata1=>FU.InID1                                   Premise(F349)
	S50= IR_ID.Out25_21=>GPR.RReg1                              Premise(F355)
	S51= GPR.RReg1=rS                                           Path(S45,S50)
	S52= GPR.Rdata1=base                                        GPR-Read(S51,S40)
	S53= FU.InID1=base                                          Path(S52,S49)
	S54= FU.OutID1=FU(base)                                     FU-Forward(S53)
	S55= A_EX.In=FU(base)                                       Path(S54,S47)
	S56= IR_ID.Out15_0=>IMMEXT.In                               Premise(F363)
	S57= IMMEXT.In=offset                                       Path(S46,S56)
	S58= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S57)
	S59= B_EX.In={16{offset[15]},offset}                        Path(S58,S48)
	S60= IR_ID.Out=>IR_EX.In                                    Premise(F372)
	S61= IR_EX.In={37,rS,rT,offset}                             Path(S44,S60)
	S62= CtrlA_EX=1                                             Premise(F404)
	S63= [A_EX]=FU(base)                                        A_EX-Write(S55,S62)
	S64= CtrlB_EX=1                                             Premise(F405)
	S65= [B_EX]={16{offset[15]},offset}                         B_EX-Write(S59,S64)
	S66= CtrlICache=0                                           Premise(F415)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S36,S66)
	S68= CtrlIR_EX=1                                            Premise(F434)
	S69= [IR_EX]={37,rS,rT,offset}                              IR_EX-Write(S61,S68)
	S70= CtrlPC=0                                               Premise(F441)
	S71= CtrlPCInc=0                                            Premise(F442)
	S72= PC[Out]=addr+4                                         PC-Hold(S43,S70,S71)

EX	S73= A_EX.Out=FU(base)                                      A_EX-Out(S63)
	S74= B_EX.Out={16{offset[15]},offset}                       B_EX-Out(S65)
	S75= IR_EX.Out={37,rS,rT,offset}                            IR_EX-Out(S69)
	S76= A_EX.Out=>ALU.A                                        Premise(F446)
	S77= ALU.A=FU(base)                                         Path(S73,S76)
	S78= B_EX.Out=>ALU.B                                        Premise(F447)
	S79= ALU.B={16{offset[15]},offset}                          Path(S74,S78)
	S80= ALU.Out=FU(base)+{16{offset[15]},offset}               ALU(S77,S79)
	S81= ALU.Out=>ALUOut_MEM.In                                 Premise(F450)
	S82= ALUOut_MEM.In=FU(base)+{16{offset[15]},offset}         Path(S80,S81)
	S83= IR_EX.Out=>IR_MEM.In                                   Premise(F524)
	S84= IR_MEM.In={37,rS,rT,offset}                            Path(S75,S83)
	S85= CtrlALUOut_MEM=1                                       Premise(F554)
	S86= [ALUOut_MEM]=FU(base)+{16{offset[15]},offset}          ALUOut_MEM-Write(S82,S85)
	S87= CtrlICache=0                                           Premise(F563)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S87)
	S89= CtrlIR_MEM=1                                           Premise(F585)
	S90= [IR_MEM]={37,rS,rT,offset}                             IR_MEM-Write(S84,S89)
	S91= CtrlPC=0                                               Premise(F589)
	S92= CtrlPCInc=0                                            Premise(F590)
	S93= PC[Out]=addr+4                                         PC-Hold(S72,S91,S92)
	S94= DCache[FU(base)+{16{offset[15]},offset}]=a             Premise(F595)

MEM	S95= ALUOut_MEM.Out=FU(base)+{16{offset[15]},offset}        ALUOut_MEM-Out(S86)
	S96= IR_MEM.Out={37,rS,rT,offset}                           IR_MEM-Out(S90)
	S97= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F601)
	S98= ALUOut_WB.In=FU(base)+{16{offset[15]},offset}          Path(S95,S97)
	S99= ALUOut_MEM.Out=>DCache.IEA                             Premise(F634)
	S100= DCache.IEA=FU(base)+{16{offset[15]},offset}           Path(S95,S99)
	S101= DCache.Out=a                                          DCache-Search(S100,S94)
	S102= DCache.Out=>DR_WB.In                                  Premise(F639)
	S103= DR_WB.In=a                                            Path(S101,S102)
	S104= IR_MEM.Out=>IR_WB.In                                  Premise(F675)
	S105= IR_WB.In={37,rS,rT,offset}                            Path(S96,S104)
	S106= CtrlALUOut_WB=1                                       Premise(F707)
	S107= [ALUOut_WB]=FU(base)+{16{offset[15]},offset}          ALUOut_WB-Write(S98,S106)
	S108= CtrlICache=0                                          Premise(F713)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S88,S108)
	S110= CtrlDR_WB=1                                           Premise(F729)
	S111= [DR_WB]=a                                             DR_WB-Write(S103,S110)
	S112= CtrlIR_WB=1                                           Premise(F736)
	S113= [IR_WB]={37,rS,rT,offset}                             IR_WB-Write(S105,S112)
	S114= CtrlPC=0                                              Premise(F739)
	S115= CtrlPCInc=0                                           Premise(F740)
	S116= PC[Out]=addr+4                                        PC-Hold(S93,S114,S115)

WB	S117= ALUOut_WB.Out1_0={FU(base)+{16{offset[15]},offset}}[1:0]ALUOut_WB-Out(S107)
	S118= DR_WB.Out=a                                           DR_WB-Out(S111)
	S119= IR_WB.Out20_16=rT                                     IR-Out(S113)
	S120= MemDataSelL.Out=>GPR.WData                            Premise(F1095)
	S121= IR_WB.Out20_16=>GPR.WReg                              Premise(F1096)
	S122= GPR.WReg=rT                                           Path(S119,S121)
	S123= ALUOut_WB.Out1_0=>MemDataSelL.Addr                    Premise(F1117)
	S124= MemDataSelL.Addr={FU(base)+{16{offset[15]},offset}}[1:0]Path(S117,S123)
	S125= DR_WB.Out=>MemDataSelL.In                             Premise(F1119)
	S126= MemDataSelL.In=a                                      Path(S118,S125)
	S127= MemDataSelL.Out={16{0},a[{FU(base)+{16{offset[15]},offset}}[1:0]*8+15,{FU(base)+{16{offset[15]},offset}}[1:0]*8]}MemDataSelL(S126,S124)
	S128= GPR.WData={16{0},a[{FU(base)+{16{offset[15]},offset}}[1:0]*8+15,{FU(base)+{16{offset[15]},offset}}[1:0]*8]}Path(S127,S120)
	S129= CtrlICache=0                                          Premise(F1155)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S129)
	S131= CtrlGPR=1                                             Premise(F1179)
	S132= GPR[rT]={16{0},a[{FU(base)+{16{offset[15]},offset}}[1:0]*8+15,{FU(base)+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S122,S128,S131)
	S133= CtrlPC=0                                              Premise(F1181)
	S134= CtrlPCInc=0                                           Premise(F1182)
	S135= PC[Out]=addr+4                                        PC-Hold(S116,S133,S134)

POST	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S129)
	S132= GPR[rT]={16{0},a[{FU(base)+{16{offset[15]},offset}}[1:0]*8+15,{FU(base)+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S122,S128,S131)
	S135= PC[Out]=addr+4                                        PC-Hold(S116,S133,S134)

