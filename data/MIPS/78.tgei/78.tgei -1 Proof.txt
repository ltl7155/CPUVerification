
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,8,imm}                           Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={1,rs,8,imm}                                  IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={1,rs,8,imm}                                     Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F7)
	S14= CtrlPCInc=1                                            Premise(F8)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlCP0=0                                              Premise(F11)
	S17= CP0[ASID]=pid                                          CP0-Hold(S0,S16)
	S18= CtrlIR=1                                               Premise(F14)
	S19= [IR]={1,rs,8,imm}                                      IR-Write(S12,S18)
	S20= CtrlGPR=0                                              Premise(F15)
	S21= GPR[rs]=a                                              GPR-Hold(S3,S20)

ID	S22= IR.Out25_21=rs                                         IR-Out(S19)
	S23= IR.Out15_0=imm                                         IR-Out(S19)
	S24= IR.Out25_21=>GPR.RReg1                                 Premise(F21)
	S25= GPR.RReg1=rs                                           Path(S22,S24)
	S26= GPR.Rdata1=a                                           GPR-Read(S25,S21)
	S27= IR.Out15_0=>IMMEXT.In                                  Premise(F23)
	S28= IMMEXT.In=imm                                          Path(S23,S27)
	S29= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S28)
	S30= GPR.Rdata1=>A.In                                       Premise(F24)
	S31= A.In=a                                                 Path(S26,S30)
	S32= IMMEXT.Out=>B.In                                       Premise(F25)
	S33= B.In={16{imm[15]},imm}                                 Path(S29,S32)
	S34= CtrlPC=0                                               Premise(F26)
	S35= CtrlPCInc=0                                            Premise(F27)
	S36= PC[Out]=addr+4                                         PC-Hold(S15,S34,S35)
	S37= CtrlCP0=0                                              Premise(F30)
	S38= CP0[ASID]=pid                                          CP0-Hold(S17,S37)
	S39= CtrlA=1                                                Premise(F35)
	S40= [A]=a                                                  A-Write(S31,S39)
	S41= CtrlB=1                                                Premise(F36)
	S42= [B]={16{imm[15]},imm}                                  B-Write(S33,S41)

EX	S43= A.Out=a                                                A-Out(S40)
	S44= B.Out={16{imm[15]},imm}                                B-Out(S42)
	S45= A.Out=>CMPU.A                                          Premise(F39)
	S46= CMPU.A=a                                               Path(S43,S45)
	S47= B.Out=>CMPU.B                                          Premise(F40)
	S48= CMPU.B={16{imm[15]},imm}                               Path(S44,S47)
	S49= CMPU.lt=CompareS(a,{16{imm[15]},imm})                  CMPU-CMPS(S46,S48)
	S50= CMPU.lt=>ConditionReg.In                               Premise(F42)
	S51= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F43)
	S53= CtrlPCInc=0                                            Premise(F44)
	S54= PC[Out]=addr+4                                         PC-Hold(S36,S52,S53)
	S55= CtrlCP0=0                                              Premise(F47)
	S56= CP0[ASID]=pid                                          CP0-Hold(S38,S55)
	S57= CtrlConditionReg=1                                     Premise(F54)
	S58= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S51,S57)

MEM	S59= PC.Out=addr+4                                          PC-Out(S54)
	S60= CP0.ASID=pid                                           CP0-Read-ASID(S56)
	S61= PC.Out=>CP0.EPCIn                                      Premise(F56)
	S62= CP0.EPCIn=addr+4                                       Path(S59,S61)
	S63= CP0.ExCodeIn=5'h0d                                     Premise(F57)
	S64= CP0.ASID=>PIDReg.In                                    Premise(F59)
	S65= PIDReg.In=pid                                          Path(S60,S64)
	S66= CtrlEPCIn=1                                            Premise(F66)
	S67= CP0[EPC]=addr+4                                        CP0-Write-EPC(S62,S66)
	S68= CtrlExCodeIn=1                                         Premise(F67)
	S69= CP0[ExCode]=5'h0d                                      CP0-Write-ExCode(S63,S68)
	S70= CtrlConditionReg=0                                     Premise(F72)
	S71= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S58,S70)
	S72= CtrlPIDReg=1                                           Premise(F73)
	S73= [PIDReg]=pid                                           PIDReg-Write(S65,S72)

WB	S74= CtrlCP0=0                                              Premise(F78)
	S75= CP0[EPC]=addr+4                                        CP0-Hold(S67,S74)
	S76= CP0[ExCode]=5'h0d                                      CP0-Hold(S69,S74)
	S77= CtrlConditionReg=0                                     Premise(F85)
	S78= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S71,S77)
	S79= CtrlPIDReg=0                                           Premise(F86)
	S80= [PIDReg]=pid                                           PIDReg-Hold(S73,S79)

POST	S75= CP0[EPC]=addr+4                                        CP0-Hold(S67,S74)
	S76= CP0[ExCode]=5'h0d                                      CP0-Hold(S69,S74)
	S78= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S71,S77)
	S80= [PIDReg]=pid                                           PIDReg-Hold(S73,S79)

