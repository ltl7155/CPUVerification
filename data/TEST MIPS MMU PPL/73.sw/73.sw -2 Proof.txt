
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= ICache[addr]={43,rS,rT,offset}                          Premise(F3)
	S3= GPR[rS]=base                                            Premise(F4)
	S4= GPR[rT]=a                                               Premise(F5)

IF	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>ICache.IEA                                      Premise(F10)
	S7= ICache.IEA=addr                                         Path(S5,S6)
	S8= ICache.Out={43,rS,rT,offset}                            ICache-Search(S7,S2)
	S9= ICache.Out=>IR_ID.In                                    Premise(F14)
	S10= IR_ID.In={43,rS,rT,offset}                             Path(S8,S9)
	S11= CtrlCP0=0                                              Premise(F23)
	S12= CP0[ASID]=pid                                          CP0-Hold(S0,S11)
	S13= CtrlPC=0                                               Premise(F27)
	S14= CtrlPCInc=1                                            Premise(F28)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR_ID=1                                            Premise(F33)
	S17= [IR_ID]={43,rS,rT,offset}                              IR_ID-Write(S10,S16)
	S18= CtrlGPR=0                                              Premise(F36)
	S19= GPR[rS]=base                                           GPR-Hold(S3,S18)
	S20= GPR[rT]=a                                              GPR-Hold(S4,S18)

ID	S21= IR_ID.Out={43,rS,rT,offset}                            IR-Out(S17)
	S22= IR_ID.Out25_21=rS                                      IR-Out(S17)
	S23= IR_ID.Out15_0=offset                                   IR-Out(S17)
	S24= IR_ID.Out25_21=>GPR.RReg1                              Premise(F110)
	S25= GPR.RReg1=rS                                           Path(S22,S24)
	S26= GPR.Rdata1=base                                        GPR-Read(S25,S19)
	S27= IR_ID.Out15_0=>IMMEXT.In                               Premise(F111)
	S28= IMMEXT.In=offset                                       Path(S23,S27)
	S29= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S28)
	S30= GPR.Rdata1=>FU.InID1                                   Premise(F112)
	S31= FU.InID1=base                                          Path(S26,S30)
	S32= FU.OutID1=FU(base)                                     FU-Forward(S31)
	S33= FU.OutID1=>A_EX.In                                     Premise(F114)
	S34= A_EX.In=FU(base)                                       Path(S32,S33)
	S35= IMMEXT.Out=>B_EX.In                                    Premise(F115)
	S36= B_EX.In={16{offset[15]},offset}                        Path(S29,S35)
	S37= IR_ID.Out=>IR_EX.In                                    Premise(F116)
	S38= IR_EX.In={43,rS,rT,offset}                             Path(S21,S37)
	S39= CtrlCP0=0                                              Premise(F121)
	S40= CP0[ASID]=pid                                          CP0-Hold(S12,S39)
	S41= CtrlPC=0                                               Premise(F125)
	S42= CtrlPCInc=0                                            Premise(F126)
	S43= PC[Out]=addr+4                                         PC-Hold(S15,S41,S42)
	S44= CtrlGPR=0                                              Premise(F134)
	S45= GPR[rT]=a                                              GPR-Hold(S20,S44)
	S46= CtrlA_EX=1                                             Premise(F135)
	S47= [A_EX]=FU(base)                                        A_EX-Write(S34,S46)
	S48= CtrlB_EX=1                                             Premise(F136)
	S49= [B_EX]={16{offset[15]},offset}                         B_EX-Write(S36,S48)
	S50= CtrlIR_EX=1                                            Premise(F137)
	S51= [IR_EX]={43,rS,rT,offset}                              IR_EX-Write(S38,S50)

EX	S52= A_EX.Out=FU(base)                                      A_EX-Out(S47)
	S53= B_EX.Out={16{offset[15]},offset}                       B_EX-Out(S49)
	S54= IR_EX.Out20_16=rT                                      IR_EX-Out(S51)
	S55= A_EX.Out=>ALU.A                                        Premise(F166)
	S56= ALU.A=FU(base)                                         Path(S52,S55)
	S57= B_EX.Out=>ALU.B                                        Premise(F167)
	S58= ALU.B={16{offset[15]},offset}                          Path(S53,S57)
	S59= ALU.Out=FU(base)+{16{offset[15]},offset}               ALU(S56,S58)
	S60= ALU.Out1_0={FU(base)+{16{offset[15]},offset}}[1:0]     ALU(S56,S58)
	S61= ALU.Out=>ALUOut_MEM.In                                 Premise(F169)
	S62= ALUOut_MEM.In=FU(base)+{16{offset[15]},offset}         Path(S59,S61)
	S63= IR_EX.Out20_16=>GPR.RReg2                              Premise(F170)
	S64= GPR.RReg2=rT                                           Path(S54,S63)
	S65= GPR.Rdata2=a                                           GPR-Read(S64,S45)
	S66= GPR.Rdata2=>MemDataSelS.In                             Premise(F171)
	S67= MemDataSelS.In=a                                       Path(S65,S66)
	S68= ALU.Out1_0=>MemDataSelS.Addr                           Premise(F172)
	S69= MemDataSelS.Addr={FU(base)+{16{offset[15]},offset}}[1:0]Path(S60,S68)
	S70= MemDataSelS.Out=a                                      MemDataSelS(S67,S69)
	S71= MemDataSelS.Out=>DR_MEM.In                             Premise(F174)
	S72= DR_MEM.In=a                                            Path(S70,S71)
	S73= CtrlCP0=0                                              Premise(F178)
	S74= CP0[ASID]=pid                                          CP0-Hold(S40,S73)
	S75= CtrlPC=0                                               Premise(F182)
	S76= CtrlPCInc=0                                            Premise(F183)
	S77= PC[Out]=addr+4                                         PC-Hold(S43,S75,S76)
	S78= CtrlALUOut_MEM=1                                       Premise(F195)
	S79= [ALUOut_MEM]=FU(base)+{16{offset[15]},offset}          ALUOut_MEM-Write(S62,S78)
	S80= CtrlDR_MEM=1                                           Premise(F196)
	S81= [DR_MEM]=a                                             DR_MEM-Write(S72,S80)

MEM	S82= CP0.ASID=pid                                           CP0-Read-ASID(S74)
	S83= ALUOut_MEM.Out=FU(base)+{16{offset[15]},offset}        ALUOut_MEM-Out(S79)
	S84= DR_MEM.Out=a                                           DR_MEM-Out(S81)
	S85= CP0.ASID=>DMMU.PID                                     Premise(F225)
	S86= DMMU.PID=pid                                           Path(S82,S85)
	S87= ALUOut_MEM.Out=>DMMU.IEA                               Premise(F226)
	S88= DMMU.IEA=FU(base)+{16{offset[15]},offset}              Path(S83,S87)
	S89= DMMU.Addr={pid,FU(base)+{16{offset[15]},offset}}       DMMU-Search(S86,S88)
	S90= DMMU.Addr=>DAddrReg_DMMU1.In                           Premise(F227)
	S91= DAddrReg_DMMU1.In={pid,FU(base)+{16{offset[15]},offset}}Path(S89,S90)
	S92= DR_MEM.Out=>DR_DMMU1.In                                Premise(F234)
	S93= DR_DMMU1.In=a                                          Path(S84,S92)
	S94= CtrlPC=0                                               Premise(F245)
	S95= CtrlPCInc=0                                            Premise(F246)
	S96= PC[Out]=addr+4                                         PC-Hold(S77,S94,S95)
	S97= CtrlDAddrReg_DMMU1=1                                   Premise(F262)
	S98= [DAddrReg_DMMU1]={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU1-Write(S91,S97)
	S99= CtrlDR_DMMU1=1                                         Premise(F272)
	S100= [DR_DMMU1]=a                                          DR_DMMU1-Write(S93,S99)

MEM(DMMU1)	S101= DAddrReg_DMMU1.Out={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU1-Out(S98)
	S102= DR_DMMU1.Out=a                                        DR_DMMU1-Out(S100)
	S103= DR_DMMU1.Out=>DR_DMMU2.In                             Premise(F291)
	S104= DR_DMMU2.In=a                                         Path(S102,S103)
	S105= DAddrReg_DMMU1.Out=>DAddrReg_DMMU2.In                 Premise(F292)
	S106= DAddrReg_DMMU2.In={pid,FU(base)+{16{offset[15]},offset}}Path(S101,S105)
	S107= CtrlPC=0                                              Premise(F299)
	S108= CtrlPCInc=0                                           Premise(F300)
	S109= PC[Out]=addr+4                                        PC-Hold(S96,S107,S108)
	S110= CtrlDR_DMMU2=1                                        Premise(F332)
	S111= [DR_DMMU2]=a                                          DR_DMMU2-Write(S104,S110)
	S112= CtrlDAddrReg_DMMU2=1                                  Premise(F333)
	S113= [DAddrReg_DMMU2]={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU2-Write(S106,S112)

MEM(DMMU2)	S114= DR_DMMU2.Out=a                                        DR_DMMU2-Out(S111)
	S115= DAddrReg_DMMU2.Out={pid,FU(base)+{16{offset[15]},offset}}DAddrReg_DMMU2-Out(S113)
	S116= DAddrReg_DMMU2.Out=>DMem.WAddr                        Premise(F340)
	S117= DMem.WAddr={pid,FU(base)+{16{offset[15]},offset}}     Path(S115,S116)
	S118= DR_DMMU2.Out=>DMem.WData                              Premise(F341)
	S119= DMem.WData=a                                          Path(S114,S118)
	S120= CtrlPC=0                                              Premise(F351)
	S121= CtrlPCInc=0                                           Premise(F352)
	S122= PC[Out]=addr+4                                        PC-Hold(S109,S120,S121)
	S123= CtrlDMem=1                                            Premise(F386)
	S124= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a        DMem-Write(S117,S119,S123)

WB	S125= CtrlPC=0                                              Premise(F396)
	S126= CtrlPCInc=0                                           Premise(F397)
	S127= PC[Out]=addr+4                                        PC-Hold(S122,S125,S126)
	S128= CtrlDMem=0                                            Premise(F431)
	S129= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a        DMem-Hold(S124,S128)

POST	S127= PC[Out]=addr+4                                        PC-Hold(S122,S125,S126)
	S129= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a        DMem-Hold(S124,S128)

