
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,0,hint,8}                      Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F17)
	S14= CtrlPCInc=0                                            Premise(F18)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F19)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F23)
	S19= IMem[{pid,addr}]={0,rS,0,0,hint,8}                     IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F25)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F28)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,rS,0,0,hint,8}                             IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F29)
	S29= IRMux.MemData={0,rS,0,0,hint,8}                        Path(S26,S28)
	S30= IRMux.Out={0,rS,0,0,hint,8}                            IRMux-Select2(S29)
	S31= IRMux.Out=>IR.In                                       Premise(F33)
	S32= IR.In={0,rS,0,0,hint,8}                                Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F34)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F35)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlICache=1                                           Premise(F44)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S37)
	S39= CtrlIR=1                                               Premise(F45)
	S40= [IR]={0,rS,0,0,hint,8}                                 IR-Write(S32,S39)
	S41= CtrlGPR=0                                              Premise(F49)
	S42= GPR[rS]=a                                              GPR-Hold(S21,S41)

ID	S43= IR.Out25_21=rS                                         IR-Out(S40)
	S44= IR.Out25_21=>GPR.RReg1                                 Premise(F51)
	S45= GPR.RReg1=rS                                           Path(S43,S44)
	S46= GPR.Rdata1=a                                           GPR-Read(S45,S42)
	S47= GPR.Rdata1=>PC.In                                      Premise(F53)
	S48= PC.In=a                                                Path(S46,S47)
	S49= CtrlPC=1                                               Premise(F59)
	S50= CtrlPCInc=0                                            Premise(F60)
	S51= PC[Out]=a                                              PC-Write(S48,S49,S50)
	S52= CtrlICache=0                                           Premise(F62)
	S53= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S52)

EX	S54= CtrlPC=0                                               Premise(F73)
	S55= CtrlPCInc=0                                            Premise(F74)
	S56= PC[Out]=a                                              PC-Hold(S51,S54,S55)
	S57= CtrlICache=0                                           Premise(F76)
	S58= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S53,S57)

MEM	S59= CtrlPC=0                                               Premise(F87)
	S60= CtrlPCInc=0                                            Premise(F88)
	S61= PC[Out]=a                                              PC-Hold(S56,S59,S60)
	S62= CtrlICache=0                                           Premise(F90)
	S63= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S58,S62)

WB	S64= CtrlPC=0                                               Premise(F129)
	S65= CtrlPCInc=0                                            Premise(F130)
	S66= PC[Out]=a                                              PC-Hold(S61,S64,S65)
	S67= CtrlICache=0                                           Premise(F132)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S63,S67)

POST	S66= PC[Out]=a                                              PC-Hold(S61,S64,S65)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S63,S67)

