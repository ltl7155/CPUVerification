
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={4,rS,rT,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={4,rS,rT,offset}                      IMem-Hold(S2,S17)

IF(IMMU)	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= IAddrReg.Out=>IMem.RAddr                               Premise(F54)
	S22= IMem.RAddr={pid,addr}                                  Path(S20,S21)
	S23= IMem.Out={4,rS,rT,offset}                              IMem-Read(S22,S18)
	S24= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S22,S18)
	S25= IMem.Out=>IRMux.MemData                                Premise(F55)
	S26= IRMux.MemData={4,rS,rT,offset}                         Path(S23,S25)
	S27= IRMux.Out={4,rS,rT,offset}                             IRMux-Select2(S26)
	S28= IRMux.Out=>IR_ID.In                                    Premise(F59)
	S29= IR_ID.In={4,rS,rT,offset}                              Path(S27,S28)
	S30= IMem.MEM8WordOut=>ICache.WData                         Premise(F60)
	S31= ICache.WData=IMemGet8Word({pid,addr})                  Path(S24,S30)
	S32= PC.Out=>ICache.IEA                                     Premise(F61)
	S33= ICache.IEA=addr                                        Path(S19,S32)
	S34= CtrlPC=0                                               Premise(F69)
	S35= CtrlPCInc=1                                            Premise(F70)
	S36= PC[CIA]=addr                                           PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F72)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S31,S37)
	S39= CtrlIR_ID=1                                            Premise(F75)
	S40= [IR_ID]={4,rS,rT,offset}                               IR_ID-Write(S29,S39)

ID	S41= IR_ID.Out={4,rS,rT,offset}                             IR-Out(S40)
	S42= IR_ID.Out=>IR_EX.In                                    Premise(F106)
	S43= IR_EX.In={4,rS,rT,offset}                              Path(S41,S42)
	S44= CtrlPCInc=0                                            Premise(F115)
	S45= PC[CIA]=addr                                           PC-Hold(S36,S44)
	S46= CtrlICache=0                                           Premise(F117)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S46)
	S48= CtrlIR_EX=1                                            Premise(F126)
	S49= [IR_EX]={4,rS,rT,offset}                               IR_EX-Write(S43,S48)

EX	S50= PC.CIA=addr                                            PC-Out(S45)
	S51= IR_EX.Out15_0=offset                                   IR_EX-Out(S49)
	S52= IR_EX.Out15_0=>SEXT.In                                 Premise(F143)
	S53= SEXT.In=offset                                         Path(S51,S52)
	S54= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S53)
	S55= PC.CIA=>ALU.A                                          Premise(F144)
	S56= ALU.A=addr                                             Path(S50,S55)
	S57= SEXT.Out=>ALU.B                                        Premise(F145)
	S58= ALU.B={14{offset[15]},offset,2{0}}                     Path(S54,S57)
	S59= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S56,S58)
	S60= ALU.Out=>ALUOut_MEM.In                                 Premise(F147)
	S61= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S59,S60)
	S62= CtrlICache=0                                           Premise(F162)
	S63= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S62)
	S64= CtrlALUOut_MEM=1                                       Premise(F172)
	S65= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S61,S64)

MEM	S66= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S65)
	S67= ALUOut_MEM.Out=>PC.In                                  Premise(F190)
	S68= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S66,S67)
	S69= CtrlPC=1                                               Premise(F206)
	S70= CtrlPCInc=0                                            Premise(F207)
	S71= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S68,S69,S70)
	S72= CtrlICache=0                                           Premise(F209)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S63,S72)

WB	S74= CtrlPC=0                                               Premise(F314)
	S75= CtrlPCInc=0                                            Premise(F315)
	S76= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S71,S74,S75)
	S77= CtrlICache=0                                           Premise(F317)
	S78= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S77)

POST	S76= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S71,S74,S75)
	S78= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S77)

