
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={40,rS,rT,offset}                          Premise(F3)
	S2= GPR[rS]=base                                            Premise(F4)
	S3= GPR[rT]=a                                               Premise(F5)

IF	S4= PC.Out=addr                                             PC-Out(S0)
	S5= PC.Out=>ICache.IEA                                      Premise(F10)
	S6= ICache.IEA=addr                                         Path(S4,S5)
	S7= ICache.Out={40,rS,rT,offset}                            ICache-Search(S6,S1)
	S8= ICache.Out=>IR.In                                       Premise(F11)
	S9= IR.In={40,rS,rT,offset}                                 Path(S7,S8)
	S10= CtrlPC=0                                               Premise(F19)
	S11= CtrlPCInc=1                                            Premise(F20)
	S12= PC[Out]=addr+4                                         PC-Inc(S0,S10,S11)
	S13= CtrlIR=1                                               Premise(F23)
	S14= [IR]={40,rS,rT,offset}                                 IR-Write(S9,S13)
	S15= CtrlGPR=0                                              Premise(F27)
	S16= GPR[rS]=base                                           GPR-Hold(S2,S15)
	S17= GPR[rT]=a                                              GPR-Hold(S3,S15)

ID	S18= IR.Out25_21=rS                                         IR-Out(S14)
	S19= IR.Out15_0=offset                                      IR-Out(S14)
	S20= IR.Out25_21=>GPR.RReg1                                 Premise(F61)
	S21= GPR.RReg1=rS                                           Path(S18,S20)
	S22= GPR.Rdata1=base                                        GPR-Read(S21,S16)
	S23= IR.Out15_0=>IMMEXT.In                                  Premise(F62)
	S24= IMMEXT.In=offset                                       Path(S19,S23)
	S25= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S24)
	S26= GPR.Rdata1=>A.In                                       Premise(F63)
	S27= A.In=base                                              Path(S22,S26)
	S28= IMMEXT.Out=>B.In                                       Premise(F64)
	S29= B.In={16{offset[15]},offset}                           Path(S25,S28)
	S30= CtrlPC=0                                               Premise(F70)
	S31= CtrlPCInc=0                                            Premise(F71)
	S32= PC[Out]=addr+4                                         PC-Hold(S12,S30,S31)
	S33= CtrlIR=0                                               Premise(F74)
	S34= [IR]={40,rS,rT,offset}                                 IR-Hold(S14,S33)
	S35= CtrlGPR=0                                              Premise(F78)
	S36= GPR[rT]=a                                              GPR-Hold(S17,S35)
	S37= CtrlA=1                                                Premise(F79)
	S38= [A]=base                                               A-Write(S27,S37)
	S39= CtrlB=1                                                Premise(F80)
	S40= [B]={16{offset[15]},offset}                            B-Write(S29,S39)

EX	S41= IR.Out20_16=rT                                         IR-Out(S34)
	S42= A.Out=base                                             A-Out(S38)
	S43= B.Out={16{offset[15]},offset}                          B-Out(S40)
	S44= A.Out=>ALU.A                                           Premise(F88)
	S45= ALU.A=base                                             Path(S42,S44)
	S46= B.Out=>ALU.B                                           Premise(F89)
	S47= ALU.B={16{offset[15]},offset}                          Path(S43,S46)
	S48= ALU.Out=base+{16{offset[15]},offset}                   ALU(S45,S47)
	S49= ALU.Out1_0={base+{16{offset[15]},offset}}[1:0]         ALU(S45,S47)
	S50= ALU.Out=>ALUOut.In                                     Premise(F91)
	S51= ALUOut.In=base+{16{offset[15]},offset}                 Path(S48,S50)
	S52= IR.Out20_16=>GPR.RReg2                                 Premise(F92)
	S53= GPR.RReg2=rT                                           Path(S41,S52)
	S54= GPR.Rdata2=a                                           GPR-Read(S53,S36)
	S55= GPR.Rdata2=>MemDataSelS.In                             Premise(F93)
	S56= MemDataSelS.In=a                                       Path(S54,S55)
	S57= ALU.Out1_0=>MemDataSelS.Addr                           Premise(F94)
	S58= MemDataSelS.Addr={base+{16{offset[15]},offset}}[1:0]   Path(S49,S57)
	S59= MemDataSelS.Out={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}MemDataSelS(S56,S58)
	S60= MemDataSelS.Out=>DR.In                                 Premise(F96)
	S61= DR.In={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}Path(S59,S60)
	S62= CtrlPC=0                                               Premise(F102)
	S63= CtrlPCInc=0                                            Premise(F103)
	S64= PC[Out]=addr+4                                         PC-Hold(S32,S62,S63)
	S65= CtrlALUOut=1                                           Premise(F113)
	S66= [ALUOut]=base+{16{offset[15]},offset}                  ALUOut-Write(S51,S65)
	S67= CtrlDR=1                                               Premise(F114)
	S68= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Write(S61,S67)

MEM	S69= ALUOut.Out=base+{16{offset[15]},offset}                ALUOut-Out(S66)
	S70= DR.Out={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Out(S68)
	S71= ALUOut.Out=>DCache.IEA                                 Premise(F124)
	S72= DCache.IEA=base+{16{offset[15]},offset}                Path(S69,S71)
	S73= DR.Out=>DCache.In                                      Premise(F126)
	S74= DCache.In={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}Path(S70,S73)
	S75= CtrlPC=0                                               Premise(F132)
	S76= CtrlPCInc=0                                            Premise(F133)
	S77= PC[Out]=addr+4                                         PC-Hold(S64,S75,S76)
	S78= CtrlDCache=1                                           Premise(F147)
	S79= DCache[base+{16{offset[15]},offset}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DCache-Write(S72,S74,S78)

WB	S80= CtrlPC=0                                               Premise(F207)
	S81= CtrlPCInc=0                                            Premise(F208)
	S82= PC[Out]=addr+4                                         PC-Hold(S77,S80,S81)
	S83= CtrlDCache=0                                           Premise(F222)
	S84= DCache[base+{16{offset[15]},offset}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DCache-Hold(S79,S83)

POST	S82= PC[Out]=addr+4                                         PC-Hold(S77,S80,S81)
	S84= DCache[base+{16{offset[15]},offset}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DCache-Hold(S79,S83)

