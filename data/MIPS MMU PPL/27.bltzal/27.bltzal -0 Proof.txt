
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,16,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={1,rS,16,offset}                      IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F51)

IF(IMMU)	S20= PC.Out=addr                                            PC-Out(S14)
	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S22= IAddrReg.Out=>IMem.RAddr                               Premise(F55)
	S23= IMem.RAddr={pid,addr}                                  Path(S21,S22)
	S24= IMem.Out={1,rS,16,offset}                              IMem-Read(S23,S18)
	S25= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S23,S18)
	S26= IMem.Out=>IRMux.MemData                                Premise(F56)
	S27= IRMux.MemData={1,rS,16,offset}                         Path(S24,S26)
	S28= IRMux.Out={1,rS,16,offset}                             IRMux-Select2(S27)
	S29= IRMux.Out=>IR_ID.In                                    Premise(F60)
	S30= IR_ID.In={1,rS,16,offset}                              Path(S28,S29)
	S31= IMem.MEM8WordOut=>ICache.WData                         Premise(F61)
	S32= ICache.WData=IMemGet8Word({pid,addr})                  Path(S25,S31)
	S33= PC.Out=>ICache.IEA                                     Premise(F62)
	S34= ICache.IEA=addr                                        Path(S20,S33)
	S35= CtrlPC=0                                               Premise(F70)
	S36= CtrlPCInc=1                                            Premise(F71)
	S37= PC[Out]=addr+4                                         PC-Inc(S14,S35,S36)
	S38= PC[CIA]=addr                                           PC-Inc(S14,S35,S36)
	S39= CtrlICache=1                                           Premise(F73)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S34,S32,S39)
	S41= CtrlIR_ID=1                                            Premise(F76)
	S42= [IR_ID]={1,rS,16,offset}                               IR_ID-Write(S30,S41)
	S43= CtrlGPR=0                                              Premise(F79)
	S44= GPR[rS]=a                                              GPR-Hold(S19,S43)

ID	S45= IR_ID.Out={1,rS,16,offset}                             IR-Out(S42)
	S46= IR_ID.Out25_21=rS                                      IR-Out(S42)
	S47= IR_ID.Out25_21=>GPR.RReg1                              Premise(F101)
	S48= GPR.RReg1=rS                                           Path(S46,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S44)
	S50= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F103)
	S52= FU.InID1=a                                             Path(S49,S51)
	S53= FU.OutID1=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID1=>A_EX.In                                     Premise(F105)
	S55= A_EX.In=FU(a)                                          Path(S53,S54)
	S56= GPR.Rdata2=>FU.InID2                                   Premise(F106)
	S57= FU.InID2=32'b0                                         Path(S50,S56)
	S58= FU.OutID2=FU(32'b0)                                    FU-Forward(S57)
	S59= FU.OutID2=>B_EX.In                                     Premise(F108)
	S60= B_EX.In=FU(32'b0)                                      Path(S58,S59)
	S61= IR_ID.Out=>IR_EX.In                                    Premise(F109)
	S62= IR_EX.In={1,rS,16,offset}                              Path(S45,S61)
	S63= CtrlPC=0                                               Premise(F117)
	S64= CtrlPCInc=0                                            Premise(F118)
	S65= PC[CIA]=addr                                           PC-Hold(S38,S64)
	S66= PC[Out]=addr+4                                         PC-Hold(S37,S63,S64)
	S67= CtrlICache=0                                           Premise(F120)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S67)
	S69= CtrlA_EX=1                                             Premise(F127)
	S70= [A_EX]=FU(a)                                           A_EX-Write(S55,S69)
	S71= CtrlB_EX=1                                             Premise(F128)
	S72= [B_EX]=FU(32'b0)                                       B_EX-Write(S60,S71)
	S73= CtrlIR_EX=1                                            Premise(F129)
	S74= [IR_EX]={1,rS,16,offset}                               IR_EX-Write(S62,S73)

EX	S75= PC.CIA=addr                                            PC-Out(S65)
	S76= PC.Out=addr+4                                          PC-Out(S66)
	S77= A_EX.Out=FU(a)                                         A_EX-Out(S70)
	S78= B_EX.Out=FU(32'b0)                                     B_EX-Out(S72)
	S79= IR_EX.Out15_0=offset                                   IR_EX-Out(S74)
	S80= IR_EX.Out15_0=>SEXT.In                                 Premise(F148)
	S81= SEXT.In=offset                                         Path(S79,S80)
	S82= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S81)
	S83= PC.CIA=>ALU.A                                          Premise(F149)
	S84= ALU.A=addr                                             Path(S75,S83)
	S85= SEXT.Out=>ALU.B                                        Premise(F150)
	S86= ALU.B={14{offset[15]},offset,2{0}}                     Path(S82,S85)
	S87= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S84,S86)
	S88= ALU.Out=>ALUOut_MEM.In                                 Premise(F152)
	S89= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S87,S88)
	S90= A_EX.Out=>CMPU.A                                       Premise(F153)
	S91= CMPU.A=FU(a)                                           Path(S77,S90)
	S92= B_EX.Out=>CMPU.B                                       Premise(F154)
	S93= CMPU.B=FU(32'b0)                                       Path(S78,S92)
	S94= CMPU.lt=CompareS(FU(a),FU(32'b0))                      CMPU-CMPS(S91,S93)
	S95= CMPU.lt=>ConditionReg_MEM.In                           Premise(F156)
	S96= ConditionReg_MEM.In=CompareS(FU(a),FU(32'b0))          Path(S94,S95)
	S97= GPR.WReg=5'd31                                         Premise(F157)
	S98= PC.Out=>GPR.WData                                      Premise(F158)
	S99= GPR.WData=addr+4                                       Path(S76,S98)
	S100= CtrlICache=0                                          Premise(F170)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S68,S100)
	S102= CtrlGPR=1                                             Premise(F176)
	S103= GPR[5'd31]=addr+4                                     GPR-Write(S97,S99,S102)
	S104= CtrlALUOut_MEM=1                                      Premise(F180)
	S105= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}        ALUOut_MEM-Write(S89,S104)
	S106= CtrlConditionReg_MEM=1                                Premise(F181)
	S107= [ConditionReg_MEM]=CompareS(FU(a),FU(32'b0))          ConditionReg_MEM-Write(S96,S106)

MEM	S108= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}      ALUOut_MEM-Out(S105)
	S109= ConditionReg_MEM.Out=CompareS(FU(a),FU(32'b0))        ConditionReg_MEM-Out(S107)
	S110= ALUOut_MEM.Out=>PC.In                                 Premise(F200)
	S111= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S108,S110)
	S112= ConditionReg_MEM.Out=>ConditionReg_WB.In              Premise(F208)
	S113= ConditionReg_WB.In=CompareS(FU(a),FU(32'b0))          Path(S109,S112)
	S114= CtrlPC=1                                              Premise(F217)
	S115= CtrlPCInc=0                                           Premise(F218)
	S116= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S111,S114,S115)
	S117= CtrlICache=0                                          Premise(F220)
	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S117)
	S119= CtrlGPR=0                                             Premise(F226)
	S120= GPR[5'd31]=addr+4                                     GPR-Hold(S103,S119)
	S121= CtrlConditionReg_WB=1                                 Premise(F241)
	S122= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))           ConditionReg_WB-Write(S113,S121)

WB	S123= CtrlPC=0                                              Premise(F333)
	S124= CtrlPCInc=0                                           Premise(F334)
	S125= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S116,S123,S124)
	S126= CtrlICache=0                                          Premise(F336)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S126)
	S128= CtrlGPR=0                                             Premise(F342)
	S129= GPR[5'd31]=addr+4                                     GPR-Hold(S120,S128)
	S130= CtrlConditionReg_WB=0                                 Premise(F357)
	S131= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))           ConditionReg_WB-Hold(S122,S130)

POST	S125= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S116,S123,S124)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S126)
	S129= GPR[5'd31]=addr+4                                     GPR-Hold(S120,S128)
	S131= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))           ConditionReg_WB-Hold(S122,S130)

