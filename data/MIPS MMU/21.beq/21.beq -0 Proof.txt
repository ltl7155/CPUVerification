
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={4,rS,rT,offset}                       Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F6)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F18)
	S13= CtrlPCInc=0                                            Premise(F19)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F20)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F24)
	S18= IMem[{pid,addr}]={4,rS,rT,offset}                      IMem-Hold(S2,S17)

IF(IMMU)	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= IAddrReg.Out=>IMem.RAddr                               Premise(F33)
	S22= IMem.RAddr={pid,addr}                                  Path(S20,S21)
	S23= IMem.Out={4,rS,rT,offset}                              IMem-Read(S22,S18)
	S24= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S22,S18)
	S25= IMem.Out=>IRMux.MemData                                Premise(F34)
	S26= IRMux.MemData={4,rS,rT,offset}                         Path(S23,S25)
	S27= IRMux.Out={4,rS,rT,offset}                             IRMux-Select2(S26)
	S28= IRMux.Out=>IR.In                                       Premise(F38)
	S29= IR.In={4,rS,rT,offset}                                 Path(S27,S28)
	S30= IMem.MEM8WordOut=>ICache.WData                         Premise(F39)
	S31= ICache.WData=IMemGet8Word({pid,addr})                  Path(S24,S30)
	S32= PC.Out=>ICache.IEA                                     Premise(F40)
	S33= ICache.IEA=addr                                        Path(S19,S32)
	S34= CtrlPC=0                                               Premise(F46)
	S35= CtrlPCInc=1                                            Premise(F47)
	S36= PC[CIA]=addr                                           PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F49)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S31,S37)
	S39= CtrlIR=1                                               Premise(F51)
	S40= [IR]={4,rS,rT,offset}                                  IR-Write(S29,S39)

ID	S41= CtrlPCInc=0                                            Premise(F70)
	S42= PC[CIA]=addr                                           PC-Hold(S36,S41)
	S43= CtrlICache=0                                           Premise(F72)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S43)
	S45= CtrlIR=0                                               Premise(F74)
	S46= [IR]={4,rS,rT,offset}                                  IR-Hold(S40,S45)

EX	S47= PC.CIA=addr                                            PC-Out(S42)
	S48= IR.Out15_0=offset                                      IR-Out(S46)
	S49= IR.Out15_0=>SEXT.In                                    Premise(F82)
	S50= SEXT.In=offset                                         Path(S48,S49)
	S51= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S50)
	S52= PC.CIA=>ALU.A                                          Premise(F83)
	S53= ALU.A=addr                                             Path(S47,S52)
	S54= SEXT.Out=>ALU.B                                        Premise(F84)
	S55= ALU.B={14{offset[15]},offset,2{0}}                     Path(S51,S54)
	S56= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S53,S55)
	S57= ALU.Out=>ALUOut.In                                     Premise(F86)
	S58= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S56,S57)
	S59= CtrlICache=0                                           Premise(F99)
	S60= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S59)
	S61= CtrlALUOut=1                                           Premise(F107)
	S62= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S58,S61)

MEM	S63= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S62)
	S64= ALUOut.Out=>PC.In                                      Premise(F109)
	S65= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S63,S64)
	S66= CtrlPC=1                                               Premise(F116)
	S67= CtrlPCInc=0                                            Premise(F117)
	S68= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S65,S66,S67)
	S69= CtrlICache=0                                           Premise(F119)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S60,S69)

WB	S71= CtrlPC=0                                               Premise(F170)
	S72= CtrlPCInc=0                                            Premise(F171)
	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S68,S71,S72)
	S74= CtrlICache=0                                           Premise(F173)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S74)

POST	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S68,S71,S72)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S74)

