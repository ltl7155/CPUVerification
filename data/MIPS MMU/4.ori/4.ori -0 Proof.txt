
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={13,rS,rT,UIMM}                        Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F17)
	S14= CtrlPCInc=0                                            Premise(F18)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F19)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F23)
	S19= IMem[{pid,addr}]={13,rS,rT,UIMM}                       IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F25)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F31)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={13,rS,rT,UIMM}                               IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F32)
	S29= IRMux.MemData={13,rS,rT,UIMM}                          Path(S26,S28)
	S30= IRMux.Out={13,rS,rT,UIMM}                              IRMux-Select2(S29)
	S31= IRMux.Out=>IR.In                                       Premise(F36)
	S32= IR.In={13,rS,rT,UIMM}                                  Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F37)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F38)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F44)
	S38= CtrlPCInc=1                                            Premise(F45)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F47)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR=1                                               Premise(F48)
	S43= [IR]={13,rS,rT,UIMM}                                   IR-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F52)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out25_21=rS                                         IR-Out(S43)
	S47= IR.Out15_0=UIMM                                        IR-Out(S43)
	S48= IR.Out25_21=>GPR.RReg1                                 Premise(F57)
	S49= GPR.RReg1=rS                                           Path(S46,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S45)
	S51= IR.Out15_0=>LIMMEXT.In                                 Premise(F58)
	S52= LIMMEXT.In=UIMM                                        Path(S47,S51)
	S53= LIMMEXT.Out={16{0},UIMM}                               LIMMEXT(S52)
	S54= GPR.Rdata1=>A.In                                       Premise(F59)
	S55= A.In=a                                                 Path(S50,S54)
	S56= LIMMEXT.Out=>B.In                                      Premise(F60)
	S57= B.In={16{0},UIMM}                                      Path(S53,S56)
	S58= CtrlPC=0                                               Premise(F66)
	S59= CtrlPCInc=0                                            Premise(F67)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F69)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlIR=0                                               Premise(F70)
	S64= [IR]={13,rS,rT,UIMM}                                   IR-Hold(S43,S63)
	S65= CtrlA=1                                                Premise(F75)
	S66= [A]=a                                                  A-Write(S55,S65)
	S67= CtrlB=1                                                Premise(F76)
	S68= [B]={16{0},UIMM}                                       B-Write(S57,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= B.Out={16{0},UIMM}                                     B-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F78)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= B.Out=>ALU.B                                           Premise(F79)
	S74= ALU.B={16{0},UIMM}                                     Path(S70,S73)
	S75= ALU.Out=a|{16{0},UIMM}                                 ALU(S72,S74)
	S76= ALU.Out=>ALUOut.In                                     Premise(F81)
	S77= ALUOut.In=a|{16{0},UIMM}                               Path(S75,S76)
	S78= CtrlPC=0                                               Premise(F87)
	S79= CtrlPCInc=0                                            Premise(F88)
	S80= PC[Out]=addr+4                                         PC-Hold(S60,S78,S79)
	S81= CtrlICache=0                                           Premise(F90)
	S82= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S81)
	S83= CtrlIR=0                                               Premise(F91)
	S84= [IR]={13,rS,rT,UIMM}                                   IR-Hold(S64,S83)
	S85= CtrlALUOut=1                                           Premise(F98)
	S86= [ALUOut]=a|{16{0},UIMM}                                ALUOut-Write(S77,S85)

MEM	S87= CtrlPC=0                                               Premise(F104)
	S88= CtrlPCInc=0                                            Premise(F105)
	S89= PC[Out]=addr+4                                         PC-Hold(S80,S87,S88)
	S90= CtrlICache=0                                           Premise(F107)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S82,S90)
	S92= CtrlIR=0                                               Premise(F108)
	S93= [IR]={13,rS,rT,UIMM}                                   IR-Hold(S84,S92)
	S94= CtrlALUOut=0                                           Premise(F115)
	S95= [ALUOut]=a|{16{0},UIMM}                                ALUOut-Hold(S86,S94)

WB	S96= IR.Out20_16=rT                                         IR-Out(S93)
	S97= ALUOut.Out=a|{16{0},UIMM}                              ALUOut-Out(S95)
	S98= IR.Out20_16=>GPR.WReg                                  Premise(F150)
	S99= GPR.WReg=rT                                            Path(S96,S98)
	S100= ALUOut.Out=>GPR.WData                                 Premise(F151)
	S101= GPR.WData=a|{16{0},UIMM}                              Path(S97,S100)
	S102= CtrlPC=0                                              Premise(F157)
	S103= CtrlPCInc=0                                           Premise(F158)
	S104= PC[Out]=addr+4                                        PC-Hold(S89,S102,S103)
	S105= CtrlICache=0                                          Premise(F160)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S105)
	S107= CtrlGPR=1                                             Premise(F165)
	S108= GPR[rT]=a|{16{0},UIMM}                                GPR-Write(S99,S101,S107)

POST	S104= PC[Out]=addr+4                                        PC-Hold(S89,S102,S103)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S105)
	S108= GPR[rT]=a|{16{0},UIMM}                                GPR-Write(S99,S101,S107)

