
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,4,rT,rD,0}                         Premise(F2)
	S3= GPR[rT]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={17,4,rT,rD,0}                        IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rT]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F47)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={17,4,rT,rD,0}                                IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F48)
	S29= IRMux.MemData={17,4,rT,rD,0}                           Path(S26,S28)
	S30= IRMux.Out={17,4,rT,rD,0}                               IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F52)
	S32= IR_ID.In={17,4,rT,rD,0}                                Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F53)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F54)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F62)
	S38= CtrlPCInc=1                                            Premise(F63)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F65)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F68)
	S43= [IR_ID]={17,4,rT,rD,0}                                 IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F71)
	S45= GPR[rT]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out={17,4,rT,rD,0}                               IR-Out(S43)
	S47= IR_ID.Out20_16=rT                                      IR-Out(S43)
	S48= IR_ID.Out20_16=>GPR.RReg1                              Premise(F86)
	S49= GPR.RReg1=rT                                           Path(S47,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S45)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F87)
	S52= FU.InID1=a                                             Path(S50,S51)
	S53= FU.OutID1=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID1=>A_EX.In                                     Premise(F89)
	S55= A_EX.In=FU(a)                                          Path(S53,S54)
	S56= IR_ID.Out=>IR_EX.In                                    Premise(F90)
	S57= IR_EX.In={17,4,rT,rD,0}                                Path(S46,S56)
	S58= CtrlPC=0                                               Premise(F99)
	S59= CtrlPCInc=0                                            Premise(F100)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F102)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlA_EX=1                                             Premise(F109)
	S64= [A_EX]=FU(a)                                           A_EX-Write(S55,S63)
	S65= CtrlIR_EX=1                                            Premise(F110)
	S66= [IR_EX]={17,4,rT,rD,0}                                 IR_EX-Write(S57,S65)

EX	S67= A_EX.Out=FU(a)                                         A_EX-Out(S64)
	S68= IR_EX.Out15_11=rD                                      IR_EX-Out(S66)
	S69= IR_EX.Out15_11=>CP1.WReg                               Premise(F123)
	S70= CP1.WReg=rD                                            Path(S68,S69)
	S71= A_EX.Out=>CP1.Wdata                                    Premise(F124)
	S72= CP1.Wdata=FU(a)                                        Path(S67,S71)
	S73= CtrlPC=0                                               Premise(F132)
	S74= CtrlPCInc=0                                            Premise(F133)
	S75= PC[Out]=addr+4                                         PC-Hold(S60,S73,S74)
	S76= CtrlICache=0                                           Premise(F135)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S76)
	S78= CtrlCP1=1                                              Premise(F144)
	S79= CP1[rD]=FU(a)                                          CP1-Write(S70,S72,S78)

MEM	S80= CtrlPC=0                                               Premise(F169)
	S81= CtrlPCInc=0                                            Premise(F170)
	S82= PC[Out]=addr+4                                         PC-Hold(S75,S80,S81)
	S83= CtrlICache=0                                           Premise(F172)
	S84= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S77,S83)
	S85= CtrlCP1=0                                              Premise(F181)
	S86= CP1[rD]=FU(a)                                          CP1-Hold(S79,S85)

MEM(DMMU1)	S87= CtrlPC=0                                               Premise(F203)
	S88= CtrlPCInc=0                                            Premise(F204)
	S89= PC[Out]=addr+4                                         PC-Hold(S82,S87,S88)
	S90= CtrlICache=0                                           Premise(F206)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S90)
	S92= CtrlCP1=0                                              Premise(F215)
	S93= CP1[rD]=FU(a)                                          CP1-Hold(S86,S92)

MEM(DMMU2)	S94= CtrlPC=0                                               Premise(F234)
	S95= CtrlPCInc=0                                            Premise(F235)
	S96= PC[Out]=addr+4                                         PC-Hold(S89,S94,S95)
	S97= CtrlICache=0                                           Premise(F237)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S91,S97)
	S99= CtrlCP1=0                                              Premise(F246)
	S100= CP1[rD]=FU(a)                                         CP1-Hold(S93,S99)

WB	S101= CtrlPC=0                                              Premise(F262)
	S102= CtrlPCInc=0                                           Premise(F263)
	S103= PC[Out]=addr+4                                        PC-Hold(S96,S101,S102)
	S104= CtrlICache=0                                          Premise(F265)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S104)
	S106= CtrlCP1=0                                             Premise(F274)
	S107= CP1[rD]=FU(a)                                         CP1-Hold(S100,S106)

POST	S103= PC[Out]=addr+4                                        PC-Hold(S96,S101,S102)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S104)
	S107= CP1[rD]=FU(a)                                         CP1-Hold(S100,S106)

