
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,0,hint,8}                      Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F45)
	S6= PC.Out=>IMMU.IEA                                        Premise(F50)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F51)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlIAddrReg=1                                         Premise(F101)
	S13= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S12)
	S14= CtrlPC=0                                               Premise(F102)
	S15= CtrlPCInc=0                                            Premise(F103)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIMem=0                                             Premise(F104)
	S18= IMem[{pid,addr}]={0,rS,0,0,hint,8}                     IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F111)

IMMU	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S13)
	S21= PC.Out=addr                                            PC-Out(S16)
	S22= PC.Out=>ICache.IEA                                     Premise(F155)
	S23= ICache.IEA=addr                                        Path(S21,S22)
	S24= IMem.MEM8WordOut=>ICache.WData                         Premise(F157)
	S25= IAddrReg.Out=>IMem.RAddr                               Premise(F161)
	S26= IMem.RAddr={pid,addr}                                  Path(S20,S25)
	S27= IMem.Out={0,rS,0,0,hint,8}                             IMem-Read(S26,S18)
	S28= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S26,S18)
	S29= ICache.WData=IMemGet8Word({pid,addr})                  Path(S28,S24)
	S30= IMem.Out=>IRMux.MemData                                Premise(F164)
	S31= IRMux.MemData={0,rS,0,0,hint,8}                        Path(S27,S30)
	S32= IRMux.Out={0,rS,0,0,hint,8}                            IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F170)
	S34= IR_ID.In={0,rS,0,0,hint,8}                             Path(S32,S33)
	S35= CtrlICache=1                                           Premise(F200)
	S36= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S23,S29,S35)
	S37= CtrlIR_ID=1                                            Premise(F205)
	S38= [IR_ID]={0,rS,0,0,hint,8}                              IR_ID-Write(S34,S37)
	S39= CtrlGPR=0                                              Premise(F209)
	S40= GPR[rS]=a                                              GPR-Hold(S19,S39)

ID	S41= IR_ID.Out25_21=rS                                      IR-Out(S38)
	S42= GPR.Rdata1=>FU.InID1                                   Premise(F259)
	S43= IR_ID.Out25_21=>GPR.RReg1                              Premise(F262)
	S44= GPR.RReg1=rS                                           Path(S41,S43)
	S45= GPR.Rdata1=a                                           GPR-Read(S44,S40)
	S46= FU.InID1=a                                             Path(S45,S42)
	S47= FU.OutID1=FU(a)                                        FU-Forward(S46)
	S48= FU.OutID1=>PC.In                                       Premise(F284)
	S49= PC.In=FU(a)                                            Path(S47,S48)
	S50= CtrlICache=0                                           Premise(F309)
	S51= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S36,S50)
	S52= CtrlPC=1                                               Premise(F320)
	S53= CtrlPCInc=0                                            Premise(F321)
	S54= PC[Out]=FU(a)                                          PC-Write(S49,S52,S53)

EX	S55= CtrlICache=0                                           Premise(F418)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S51,S55)
	S57= CtrlPC=0                                               Premise(F429)
	S58= CtrlPCInc=0                                            Premise(F430)
	S59= PC[Out]=FU(a)                                          PC-Hold(S54,S57,S58)

MEM	S60= CtrlICache=0                                           Premise(F527)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S60)
	S62= CtrlPC=0                                               Premise(F538)
	S63= CtrlPCInc=0                                            Premise(F539)
	S64= PC[Out]=FU(a)                                          PC-Hold(S59,S62,S63)

WB	S65= CtrlICache=0                                           Premise(F854)
	S66= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S65)
	S67= CtrlPC=0                                               Premise(F865)
	S68= CtrlPCInc=0                                            Premise(F866)
	S69= PC[Out]=FU(a)                                          PC-Hold(S64,S67,S68)

POST	S66= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S65)
	S69= PC[Out]=FU(a)                                          PC-Hold(S64,S67,S68)

