
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={16,4,rT,rD,0,sel}                     Premise(F2)
	S3= GPR[rT]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F25)
	S14= CtrlPCInc=0                                            Premise(F26)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F27)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F32)
	S19= IMem[{pid,addr}]={16,4,rT,rD,0,sel}                    IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F34)
	S21= GPR[rT]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F46)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={16,4,rT,rD,0,sel}                            IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F47)
	S29= IRMux.MemData={16,4,rT,rD,0,sel}                       Path(S26,S28)
	S30= IRMux.Out={16,4,rT,rD,0,sel}                           IRMux-Select2(S29)
	S31= IRMux.Out=>IR_ID.In                                    Premise(F51)
	S32= IR_ID.In={16,4,rT,rD,0,sel}                            Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F52)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F53)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F61)
	S38= CtrlPCInc=1                                            Premise(F62)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F64)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR_ID=1                                            Premise(F67)
	S43= [IR_ID]={16,4,rT,rD,0,sel}                             IR_ID-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F70)
	S45= GPR[rT]=a                                              GPR-Hold(S21,S44)

ID	S46= IR_ID.Out={16,4,rT,rD,0,sel}                           IR-Out(S43)
	S47= IR_ID.Out20_16=rT                                      IR-Out(S43)
	S48= IR_ID.Out20_16=>GPR.RReg1                              Premise(F84)
	S49= GPR.RReg1=rT                                           Path(S47,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S45)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F85)
	S52= FU.InID1=a                                             Path(S50,S51)
	S53= FU.OutID1=FU(a)                                        FU-Forward(S52)
	S54= FU.OutID1=>A_EX.In                                     Premise(F87)
	S55= A_EX.In=FU(a)                                          Path(S53,S54)
	S56= IR_ID.Out=>IR_EX.In                                    Premise(F88)
	S57= IR_EX.In={16,4,rT,rD,0,sel}                            Path(S46,S56)
	S58= CtrlPC=0                                               Premise(F97)
	S59= CtrlPCInc=0                                            Premise(F98)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F100)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlA_EX=1                                             Premise(F107)
	S64= [A_EX]=FU(a)                                           A_EX-Write(S55,S63)
	S65= CtrlIR_EX=1                                            Premise(F108)
	S66= [IR_EX]={16,4,rT,rD,0,sel}                             IR_EX-Write(S57,S65)

EX	S67= A_EX.Out=FU(a)                                         A_EX-Out(S64)
	S68= IR_EX.Out15_11=rD                                      IR_EX-Out(S66)
	S69= IR_EX.Out15_11=>CP0.WReg                               Premise(F120)
	S70= CP0.WReg=rD                                            Path(S68,S69)
	S71= A_EX.Out=>CP0.Wdata                                    Premise(F121)
	S72= CP0.Wdata=FU(a)                                        Path(S67,S71)
	S73= CtrlCP0=1                                              Premise(F125)
	S74= CP0[rD]=FU(a)                                          CP0-Write-Nomal(S70,S72,S73)
	S75= CtrlPC=0                                               Premise(F129)
	S76= CtrlPCInc=0                                            Premise(F130)
	S77= PC[Out]=addr+4                                         PC-Hold(S60,S75,S76)
	S78= CtrlICache=0                                           Premise(F132)
	S79= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S78)

MEM	S80= CtrlCP0=0                                              Premise(F161)
	S81= CP0[rD]=FU(a)                                          CP0-Hold(S74,S80)
	S82= CtrlPC=0                                               Premise(F165)
	S83= CtrlPCInc=0                                            Premise(F166)
	S84= PC[Out]=addr+4                                         PC-Hold(S77,S82,S83)
	S85= CtrlICache=0                                           Premise(F168)
	S86= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S79,S85)

MEM(DMMU1)	S87= CtrlCP0=0                                              Premise(F194)
	S88= CP0[rD]=FU(a)                                          CP0-Hold(S81,S87)
	S89= CtrlPC=0                                               Premise(F198)
	S90= CtrlPCInc=0                                            Premise(F199)
	S91= PC[Out]=addr+4                                         PC-Hold(S84,S89,S90)
	S92= CtrlICache=0                                           Premise(F201)
	S93= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S86,S92)

MEM(DMMU2)	S94= CtrlCP0=0                                              Premise(F224)
	S95= CP0[rD]=FU(a)                                          CP0-Hold(S88,S94)
	S96= CtrlPC=0                                               Premise(F228)
	S97= CtrlPCInc=0                                            Premise(F229)
	S98= PC[Out]=addr+4                                         PC-Hold(S91,S96,S97)
	S99= CtrlICache=0                                           Premise(F231)
	S100= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S93,S99)

WB	S101= CtrlCP0=0                                             Premise(F251)
	S102= CP0[rD]=FU(a)                                         CP0-Hold(S95,S101)
	S103= CtrlPC=0                                              Premise(F255)
	S104= CtrlPCInc=0                                           Premise(F256)
	S105= PC[Out]=addr+4                                        PC-Hold(S98,S103,S104)
	S106= CtrlICache=0                                          Premise(F258)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S106)

POST	S102= CP0[rD]=FU(a)                                         CP0-Hold(S95,S101)
	S105= PC[Out]=addr+4                                        PC-Hold(S98,S103,S104)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S106)

