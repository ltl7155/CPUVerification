
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                      Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Hit=IMMUHit(pid,addr)                             IMMU-Search(S8,S10)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S14= IAddrReg.In={pid,addr}                                 Path(S11,S13)
	S15= IMMU.Hit=>CU.IMMUHit                                   Premise(F8)
	S16= CU.IMMUHit=IMMUHit(pid,addr)                           Path(S12,S15)
	S17= PC.Out=>ICache.IEA                                     Premise(F9)
	S18= ICache.IEA=addr                                        Path(S6,S17)
	S19= ICache.Hit=ICacheHit(addr)                             ICache-Search(S18)
	S20= ICache.Out=>IR.In                                      Premise(F10)
	S21= ICache.Out=>ICacheReg.In                               Premise(F11)
	S22= ICache.Hit=>CU.ICacheHit                               Premise(F12)
	S23= CU.ICacheHit=ICacheHit(addr)                           Path(S19,S22)
	S24= CtrlASIDIn=0                                           Premise(F13)
	S25= CtrlCP0=0                                              Premise(F14)
	S26= CP0[ASID]=pid                                          CP0-Hold(S0,S25)
	S27= CtrlEPCIn=0                                            Premise(F15)
	S28= CtrlExCodeIn=0                                         Premise(F16)
	S29= CtrlIMMU=0                                             Premise(F17)
	S30= CtrlPC=0                                               Premise(F18)
	S31= CtrlPCInc=0                                            Premise(F19)
	S32= PC[Out]=addr                                           PC-Hold(S1,S30,S31)
	S33= CtrlIAddrReg=1                                         Premise(F20)
	S34= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S33)
	S35= CtrlICache=0                                           Premise(F21)
	S36= CtrlIR=0                                               Premise(F22)
	S37= CtrlICacheReg=1                                        Premise(F23)
	S38= CtrlIMem=0                                             Premise(F24)
	S39= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                     IMem-Hold(S2,S38)
	S40= CtrlIRMux=0                                            Premise(F25)
	S41= CtrlGPR=0                                              Premise(F26)
	S42= GPR[rS]=a                                              GPR-Hold(S3,S41)
	S43= GPR[rT]=b                                              GPR-Hold(S4,S41)
	S44= CtrlA=0                                                Premise(F27)
	S45= CtrlB=0                                                Premise(F28)
	S46= CtrlALUOut=0                                           Premise(F29)
	S47= CtrlOVReg=0                                            Premise(F30)

IF(IMMU)	S48= CP0.ASID=pid                                           CP0-Read-ASID(S26)
	S49= PC.Out=addr                                            PC-Out(S32)
	S50= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S34)
	S51= IAddrReg.Out1_0={{pid,addr}}[1:0]                      IAddrReg-Out(S34)
	S52= IAddrReg.Out4_0={{pid,addr}}[4:0]                      IAddrReg-Out(S34)
	S53= CU.IMMUHit=>CU.IMMUHit                                 Premise(F31)
	S54= CU.ICacheHit=>CU.ICacheHit                             Premise(F32)
	S55= IAddrReg.Out=>IMem.RAddr                               Premise(F33)
	S56= IMem.RAddr={pid,addr}                                  Path(S50,S55)
	S57= IMem.Out={0,rS,rT,rD,0,32}                             IMem-Read(S56,S39)
	S58= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S56,S39)
	S59= IMem.Out=>IRMux.MemData                                Premise(F34)
	S60= IRMux.MemData={0,rS,rT,rD,0,32}                        Path(S57,S59)
	S61= IRMux.Out={0,rS,rT,rD,0,32}                            IRMux-Select2(S60)
	S62= ICacheReg.Out=>IRMux.CacheData                         Premise(F35)
	S63= CU.IMMUHit=>IRMux.MemSel                               Premise(F36)
	S64= CU.ICacheHit=>IRMux.CacheSel                           Premise(F37)
	S65= IRMux.Out=>IR.In                                       Premise(F38)
	S66= IR.In={0,rS,rT,rD,0,32}                                Path(S61,S65)
	S67= IMem.MEM8WordOut=>ICache.WData                         Premise(F39)
	S68= ICache.WData=IMemGet8Word({pid,addr})                  Path(S58,S67)
	S69= PC.Out=>ICache.IEA                                     Premise(F40)
	S70= ICache.IEA=addr                                        Path(S49,S69)
	S71= ICache.Hit=ICacheHit(addr)                             ICache-Search(S70)
	S72= CtrlASIDIn=0                                           Premise(F41)
	S73= CtrlCP0=0                                              Premise(F42)
	S74= CP0[ASID]=pid                                          CP0-Hold(S26,S73)
	S75= CtrlEPCIn=0                                            Premise(F43)
	S76= CtrlExCodeIn=0                                         Premise(F44)
	S77= CtrlIMMU=0                                             Premise(F45)
	S78= CtrlPC=0                                               Premise(F46)
	S79= CtrlPCInc=1                                            Premise(F47)
	S80= PC[Out]=addr+4                                         PC-Inc(S32,S78,S79)
	S81= PC[CIA]=addr                                           PC-Inc(S32,S78,S79)
	S82= CtrlIAddrReg=0                                         Premise(F48)
	S83= [IAddrReg]={pid,addr}                                  IAddrReg-Hold(S34,S82)
	S84= CtrlICache=1                                           Premise(F49)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S70,S68,S84)
	S86= CtrlIR=1                                               Premise(F50)
	S87= [IR]={0,rS,rT,rD,0,32}                                 IR-Write(S66,S86)
	S88= CtrlICacheReg=0                                        Premise(F51)
	S89= CtrlIMem=0                                             Premise(F52)
	S90= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                     IMem-Hold(S39,S89)
	S91= CtrlIRMux=0                                            Premise(F53)
	S92= CtrlGPR=0                                              Premise(F54)
	S93= GPR[rS]=a                                              GPR-Hold(S42,S92)
	S94= GPR[rT]=b                                              GPR-Hold(S43,S92)
	S95= CtrlA=0                                                Premise(F55)
	S96= CtrlB=0                                                Premise(F56)
	S97= CtrlALUOut=0                                           Premise(F57)
	S98= CtrlOVReg=0                                            Premise(F58)

ID	S99= CP0.ASID=pid                                           CP0-Read-ASID(S74)
	S100= PC.Out=addr+4                                         PC-Out(S80)
	S101= PC.CIA=addr                                           PC-Out(S81)
	S102= PC.CIA31_28=addr[31:28]                               PC-Out(S81)
	S103= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S83)
	S104= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S83)
	S105= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S83)
	S106= IR.Out={0,rS,rT,rD,0,32}                              IR-Out(S87)
	S107= IR.Out31_26=0                                         IR-Out(S87)
	S108= IR.Out25_21=rS                                        IR-Out(S87)
	S109= IR.Out20_16=rT                                        IR-Out(S87)
	S110= IR.Out15_11=rD                                        IR-Out(S87)
	S111= IR.Out10_6=0                                          IR-Out(S87)
	S112= IR.Out5_0=32                                          IR-Out(S87)
	S113= IR.Out31_26=>CU.Op                                    Premise(F59)
	S114= CU.Op=0                                               Path(S107,S113)
	S115= IR.Out25_21=>GPR.RReg1                                Premise(F60)
	S116= GPR.RReg1=rS                                          Path(S108,S115)
	S117= GPR.Rdata1=a                                          GPR-Read(S116,S93)
	S118= IR.Out20_16=>GPR.RReg2                                Premise(F61)
	S119= GPR.RReg2=rT                                          Path(S109,S118)
	S120= GPR.Rdata2=b                                          GPR-Read(S119,S94)
	S121= IR.Out5_0=>CU.IRFunc                                  Premise(F62)
	S122= CU.IRFunc=32                                          Path(S112,S121)
	S123= GPR.Rdata1=>A.In                                      Premise(F63)
	S124= A.In=a                                                Path(S117,S123)
	S125= GPR.Rdata2=>B.In                                      Premise(F64)
	S126= B.In=b                                                Path(S120,S125)
	S127= CtrlASIDIn=0                                          Premise(F65)
	S128= CtrlCP0=0                                             Premise(F66)
	S129= CP0[ASID]=pid                                         CP0-Hold(S74,S128)
	S130= CtrlEPCIn=0                                           Premise(F67)
	S131= CtrlExCodeIn=0                                        Premise(F68)
	S132= CtrlIMMU=0                                            Premise(F69)
	S133= CtrlPC=0                                              Premise(F70)
	S134= CtrlPCInc=0                                           Premise(F71)
	S135= PC[CIA]=addr                                          PC-Hold(S81,S134)
	S136= PC[Out]=addr+4                                        PC-Hold(S80,S133,S134)
	S137= CtrlIAddrReg=0                                        Premise(F72)
	S138= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S83,S137)
	S139= CtrlICache=0                                          Premise(F73)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S85,S139)
	S141= CtrlIR=0                                              Premise(F74)
	S142= [IR]={0,rS,rT,rD,0,32}                                IR-Hold(S87,S141)
	S143= CtrlICacheReg=0                                       Premise(F75)
	S144= CtrlIMem=0                                            Premise(F76)
	S145= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                    IMem-Hold(S90,S144)
	S146= CtrlIRMux=0                                           Premise(F77)
	S147= CtrlGPR=0                                             Premise(F78)
	S148= GPR[rS]=a                                             GPR-Hold(S93,S147)
	S149= GPR[rT]=b                                             GPR-Hold(S94,S147)
	S150= CtrlA=1                                               Premise(F79)
	S151= [A]=a                                                 A-Write(S124,S150)
	S152= CtrlB=1                                               Premise(F80)
	S153= [B]=b                                                 B-Write(S126,S152)
	S154= CtrlALUOut=0                                          Premise(F81)
	S155= CtrlOVReg=0                                           Premise(F82)

EX	S156= CP0.ASID=pid                                          CP0-Read-ASID(S129)
	S157= PC.CIA=addr                                           PC-Out(S135)
	S158= PC.CIA31_28=addr[31:28]                               PC-Out(S135)
	S159= PC.Out=addr+4                                         PC-Out(S136)
	S160= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S138)
	S161= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S138)
	S162= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S138)
	S163= IR.Out={0,rS,rT,rD,0,32}                              IR-Out(S142)
	S164= IR.Out31_26=0                                         IR-Out(S142)
	S165= IR.Out25_21=rS                                        IR-Out(S142)
	S166= IR.Out20_16=rT                                        IR-Out(S142)
	S167= IR.Out15_11=rD                                        IR-Out(S142)
	S168= IR.Out10_6=0                                          IR-Out(S142)
	S169= IR.Out5_0=32                                          IR-Out(S142)
	S170= A.Out=a                                               A-Out(S151)
	S171= A.Out1_0={a}[1:0]                                     A-Out(S151)
	S172= A.Out4_0={a}[4:0]                                     A-Out(S151)
	S173= B.Out=b                                               B-Out(S153)
	S174= B.Out1_0={b}[1:0]                                     B-Out(S153)
	S175= B.Out4_0={b}[4:0]                                     B-Out(S153)
	S176= A.Out=>ALU.A                                          Premise(F83)
	S177= ALU.A=a                                               Path(S170,S176)
	S178= B.Out=>ALU.B                                          Premise(F84)
	S179= ALU.B=b                                               Path(S173,S178)
	S180= ALU.Func=6'b000010                                    Premise(F85)
	S181= ALU.Out=a+b                                           ALU(S177,S179)
	S182= ALU.Out1_0={a+b}[1:0]                                 ALU(S177,S179)
	S183= ALU.CMP=Compare0(a+b)                                 ALU(S177,S179)
	S184= ALU.OV=OverFlow(a+b)                                  ALU(S177,S179)
	S185= ALU.CA=Carry(a+b)                                     ALU(S177,S179)
	S186= ALU.Out=>ALUOut.In                                    Premise(F86)
	S187= ALUOut.In=a+b                                         Path(S181,S186)
	S188= ALU.OV=>OVReg.In                                      Premise(F87)
	S189= OVReg.In=OverFlow(a+b)                                Path(S184,S188)
	S190= CtrlASIDIn=0                                          Premise(F88)
	S191= CtrlCP0=0                                             Premise(F89)
	S192= CP0[ASID]=pid                                         CP0-Hold(S129,S191)
	S193= CtrlEPCIn=0                                           Premise(F90)
	S194= CtrlExCodeIn=0                                        Premise(F91)
	S195= CtrlIMMU=0                                            Premise(F92)
	S196= CtrlPC=0                                              Premise(F93)
	S197= CtrlPCInc=0                                           Premise(F94)
	S198= PC[CIA]=addr                                          PC-Hold(S135,S197)
	S199= PC[Out]=addr+4                                        PC-Hold(S136,S196,S197)
	S200= CtrlIAddrReg=0                                        Premise(F95)
	S201= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S138,S200)
	S202= CtrlICache=0                                          Premise(F96)
	S203= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S140,S202)
	S204= CtrlIR=0                                              Premise(F97)
	S205= [IR]={0,rS,rT,rD,0,32}                                IR-Hold(S142,S204)
	S206= CtrlICacheReg=0                                       Premise(F98)
	S207= CtrlIMem=0                                            Premise(F99)
	S208= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                    IMem-Hold(S145,S207)
	S209= CtrlIRMux=0                                           Premise(F100)
	S210= CtrlGPR=0                                             Premise(F101)
	S211= GPR[rS]=a                                             GPR-Hold(S148,S210)
	S212= GPR[rT]=b                                             GPR-Hold(S149,S210)
	S213= CtrlA=0                                               Premise(F102)
	S214= [A]=a                                                 A-Hold(S151,S213)
	S215= CtrlB=0                                               Premise(F103)
	S216= [B]=b                                                 B-Hold(S153,S215)
	S217= CtrlALUOut=1                                          Premise(F104)
	S218= [ALUOut]=a+b                                          ALUOut-Write(S187,S217)
	S219= CtrlOVReg=1                                           Premise(F105)
	S220= [OVReg]=OverFlow(a+b)                                 OVReg-Write(S189,S219)

MEM	S221= CP0.ASID=pid                                          CP0-Read-ASID(S192)
	S222= PC.CIA=addr                                           PC-Out(S198)
	S223= PC.CIA31_28=addr[31:28]                               PC-Out(S198)
	S224= PC.Out=addr+4                                         PC-Out(S199)
	S225= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S201)
	S226= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S201)
	S227= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S201)
	S228= IR.Out={0,rS,rT,rD,0,32}                              IR-Out(S205)
	S229= IR.Out31_26=0                                         IR-Out(S205)
	S230= IR.Out25_21=rS                                        IR-Out(S205)
	S231= IR.Out20_16=rT                                        IR-Out(S205)
	S232= IR.Out15_11=rD                                        IR-Out(S205)
	S233= IR.Out10_6=0                                          IR-Out(S205)
	S234= IR.Out5_0=32                                          IR-Out(S205)
	S235= A.Out=a                                               A-Out(S214)
	S236= A.Out1_0={a}[1:0]                                     A-Out(S214)
	S237= A.Out4_0={a}[4:0]                                     A-Out(S214)
	S238= B.Out=b                                               B-Out(S216)
	S239= B.Out1_0={b}[1:0]                                     B-Out(S216)
	S240= B.Out4_0={b}[4:0]                                     B-Out(S216)
	S241= ALUOut.Out=a+b                                        ALUOut-Out(S218)
	S242= ALUOut.Out1_0={a+b}[1:0]                              ALUOut-Out(S218)
	S243= ALUOut.Out4_0={a+b}[4:0]                              ALUOut-Out(S218)
	S244= OVReg.Out=OverFlow(a+b)                               OVReg-Out(S220)
	S245= OVReg.Out1_0={OverFlow(a+b)}[1:0]                     OVReg-Out(S220)
	S246= OVReg.Out4_0={OverFlow(a+b)}[4:0]                     OVReg-Out(S220)
	S247= CtrlASIDIn=0                                          Premise(F106)
	S248= CtrlCP0=0                                             Premise(F107)
	S249= CP0[ASID]=pid                                         CP0-Hold(S192,S248)
	S250= CtrlEPCIn=0                                           Premise(F108)
	S251= CtrlExCodeIn=0                                        Premise(F109)
	S252= CtrlIMMU=0                                            Premise(F110)
	S253= CtrlPC=0                                              Premise(F111)
	S254= CtrlPCInc=0                                           Premise(F112)
	S255= PC[CIA]=addr                                          PC-Hold(S198,S254)
	S256= PC[Out]=addr+4                                        PC-Hold(S199,S253,S254)
	S257= CtrlIAddrReg=0                                        Premise(F113)
	S258= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S201,S257)
	S259= CtrlICache=0                                          Premise(F114)
	S260= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S203,S259)
	S261= CtrlIR=0                                              Premise(F115)
	S262= [IR]={0,rS,rT,rD,0,32}                                IR-Hold(S205,S261)
	S263= CtrlICacheReg=0                                       Premise(F116)
	S264= CtrlIMem=0                                            Premise(F117)
	S265= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                    IMem-Hold(S208,S264)
	S266= CtrlIRMux=0                                           Premise(F118)
	S267= CtrlGPR=0                                             Premise(F119)
	S268= GPR[rS]=a                                             GPR-Hold(S211,S267)
	S269= GPR[rT]=b                                             GPR-Hold(S212,S267)
	S270= CtrlA=0                                               Premise(F120)
	S271= [A]=a                                                 A-Hold(S214,S270)
	S272= CtrlB=0                                               Premise(F121)
	S273= [B]=b                                                 B-Hold(S216,S272)
	S274= CtrlALUOut=0                                          Premise(F122)
	S275= [ALUOut]=a+b                                          ALUOut-Hold(S218,S274)
	S276= CtrlOVReg=0                                           Premise(F123)
	S277= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S220,S276)

WB	S278= CP0.ASID=pid                                          CP0-Read-ASID(S249)
	S279= PC.CIA=addr                                           PC-Out(S255)
	S280= PC.CIA31_28=addr[31:28]                               PC-Out(S255)
	S281= PC.Out=addr+4                                         PC-Out(S256)
	S282= IAddrReg.Out={pid,addr}                               IAddrReg-Out(S258)
	S283= IAddrReg.Out1_0={{pid,addr}}[1:0]                     IAddrReg-Out(S258)
	S284= IAddrReg.Out4_0={{pid,addr}}[4:0]                     IAddrReg-Out(S258)
	S285= IR.Out={0,rS,rT,rD,0,32}                              IR-Out(S262)
	S286= IR.Out31_26=0                                         IR-Out(S262)
	S287= IR.Out25_21=rS                                        IR-Out(S262)
	S288= IR.Out20_16=rT                                        IR-Out(S262)
	S289= IR.Out15_11=rD                                        IR-Out(S262)
	S290= IR.Out10_6=0                                          IR-Out(S262)
	S291= IR.Out5_0=32                                          IR-Out(S262)
	S292= A.Out=a                                               A-Out(S271)
	S293= A.Out1_0={a}[1:0]                                     A-Out(S271)
	S294= A.Out4_0={a}[4:0]                                     A-Out(S271)
	S295= B.Out=b                                               B-Out(S273)
	S296= B.Out1_0={b}[1:0]                                     B-Out(S273)
	S297= B.Out4_0={b}[4:0]                                     B-Out(S273)
	S298= ALUOut.Out=a+b                                        ALUOut-Out(S275)
	S299= ALUOut.Out1_0={a+b}[1:0]                              ALUOut-Out(S275)
	S300= ALUOut.Out4_0={a+b}[4:0]                              ALUOut-Out(S275)
	S301= OVReg.Out=OverFlow(a+b)                               OVReg-Out(S277)
	S302= OVReg.Out1_0={OverFlow(a+b)}[1:0]                     OVReg-Out(S277)
	S303= OVReg.Out4_0={OverFlow(a+b)}[4:0]                     OVReg-Out(S277)
	S304= IR.Out15_11=>GPR.WReg                                 Premise(F160)
	S305= GPR.WReg=rD                                           Path(S289,S304)
	S306= ALUOut.Out=>GPR.WData                                 Premise(F161)
	S307= GPR.WData=a+b                                         Path(S298,S306)
	S308= OVReg.Out=>CU.OV                                      Premise(F162)
	S309= CU.OV=OverFlow(a+b)                                   Path(S301,S308)
	S310= CtrlASIDIn=0                                          Premise(F163)
	S311= CtrlCP0=0                                             Premise(F164)
	S312= CP0[ASID]=pid                                         CP0-Hold(S249,S311)
	S313= CtrlEPCIn=0                                           Premise(F165)
	S314= CtrlExCodeIn=0                                        Premise(F166)
	S315= CtrlIMMU=0                                            Premise(F167)
	S316= CtrlPC=0                                              Premise(F168)
	S317= CtrlPCInc=0                                           Premise(F169)
	S318= PC[CIA]=addr                                          PC-Hold(S255,S317)
	S319= PC[Out]=addr+4                                        PC-Hold(S256,S316,S317)
	S320= CtrlIAddrReg=0                                        Premise(F170)
	S321= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S258,S320)
	S322= CtrlICache=0                                          Premise(F171)
	S323= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S260,S322)
	S324= CtrlIR=0                                              Premise(F172)
	S325= [IR]={0,rS,rT,rD,0,32}                                IR-Hold(S262,S324)
	S326= CtrlICacheReg=0                                       Premise(F173)
	S327= CtrlIMem=0                                            Premise(F174)
	S328= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                    IMem-Hold(S265,S327)
	S329= CtrlIRMux=0                                           Premise(F175)
	S330= CtrlGPR=1                                             Premise(F176)
	S331= GPR[rD]=a+b                                           GPR-Write(S305,S307,S330)
	S332= CtrlA=0                                               Premise(F177)
	S333= [A]=a                                                 A-Hold(S271,S332)
	S334= CtrlB=0                                               Premise(F178)
	S335= [B]=b                                                 B-Hold(S273,S334)
	S336= CtrlALUOut=0                                          Premise(F179)
	S337= [ALUOut]=a+b                                          ALUOut-Hold(S275,S336)
	S338= CtrlOVReg=0                                           Premise(F180)
	S339= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S277,S338)

POST	S312= CP0[ASID]=pid                                         CP0-Hold(S249,S311)
	S318= PC[CIA]=addr                                          PC-Hold(S255,S317)
	S319= PC[Out]=addr+4                                        PC-Hold(S256,S316,S317)
	S321= [IAddrReg]={pid,addr}                                 IAddrReg-Hold(S258,S320)
	S323= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S260,S322)
	S325= [IR]={0,rS,rT,rD,0,32}                                IR-Hold(S262,S324)
	S328= IMem[{pid,addr}]={0,rS,rT,rD,0,32}                    IMem-Hold(S265,S327)
	S331= GPR[rD]=a+b                                           GPR-Write(S305,S307,S330)
	S333= [A]=a                                                 A-Hold(S271,S332)
	S335= [B]=b                                                 B-Hold(S273,S334)
	S337= [ALUOut]=a+b                                          ALUOut-Hold(S275,S336)
	S339= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S277,S338)

