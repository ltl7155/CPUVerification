
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,37}                      Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F54)
	S6= PC.Out=>IMMU.IEA                                        Premise(F59)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F60)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlIAddrReg=1                                         Premise(F117)
	S13= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S12)
	S14= CtrlPC=0                                               Premise(F118)
	S15= CtrlPCInc=0                                            Premise(F119)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIMem=0                                             Premise(F120)
	S18= IMem[{pid,addr}]={0,rS,rT,rD,0,37}                     IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F127)
	S20= GPR[rT]=b                                              Premise(F128)

IMMU	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S13)
	S22= PC.Out=addr                                            PC-Out(S16)
	S23= PC.Out=>ICache.IEA                                     Premise(F181)
	S24= ICache.IEA=addr                                        Path(S22,S23)
	S25= IMem.MEM8WordOut=>ICache.WData                         Premise(F183)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F187)
	S27= IMem.RAddr={pid,addr}                                  Path(S21,S26)
	S28= IMem.Out={0,rS,rT,rD,0,37}                             IMem-Read(S27,S18)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S18)
	S30= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S25)
	S31= IMem.Out=>IRMux.MemData                                Premise(F190)
	S32= IRMux.MemData={0,rS,rT,rD,0,37}                        Path(S28,S31)
	S33= IRMux.Out={0,rS,rT,rD,0,37}                            IRMux-Select2(S32)
	S34= IRMux.Out=>IR_ID.In                                    Premise(F195)
	S35= IR_ID.In={0,rS,rT,rD,0,37}                             Path(S33,S34)
	S36= CtrlICache=1                                           Premise(F233)
	S37= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S24,S30,S36)
	S38= CtrlIR_ID=1                                            Premise(F238)
	S39= [IR_ID]={0,rS,rT,rD,0,37}                              IR_ID-Write(S35,S38)
	S40= CtrlGPR=0                                              Premise(F242)
	S41= GPR[rS]=a                                              GPR-Hold(S19,S40)
	S42= GPR[rT]=b                                              GPR-Hold(S20,S40)
	S43= CtrlPC=0                                               Premise(F244)
	S44= CtrlPCInc=1                                            Premise(F245)
	S45= PC[Out]=addr+4                                         PC-Inc(S16,S43,S44)

ID	S46= IR_ID.Out={0,rS,rT,rD,0,37}                            IR-Out(S39)
	S47= IR_ID.Out25_21=rS                                      IR-Out(S39)
	S48= IR_ID.Out20_16=rT                                      IR-Out(S39)
	S49= FU.OutID1=>A_EX.In                                     Premise(F258)
	S50= FU.OutID2=>B_EX.In                                     Premise(F260)
	S51= GPR.Rdata1=>FU.InID1                                   Premise(F292)
	S52= GPR.Rdata2=>FU.InID2                                   Premise(F294)
	S53= IR_ID.Out25_21=>GPR.RReg1                              Premise(F300)
	S54= GPR.RReg1=rS                                           Path(S47,S53)
	S55= GPR.Rdata1=a                                           GPR-Read(S54,S41)
	S56= FU.InID1=a                                             Path(S55,S51)
	S57= FU.OutID1=FU(a)                                        FU-Forward(S56)
	S58= A_EX.In=FU(a)                                          Path(S57,S49)
	S59= IR_ID.Out20_16=>GPR.RReg2                              Premise(F301)
	S60= GPR.RReg2=rT                                           Path(S48,S59)
	S61= GPR.Rdata2=b                                           GPR-Read(S60,S42)
	S62= FU.InID2=b                                             Path(S61,S52)
	S63= FU.OutID2=FU(b)                                        FU-Forward(S62)
	S64= B_EX.In=FU(b)                                          Path(S63,S50)
	S65= IR_ID.Out=>IR_EX.In                                    Premise(F317)
	S66= IR_EX.In={0,rS,rT,rD,0,37}                             Path(S46,S65)
	S67= CtrlA_EX=1                                             Premise(F347)
	S68= [A_EX]=FU(a)                                           A_EX-Write(S58,S67)
	S69= CtrlB_EX=1                                             Premise(F348)
	S70= [B_EX]=FU(b)                                           B_EX-Write(S64,S69)
	S71= CtrlICache=0                                           Premise(F357)
	S72= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S37,S71)
	S73= CtrlIR_EX=1                                            Premise(F361)
	S74= [IR_EX]={0,rS,rT,rD,0,37}                              IR_EX-Write(S66,S73)
	S75= CtrlPC=0                                               Premise(F368)
	S76= CtrlPCInc=0                                            Premise(F369)
	S77= PC[Out]=addr+4                                         PC-Hold(S45,S75,S76)

EX	S78= A_EX.Out=FU(a)                                         A_EX-Out(S68)
	S79= B_EX.Out=FU(b)                                         B_EX-Out(S70)
	S80= IR_EX.Out={0,rS,rT,rD,0,37}                            IR_EX-Out(S74)
	S81= A_EX.Out=>ALU.A                                        Premise(F377)
	S82= ALU.A=FU(a)                                            Path(S78,S81)
	S83= B_EX.Out=>ALU.B                                        Premise(F378)
	S84= ALU.B=FU(b)                                            Path(S79,S83)
	S85= ALU.Out=FU(a)|FU(b)                                    ALU(S82,S84)
	S86= ALU.Out=>ALUOut_MEM.In                                 Premise(F381)
	S87= ALUOut_MEM.In=FU(a)|FU(b)                              Path(S85,S86)
	S88= IR_EX.Out=>IR_MEM.In                                   Premise(F446)
	S89= IR_MEM.In={0,rS,rT,rD,0,37}                            Path(S80,S88)
	S90= CtrlALUOut_MEM=1                                       Premise(F474)
	S91= [ALUOut_MEM]=FU(a)|FU(b)                               ALUOut_MEM-Write(S87,S90)
	S92= CtrlICache=0                                           Premise(F482)
	S93= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S72,S92)
	S94= CtrlIR_MEM=1                                           Premise(F489)
	S95= [IR_MEM]={0,rS,rT,rD,0,37}                             IR_MEM-Write(S89,S94)
	S96= CtrlPC=0                                               Premise(F493)
	S97= CtrlPCInc=0                                            Premise(F494)
	S98= PC[Out]=addr+4                                         PC-Hold(S77,S96,S97)

MEM	S99= ALUOut_MEM.Out=FU(a)|FU(b)                             ALUOut_MEM-Out(S91)
	S100= IR_MEM.Out={0,rS,rT,rD,0,37}                          IR_MEM-Out(S95)
	S101= ALUOut_MEM.Out=>ALUOut_WB.In                          Premise(F506)
	S102= ALUOut_WB.In=FU(a)|FU(b)                              Path(S99,S101)
	S103= IR_MEM.Out=>IR_WB.In                                  Premise(F571)
	S104= IR_WB.In={0,rS,rT,rD,0,37}                            Path(S100,S103)
	S105= CtrlALUOut_WB=1                                       Premise(F601)
	S106= [ALUOut_WB]=FU(a)|FU(b)                               ALUOut_WB-Write(S102,S105)
	S107= CtrlICache=0                                          Premise(F606)
	S108= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S93,S107)
	S109= CtrlIR_WB=1                                           Premise(F614)
	S110= [IR_WB]={0,rS,rT,rD,0,37}                             IR_WB-Write(S104,S109)
	S111= CtrlPC=0                                              Premise(F617)
	S112= CtrlPCInc=0                                           Premise(F618)
	S113= PC[Out]=addr+4                                        PC-Hold(S98,S111,S112)

WB	S114= ALUOut_WB.Out=FU(a)|FU(b)                             ALUOut_WB-Out(S106)
	S115= IR_WB.Out15_11=rD                                     IR-Out(S110)
	S116= ALUOut_WB.Out=>GPR.WData                              Premise(F923)
	S117= GPR.WData=FU(a)|FU(b)                                 Path(S114,S116)
	S118= IR_WB.Out15_11=>GPR.WReg                              Premise(F924)
	S119= GPR.WReg=rD                                           Path(S115,S118)
	S120= CtrlICache=0                                          Premise(F978)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S108,S120)
	S122= CtrlGPR=1                                             Premise(F987)
	S123= GPR[rD]=FU(a)|FU(b)                                   GPR-Write(S119,S117,S122)
	S124= CtrlPC=0                                              Premise(F989)
	S125= CtrlPCInc=0                                           Premise(F990)
	S126= PC[Out]=addr+4                                        PC-Hold(S113,S124,S125)

POST	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S108,S120)
	S123= GPR[rD]=FU(a)|FU(b)                                   GPR-Write(S119,S117,S122)
	S126= PC[Out]=addr+4                                        PC-Hold(S113,S124,S125)

