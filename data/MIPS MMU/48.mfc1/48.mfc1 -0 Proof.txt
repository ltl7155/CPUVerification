
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,0,rT,rD,0}                         Premise(F2)
	S3= CP1[rD]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F17)
	S14= CtrlPCInc=0                                            Premise(F18)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F19)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F23)
	S19= IMem[{pid,addr}]={17,0,rT,rD,0}                        IMem-Hold(S2,S18)
	S20= CtrlCP1=0                                              Premise(F25)
	S21= CP1[rD]=a                                              CP1-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F29)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={17,0,rT,rD,0}                                IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F30)
	S29= IRMux.MemData={17,0,rT,rD,0}                           Path(S26,S28)
	S30= IRMux.Out={17,0,rT,rD,0}                               IRMux-Select2(S29)
	S31= IRMux.Out=>IR.In                                       Premise(F34)
	S32= IR.In={17,0,rT,rD,0}                                   Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F35)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F36)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F42)
	S38= CtrlPCInc=1                                            Premise(F43)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F45)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR=1                                               Premise(F46)
	S43= [IR]={17,0,rT,rD,0}                                    IR-Write(S32,S42)
	S44= CtrlCP1=0                                              Premise(F50)
	S45= CP1[rD]=a                                              CP1-Hold(S21,S44)

ID	S46= IR.Out20_16=rT                                         IR-Out(S43)
	S47= IR.Out15_11=rD                                         IR-Out(S43)
	S48= IR.Out15_11=>CP1.RReg                                  Premise(F54)
	S49= CP1.RReg=rD                                            Path(S47,S48)
	S50= CP1.Rdata=a                                            CP1-Read(S49,S45)
	S51= IR.Out20_16=>GPR.WReg                                  Premise(F55)
	S52= GPR.WReg=rT                                            Path(S46,S51)
	S53= CP1.Rdata=>GPR.WData                                   Premise(F56)
	S54= GPR.WData=a                                            Path(S50,S53)
	S55= CtrlPC=0                                               Premise(F62)
	S56= CtrlPCInc=0                                            Premise(F63)
	S57= PC[Out]=addr+4                                         PC-Hold(S39,S55,S56)
	S58= CtrlICache=0                                           Premise(F65)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S58)
	S60= CtrlGPR=1                                              Premise(F71)
	S61= GPR[rT]=a                                              GPR-Write(S52,S54,S60)

EX	S62= CtrlPC=0                                               Premise(F77)
	S63= CtrlPCInc=0                                            Premise(F78)
	S64= PC[Out]=addr+4                                         PC-Hold(S57,S62,S63)
	S65= CtrlICache=0                                           Premise(F80)
	S66= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S65)
	S67= CtrlGPR=0                                              Premise(F86)
	S68= GPR[rT]=a                                              GPR-Hold(S61,S67)

MEM	S69= CtrlPC=0                                               Premise(F92)
	S70= CtrlPCInc=0                                            Premise(F93)
	S71= PC[Out]=addr+4                                         PC-Hold(S64,S69,S70)
	S72= CtrlICache=0                                           Premise(F95)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S66,S72)
	S74= CtrlGPR=0                                              Premise(F101)
	S75= GPR[rT]=a                                              GPR-Hold(S68,S74)

MEM(DMMU1)	S76= CtrlPC=0                                               Premise(F107)
	S77= CtrlPCInc=0                                            Premise(F108)
	S78= PC[Out]=addr+4                                         PC-Hold(S71,S76,S77)
	S79= CtrlICache=0                                           Premise(F110)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S79)
	S81= CtrlGPR=0                                              Premise(F116)
	S82= GPR[rT]=a                                              GPR-Hold(S75,S81)

MEM(DMMU2)	S83= CtrlPC=0                                               Premise(F122)
	S84= CtrlPCInc=0                                            Premise(F123)
	S85= PC[Out]=addr+4                                         PC-Hold(S78,S83,S84)
	S86= CtrlICache=0                                           Premise(F125)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S80,S86)
	S88= CtrlGPR=0                                              Premise(F131)
	S89= GPR[rT]=a                                              GPR-Hold(S82,S88)

WB	S90= CtrlPC=0                                               Premise(F137)
	S91= CtrlPCInc=0                                            Premise(F138)
	S92= PC[Out]=addr+4                                         PC-Hold(S85,S90,S91)
	S93= CtrlICache=0                                           Premise(F140)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S93)
	S95= CtrlGPR=0                                              Premise(F146)
	S96= GPR[rT]=a                                              GPR-Hold(S89,S95)

POST	S92= PC[Out]=addr+4                                         PC-Hold(S85,S90,S91)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S93)
	S96= GPR[rT]=a                                              GPR-Hold(S89,S95)

