
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                      Premise(F2)
	S3= GPR[rT]=b                                               Premise(F4)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F18)
	S14= CtrlPCInc=0                                            Premise(F19)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F20)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F24)
	S19= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                     IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F26)
	S21= GPR[rT]=b                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F32)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,rS,rT,rD,0,10}                             IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F33)
	S29= IRMux.MemData={0,rS,rT,rD,0,10}                        Path(S26,S28)
	S30= IRMux.Out={0,rS,rT,rD,0,10}                            IRMux-Select2(S29)
	S31= IRMux.Out=>IR.In                                       Premise(F37)
	S32= IR.In={0,rS,rT,rD,0,10}                                Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F38)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F39)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F45)
	S38= CtrlPCInc=1                                            Premise(F46)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F48)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR=1                                               Premise(F49)
	S43= [IR]={0,rS,rT,rD,0,10}                                 IR-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F53)
	S45= GPR[rT]=b                                              GPR-Hold(S21,S44)

ID	S46= IR.Out20_16=rT                                         IR-Out(S43)
	S47= IR.Out20_16=>GPR.RReg2                                 Premise(F59)
	S48= GPR.RReg2=rT                                           Path(S46,S47)
	S49= GPR.Rdata2=b                                           GPR-Read(S48,S45)
	S50= GPR.Rdata2=>B.In                                       Premise(F62)
	S51= B.In=b                                                 Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F68)
	S53= CtrlPCInc=0                                            Premise(F69)
	S54= PC[Out]=addr+4                                         PC-Hold(S39,S52,S53)
	S55= CtrlICache=0                                           Premise(F71)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S55)
	S57= CtrlB=1                                                Premise(F78)
	S58= [B]=b                                                  B-Write(S51,S57)

EX	S59= B.Out=b                                                B-Out(S58)
	S60= CMPU.A=32'b0                                           Premise(F80)
	S61= B.Out=>CMPU.B                                          Premise(F81)
	S62= CMPU.B=b                                               Path(S59,S61)
	S63= CMPU.zero=CompareS(32'b0,b)                            CMPU-CMPS(S60,S62)
	S64= CMPU.zero=>ConditionReg.In                             Premise(F83)
	S65= ConditionReg.In=CompareS(32'b0,b)                      Path(S63,S64)
	S66= CtrlPC=0                                               Premise(F89)
	S67= CtrlPCInc=0                                            Premise(F90)
	S68= PC[Out]=addr+4                                         PC-Hold(S54,S66,S67)
	S69= CtrlICache=0                                           Premise(F92)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S69)
	S71= CtrlConditionReg=1                                     Premise(F100)
	S72= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Write(S65,S71)

MEM	S73= CtrlPC=0                                               Premise(F106)
	S74= CtrlPCInc=0                                            Premise(F107)
	S75= PC[Out]=addr+4                                         PC-Hold(S68,S73,S74)
	S76= CtrlICache=0                                           Premise(F109)
	S77= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S76)
	S78= CtrlConditionReg=0                                     Premise(F117)
	S79= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S72,S78)

MEM(DMMU1)	S80= CtrlPC=0                                               Premise(F123)
	S81= CtrlPCInc=0                                            Premise(F124)
	S82= PC[Out]=addr+4                                         PC-Hold(S75,S80,S81)
	S83= CtrlICache=0                                           Premise(F126)
	S84= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S77,S83)
	S85= CtrlConditionReg=0                                     Premise(F134)
	S86= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S79,S85)

MEM(DMMU2)	S87= CtrlPC=0                                               Premise(F140)
	S88= CtrlPCInc=0                                            Premise(F141)
	S89= PC[Out]=addr+4                                         PC-Hold(S82,S87,S88)
	S90= CtrlICache=0                                           Premise(F143)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S90)
	S92= CtrlConditionReg=0                                     Premise(F151)
	S93= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S86,S92)

WB	S94= CtrlPC=0                                               Premise(F160)
	S95= CtrlPCInc=0                                            Premise(F161)
	S96= PC[Out]=addr+4                                         PC-Hold(S89,S94,S95)
	S97= CtrlICache=0                                           Premise(F163)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S91,S97)
	S99= CtrlConditionReg=0                                     Premise(F171)
	S100= [ConditionReg]=CompareS(32'b0,b)                      ConditionReg-Hold(S93,S99)

POST	S96= PC[Out]=addr+4                                         PC-Hold(S89,S94,S95)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S91,S97)
	S100= [ConditionReg]=CompareS(32'b0,b)                      ConditionReg-Hold(S93,S99)

