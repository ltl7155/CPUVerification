
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= ICache[addr]={1,rs,12,imm}                              Premise(F3)
	S3= GPR[rs]=a                                               Premise(F4)

IF	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PC.Out=>ICache.IEA                                      Premise(F56)
	S6= ICache.IEA=addr                                         Path(S4,S5)
	S7= ICache.Out={1,rs,12,imm}                                ICache-Search(S6,S2)
	S8= ICache.Out=>IR_ID.In                                    Premise(F64)
	S9= IR_ID.In={1,rs,12,imm}                                  Path(S7,S8)
	S10= CtrlPC=0                                               Premise(F101)
	S11= CtrlPCInc=1                                            Premise(F102)
	S12= PC[Out]=addr+4                                         PC-Inc(S1,S10,S11)
	S13= CtrlCP0=0                                              Premise(F104)
	S14= CP0[ASID]=pid                                          CP0-Hold(S0,S13)
	S15= CtrlIR_ID=1                                            Premise(F116)
	S16= [IR_ID]={1,rs,12,imm}                                  IR_ID-Write(S9,S15)
	S17= CtrlGPR=0                                              Premise(F120)
	S18= GPR[rs]=a                                              GPR-Hold(S3,S17)

ID	S19= IR_ID.Out25_21=rs                                      IR-Out(S16)
	S20= IR_ID.Out15_0=imm                                      IR-Out(S16)
	S21= FU.OutID1=>A_EX.In                                     Premise(F247)
	S22= IMMEXT.Out=>B_EX.In                                    Premise(F249)
	S23= GPR.Rdata1=>FU.InID1                                   Premise(F294)
	S24= IR_ID.Out25_21=>GPR.RReg1                              Premise(F297)
	S25= GPR.RReg1=rs                                           Path(S19,S24)
	S26= GPR.Rdata1=a                                           GPR-Read(S25,S18)
	S27= FU.InID1=a                                             Path(S26,S23)
	S28= FU.OutID1=FU(a)                                        FU-Forward(S27)
	S29= A_EX.In=FU(a)                                          Path(S28,S21)
	S30= IR_ID.Out15_0=>IMMEXT.In                               Premise(F301)
	S31= IMMEXT.In=imm                                          Path(S20,S30)
	S32= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S31)
	S33= B_EX.In={16{imm[15]},imm}                              Path(S32,S22)
	S34= CtrlA_EX=1                                             Premise(F338)
	S35= [A_EX]=FU(a)                                           A_EX-Write(S29,S34)
	S36= CtrlB_EX=1                                             Premise(F341)
	S37= [B_EX]={16{imm[15]},imm}                               B_EX-Write(S33,S36)
	S38= CtrlPC=0                                               Premise(F344)
	S39= CtrlPCInc=0                                            Premise(F345)
	S40= PC[Out]=addr+4                                         PC-Hold(S12,S38,S39)
	S41= CtrlCP0=0                                              Premise(F347)
	S42= CP0[ASID]=pid                                          CP0-Hold(S14,S41)

EX	S43= A_EX.Out=FU(a)                                         A_EX-Out(S35)
	S44= B_EX.Out={16{imm[15]},imm}                             B_EX-Out(S37)
	S45= A_EX.Out=>CMPU.A                                       Premise(F373)
	S46= CMPU.A=FU(a)                                           Path(S43,S45)
	S47= B_EX.Out=>CMPU.B                                       Premise(F374)
	S48= CMPU.B={16{imm[15]},imm}                               Path(S44,S47)
	S49= CMPU.zero=CompareS(FU(a),{16{imm[15]},imm})            CMPU-CMPS(S46,S48)
	S50= CMPU.zero=>ConditionReg_MEM.In                         Premise(F406)
	S51= ConditionReg_MEM.In=CompareS(FU(a),{16{imm[15]},imm})  Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F467)
	S53= CtrlPCInc=0                                            Premise(F468)
	S54= PC[Out]=addr+4                                         PC-Hold(S40,S52,S53)
	S55= CtrlCP0=0                                              Premise(F470)
	S56= CP0[ASID]=pid                                          CP0-Hold(S42,S55)
	S57= CtrlConditionReg_MEM=1                                 Premise(F475)
	S58= [ConditionReg_MEM]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_MEM-Write(S51,S57)

MEM	S59= PC.Out=addr+4                                          PC-Out(S54)
	S60= CP0.ASID=pid                                           CP0-Read-ASID(S56)
	S61= ConditionReg_MEM.Out=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_MEM-Out(S58)
	S62= PC.Out=>CP0.EPCIn                                      Premise(F498)
	S63= CP0.EPCIn=addr+4                                       Path(S59,S62)
	S64= CP0.ExCodeIn=5'h0d                                     Premise(F499)
	S65= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F527)
	S66= ConditionReg_DMMU1.In=CompareS(FU(a),{16{imm[15]},imm})Path(S61,S65)
	S67= CP0.ASID=>PIDReg.In                                    Premise(F559)
	S68= PIDReg.In=pid                                          Path(S60,S67)
	S69= CtrlEPCIn=1                                            Premise(F594)
	S70= CP0[EPC]=addr+4                                        CP0-Write-EPC(S63,S69)
	S71= CtrlExCodeIn=1                                         Premise(F595)
	S72= CP0[ExCode]=5'h0d                                      CP0-Write-ExCode(S64,S71)
	S73= CtrlConditionReg_DMMU1=1                               Premise(F599)
	S74= [ConditionReg_DMMU1]=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_DMMU1-Write(S66,S73)
	S75= CtrlPIDReg=1                                           Premise(F614)
	S76= [PIDReg]=pid                                           PIDReg-Write(S68,S75)

DMMU1	S77= ConditionReg_DMMU1.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU1-Out(S74)
	S78= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In          Premise(F650)
	S79= ConditionReg_DMMU2.In=CompareS(FU(a),{16{imm[15]},imm})Path(S77,S78)
	S80= CtrlCP0=0                                              Premise(F715)
	S81= CP0[EPC]=addr+4                                        CP0-Hold(S70,S80)
	S82= CP0[ExCode]=5'h0d                                      CP0-Hold(S72,S80)
	S83= CtrlConditionReg_DMMU2=1                               Premise(F722)
	S84= [ConditionReg_DMMU2]=CompareS(FU(a),{16{imm[15]},imm}) ConditionReg_DMMU2-Write(S79,S83)
	S85= CtrlPIDReg=0                                           Premise(F736)
	S86= [PIDReg]=pid                                           PIDReg-Hold(S76,S85)

DMMU2	S87= ConditionReg_DMMU2.Out=CompareS(FU(a),{16{imm[15]},imm})ConditionReg_DMMU2-Out(S84)
	S88= ConditionReg_DMMU2.Out=>ConditionReg_WB.In             Premise(F774)
	S89= ConditionReg_WB.In=CompareS(FU(a),{16{imm[15]},imm})   Path(S87,S88)
	S90= CtrlCP0=0                                              Premise(F837)
	S91= CP0[EPC]=addr+4                                        CP0-Hold(S81,S90)
	S92= CP0[ExCode]=5'h0d                                      CP0-Hold(S82,S90)
	S93= CtrlConditionReg_WB=1                                  Premise(F845)
	S94= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})    ConditionReg_WB-Write(S89,S93)
	S95= CtrlPIDReg=0                                           Premise(F858)
	S96= [PIDReg]=pid                                           PIDReg-Hold(S86,S95)

WB	S97= CtrlCP0=0                                              Premise(F959)
	S98= CP0[EPC]=addr+4                                        CP0-Hold(S91,S97)
	S99= CP0[ExCode]=5'h0d                                      CP0-Hold(S92,S97)
	S100= CtrlConditionReg_WB=0                                 Premise(F967)
	S101= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S94,S100)
	S102= CtrlPIDReg=0                                          Premise(F980)
	S103= [PIDReg]=pid                                          PIDReg-Hold(S96,S102)

POST	S98= CP0[EPC]=addr+4                                        CP0-Hold(S91,S97)
	S99= CP0[ExCode]=5'h0d                                      CP0-Hold(S92,S97)
	S101= [ConditionReg_WB]=CompareS(FU(a),{16{imm[15]},imm})   ConditionReg_WB-Hold(S94,S100)
	S103= [PIDReg]=pid                                          PIDReg-Hold(S96,S102)

