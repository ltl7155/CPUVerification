
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={1,rS,16,offset}                           Premise(F3)
	S2= GPR[rS]=a                                               Premise(F4)

IF	S3= PC.Out=addr                                             PC-Out(S0)
	S4= PC.Out=>ICache.IEA                                      Premise(F9)
	S5= ICache.IEA=addr                                         Path(S3,S4)
	S6= ICache.Out={1,rS,16,offset}                             ICache-Search(S5,S1)
	S7= ICache.Out=>IR.In                                       Premise(F10)
	S8= IR.In={1,rS,16,offset}                                  Path(S6,S7)
	S9= CtrlPC=0                                                Premise(F18)
	S10= CtrlPCInc=1                                            Premise(F19)
	S11= PC[Out]=addr+4                                         PC-Inc(S0,S9,S10)
	S12= CtrlIR=1                                               Premise(F22)
	S13= [IR]={1,rS,16,offset}                                  IR-Write(S8,S12)
	S14= CtrlGPR=0                                              Premise(F26)
	S15= GPR[rS]=a                                              GPR-Hold(S2,S14)

ID	S16= IR.Out25_21=rS                                         IR-Out(S13)
	S17= IR.Out25_21=>GPR.RReg1                                 Premise(F50)
	S18= GPR.RReg1=rS                                           Path(S16,S17)
	S19= GPR.Rdata1=a                                           GPR-Read(S18,S15)
	S20= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S21= GPR.Rdata1=>A.In                                       Premise(F52)
	S22= A.In=a                                                 Path(S19,S21)
	S23= GPR.Rdata2=>B.In                                       Premise(F53)
	S24= B.In=32'b0                                             Path(S20,S23)
	S25= CtrlPC=0                                               Premise(F59)
	S26= CtrlPCInc=0                                            Premise(F60)
	S27= PC[Out]=addr+4                                         PC-Hold(S11,S25,S26)
	S28= CtrlA=1                                                Premise(F68)
	S29= [A]=a                                                  A-Write(S22,S28)
	S30= CtrlB=1                                                Premise(F69)
	S31= [B]=32'b0                                              B-Write(S24,S30)

EX	S32= PC.Out=addr+4                                          PC-Out(S27)
	S33= A.Out=a                                                A-Out(S29)
	S34= B.Out=32'b0                                            B-Out(S31)
	S35= A.Out=>CMPU.A                                          Premise(F77)
	S36= CMPU.A=a                                               Path(S33,S35)
	S37= B.Out=>CMPU.B                                          Premise(F78)
	S38= CMPU.B=32'b0                                           Path(S34,S37)
	S39= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S36,S38)
	S40= CMPU.lt=>ConditionReg.In                               Premise(F80)
	S41= ConditionReg.In=CompareS(a,32'b0)                      Path(S39,S40)
	S42= GPR.WReg=5'd31                                         Premise(F81)
	S43= PC.Out=>GPR.WData                                      Premise(F82)
	S44= GPR.WData=addr+4                                       Path(S32,S43)
	S45= CtrlGPR=1                                              Premise(F96)
	S46= GPR[5'd31]=addr+4                                      GPR-Write(S42,S44,S45)
	S47= CtrlConditionReg=1                                     Premise(F100)
	S48= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S41,S47)

MEM	S49= CtrlGPR=0                                              Premise(F116)
	S50= GPR[5'd31]=addr+4                                      GPR-Hold(S46,S49)
	S51= CtrlConditionReg=0                                     Premise(F120)
	S52= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S48,S51)

WB	S53= CtrlGPR=0                                              Premise(F170)
	S54= GPR[5'd31]=addr+4                                      GPR-Hold(S50,S53)
	S55= CtrlConditionReg=0                                     Premise(F174)
	S56= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S52,S55)

POST	S54= GPR[5'd31]=addr+4                                      GPR-Hold(S50,S53)
	S56= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S52,S55)

