
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,11}                      Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= IMMU.Addr=>IAddrReg.In                                  Premise(F73)
	S8= PC.Out=>IMMU.IEA                                        Premise(F78)
	S9= IMMU.IEA=addr                                           Path(S6,S8)
	S10= CP0.ASID=>IMMU.PID                                     Premise(F79)
	S11= IMMU.PID=pid                                           Path(S5,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S9)
	S13= IAddrReg.In={pid,addr}                                 Path(S12,S7)
	S14= CtrlGPR=0                                              Premise(F139)
	S15= GPR[rS]=a                                              GPR-Hold(S3,S14)
	S16= GPR[rT]=b                                              GPR-Hold(S4,S14)
	S17= CtrlIAddrReg=1                                         Premise(F140)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlPC=0                                               Premise(F141)
	S20= CtrlPCInc=0                                            Premise(F142)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIMem=0                                             Premise(F143)
	S23= IMem[{pid,addr}]={0,rS,rT,rD,0,11}                     IMem-Hold(S2,S22)

IMMU	S24= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S25= PC.Out=addr                                            PC-Out(S21)
	S26= PC.Out=>ICache.IEA                                     Premise(F219)
	S27= ICache.IEA=addr                                        Path(S25,S26)
	S28= IMem.MEM8WordOut=>ICache.WData                         Premise(F221)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F225)
	S30= IMem.RAddr={pid,addr}                                  Path(S24,S29)
	S31= IMem.Out={0,rS,rT,rD,0,11}                             IMem-Read(S30,S23)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S23)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S28)
	S34= IMem.Out=>IRMux.MemData                                Premise(F228)
	S35= IRMux.MemData={0,rS,rT,rD,0,11}                        Path(S31,S34)
	S36= IRMux.Out={0,rS,rT,rD,0,11}                            IRMux-Select2(S35)
	S37= IRMux.Out=>IR_ID.In                                    Premise(F234)
	S38= IR_ID.In={0,rS,rT,rD,0,11}                             Path(S36,S37)
	S39= CtrlICache=1                                           Premise(F271)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S33,S39)
	S41= CtrlIR_ID=1                                            Premise(F280)
	S42= [IR_ID]={0,rS,rT,rD,0,11}                              IR_ID-Write(S38,S41)
	S43= CtrlGPR=0                                              Premise(F284)
	S44= GPR[rS]=a                                              GPR-Hold(S15,S43)
	S45= GPR[rT]=b                                              GPR-Hold(S16,S43)
	S46= CtrlPC=0                                               Premise(F286)
	S47= CtrlPCInc=1                                            Premise(F287)
	S48= PC[Out]=addr+4                                         PC-Inc(S21,S46,S47)

ID	S49= IR_ID.Out={0,rS,rT,rD,0,11}                            IR-Out(S42)
	S50= IR_ID.Out25_21=rS                                      IR-Out(S42)
	S51= IR_ID.Out20_16=rT                                      IR-Out(S42)
	S52= FU.OutID1=>A_EX.In                                     Premise(F297)
	S53= FU.OutID2=>B_EX.In                                     Premise(F301)
	S54= GPR.Rdata1=>FU.InID1                                   Premise(F352)
	S55= GPR.Rdata2=>FU.InID2                                   Premise(F354)
	S56= IR_ID.Out25_21=>GPR.RReg1                              Premise(F359)
	S57= GPR.RReg1=rS                                           Path(S50,S56)
	S58= GPR.Rdata1=a                                           GPR-Read(S57,S44)
	S59= FU.InID1=a                                             Path(S58,S54)
	S60= FU.OutID1=FU(a)                                        FU-Forward(S59)
	S61= A_EX.In=FU(a)                                          Path(S60,S52)
	S62= IR_ID.Out20_16=>GPR.RReg2                              Premise(F360)
	S63= GPR.RReg2=rT                                           Path(S51,S62)
	S64= GPR.Rdata2=b                                           GPR-Read(S63,S45)
	S65= FU.InID2=b                                             Path(S64,S55)
	S66= FU.OutID2=FU(b)                                        FU-Forward(S65)
	S67= B_EX.In=FU(b)                                          Path(S66,S53)
	S68= IR_ID.Out=>IR_EX.In                                    Premise(F377)
	S69= IR_EX.In={0,rS,rT,rD,0,11}                             Path(S49,S68)
	S70= CtrlA_EX=1                                             Premise(F411)
	S71= [A_EX]=FU(a)                                           A_EX-Write(S61,S70)
	S72= CtrlB_EX=1                                             Premise(F413)
	S73= [B_EX]=FU(b)                                           B_EX-Write(S67,S72)
	S74= CtrlICache=0                                           Premise(F416)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S74)
	S76= CtrlIR_EX=1                                            Premise(F424)
	S77= [IR_EX]={0,rS,rT,rD,0,11}                              IR_EX-Write(S69,S76)
	S78= CtrlPC=0                                               Premise(F431)
	S79= CtrlPCInc=0                                            Premise(F432)
	S80= PC[Out]=addr+4                                         PC-Hold(S48,S78,S79)

EX	S81= A_EX.Out=FU(a)                                         A_EX-Out(S71)
	S82= B_EX.Out=FU(b)                                         B_EX-Out(S73)
	S83= IR_EX.Out={0,rS,rT,rD,0,11}                            IR_EX-Out(S77)
	S84= A_EX.Out=>A_MEM.In                                     Premise(F443)
	S85= A_MEM.In=FU(a)                                         Path(S81,S84)
	S86= CMPU.A=32'b0                                           Premise(F448)
	S87= B_EX.Out=>CMPU.B                                       Premise(F449)
	S88= CMPU.B=FU(b)                                           Path(S82,S87)
	S89= CMPU.zero=CompareS(32'b0,FU(b))                        CMPU-CMPS(S86,S88)
	S90= CMPU.zero=>ConditionReg_MEM.In                         Premise(F484)
	S91= ConditionReg_MEM.In=CompareS(32'b0,FU(b))              Path(S89,S90)
	S92= IR_EX.Out=>IR_MEM.In                                   Premise(F528)
	S93= IR_MEM.In={0,rS,rT,rD,0,11}                            Path(S83,S92)
	S94= CtrlA_MEM=1                                            Premise(F555)
	S95= [A_MEM]=FU(a)                                          A_MEM-Write(S85,S94)
	S96= CtrlICache=0                                           Premise(F563)
	S97= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S75,S96)
	S98= CtrlConditionReg_MEM=1                                 Premise(F566)
	S99= [ConditionReg_MEM]=CompareS(32'b0,FU(b))               ConditionReg_MEM-Write(S91,S98)
	S100= CtrlIR_MEM=1                                          Premise(F574)
	S101= [IR_MEM]={0,rS,rT,rD,0,11}                            IR_MEM-Write(S93,S100)
	S102= CtrlPC=0                                              Premise(F578)
	S103= CtrlPCInc=0                                           Premise(F579)
	S104= PC[Out]=addr+4                                        PC-Hold(S80,S102,S103)

MEM	S105= A_MEM.Out=FU(a)                                       A_MEM-Out(S95)
	S106= ConditionReg_MEM.Out=CompareS(32'b0,FU(b))            ConditionReg_MEM-Out(S99)
	S107= IR_MEM.Out={0,rS,rT,rD,0,11}                          IR_MEM-Out(S101)
	S108= A_MEM.Out=>A_DMMU1.In                                 Premise(F587)
	S109= A_DMMU1.In=FU(a)                                      Path(S105,S108)
	S110= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In           Premise(F627)
	S111= ConditionReg_DMMU1.In=CompareS(32'b0,FU(b))           Path(S106,S110)
	S112= IR_MEM.Out=>IR_DMMU1.In                               Premise(F667)
	S113= IR_DMMU1.In={0,rS,rT,rD,0,11}                         Path(S107,S112)
	S114= CtrlA_DMMU1=1                                         Premise(F701)
	S115= [A_DMMU1]=FU(a)                                       A_DMMU1-Write(S109,S114)
	S116= CtrlICache=0                                          Premise(F708)
	S117= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S97,S116)
	S118= CtrlConditionReg_DMMU1=1                              Premise(F712)
	S119= [ConditionReg_DMMU1]=CompareS(32'b0,FU(b))            ConditionReg_DMMU1-Write(S111,S118)
	S120= CtrlIR_DMMU1=1                                        Premise(F714)
	S121= [IR_DMMU1]={0,rS,rT,rD,0,11}                          IR_DMMU1-Write(S113,S120)
	S122= CtrlPC=0                                              Premise(F723)
	S123= CtrlPCInc=0                                           Premise(F724)
	S124= PC[Out]=addr+4                                        PC-Hold(S104,S122,S123)

DMMU1	S125= A_DMMU1.Out=FU(a)                                     A_DMMU1-Out(S115)
	S126= ConditionReg_DMMU1.Out=CompareS(32'b0,FU(b))          ConditionReg_DMMU1-Out(S119)
	S127= IR_DMMU1.Out={0,rS,rT,rD,0,11}                        IR_DMMU1-Out(S121)
	S128= A_DMMU1.Out=>A_DMMU2.In                               Premise(F733)
	S129= A_DMMU2.In=FU(a)                                      Path(S125,S128)
	S130= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In         Premise(F773)
	S131= ConditionReg_DMMU2.In=CompareS(32'b0,FU(b))           Path(S126,S130)
	S132= IR_DMMU1.Out=>IR_DMMU2.In                             Premise(F813)
	S133= IR_DMMU2.In={0,rS,rT,rD,0,11}                         Path(S127,S132)
	S134= CtrlA_DMMU2=1                                         Premise(F847)
	S135= [A_DMMU2]=FU(a)                                       A_DMMU2-Write(S129,S134)
	S136= CtrlICache=0                                          Premise(F853)
	S137= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S117,S136)
	S138= CtrlConditionReg_DMMU2=1                              Premise(F858)
	S139= [ConditionReg_DMMU2]=CompareS(32'b0,FU(b))            ConditionReg_DMMU2-Write(S131,S138)
	S140= CtrlIR_DMMU2=1                                        Premise(F860)
	S141= [IR_DMMU2]={0,rS,rT,rD,0,11}                          IR_DMMU2-Write(S133,S140)
	S142= CtrlPC=0                                              Premise(F868)
	S143= CtrlPCInc=0                                           Premise(F869)
	S144= PC[Out]=addr+4                                        PC-Hold(S124,S142,S143)

DMMU2	S145= A_DMMU2.Out=FU(a)                                     A_DMMU2-Out(S135)
	S146= ConditionReg_DMMU2.Out=CompareS(32'b0,FU(b))          ConditionReg_DMMU2-Out(S139)
	S147= IR_DMMU2.Out={0,rS,rT,rD,0,11}                        IR_DMMU2-Out(S141)
	S148= A_DMMU2.Out=>A_WB.In                                  Premise(F881)
	S149= A_WB.In=FU(a)                                         Path(S145,S148)
	S150= ConditionReg_DMMU2.Out=>ConditionReg_WB.In            Premise(F920)
	S151= ConditionReg_WB.In=CompareS(32'b0,FU(b))              Path(S146,S150)
	S152= IR_DMMU2.Out=>IR_WB.In                                Premise(F964)
	S153= IR_WB.In={0,rS,rT,rD,0,11}                            Path(S147,S152)
	S154= CtrlA_WB=1                                            Premise(F994)
	S155= [A_WB]=FU(a)                                          A_WB-Write(S149,S154)
	S156= CtrlICache=0                                          Premise(F998)
	S157= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S137,S156)
	S158= CtrlConditionReg_WB=1                                 Premise(F1000)
	S159= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Write(S151,S158)
	S160= CtrlIR_WB=1                                           Premise(F1010)
	S161= [IR_WB]={0,rS,rT,rD,0,11}                             IR_WB-Write(S153,S160)
	S162= CtrlPC=0                                              Premise(F1013)
	S163= CtrlPCInc=0                                           Premise(F1014)
	S164= PC[Out]=addr+4                                        PC-Hold(S144,S162,S163)

WB	S165= A_WB.Out=FU(a)                                        A_WB-Out(S155)
	S166= IR_WB.Out15_11=rD                                     IR-Out(S161)
	S167= A_WB.Out=>GPR.WData                                   Premise(F1088)
	S168= GPR.WData=FU(a)                                       Path(S165,S167)
	S169= IR_WB.Out15_11=>GPR.WReg                              Premise(F1089)
	S170= GPR.WReg=rD                                           Path(S166,S169)
	S171= CtrlICache=0                                          Premise(F1143)
	S172= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S157,S171)
	S173= CtrlConditionReg_WB=0                                 Premise(F1145)
	S174= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S159,S173)
	S175= CtrlGPR=1                                             Premise(F1156)
	S176= GPR[rD]=FU(a)                                         GPR-Write(S170,S168,S175)
	S177= CtrlPC=0                                              Premise(F1158)
	S178= CtrlPCInc=0                                           Premise(F1159)
	S179= PC[Out]=addr+4                                        PC-Hold(S164,S177,S178)

POST	S172= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S157,S171)
	S174= [ConditionReg_WB]=CompareS(32'b0,FU(b))               ConditionReg_WB-Hold(S159,S173)
	S176= GPR[rD]=FU(a)                                         GPR-Write(S170,S168,S175)
	S179= PC[Out]=addr+4                                        PC-Hold(S164,S177,S178)

