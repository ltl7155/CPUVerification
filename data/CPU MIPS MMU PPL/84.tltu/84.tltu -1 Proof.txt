
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rs,rt,code,51}                      Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)
	S4= GPR[rt]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= IMMU.Addr=>IAddrReg.In                                  Premise(F63)
	S8= PC.Out=>IMMU.IEA                                        Premise(F68)
	S9= IMMU.IEA=addr                                           Path(S6,S8)
	S10= CP0.ASID=>IMMU.PID                                     Premise(F69)
	S11= IMMU.PID=pid                                           Path(S5,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S9)
	S13= IAddrReg.In={pid,addr}                                 Path(S12,S7)
	S14= CtrlPC=0                                               Premise(F116)
	S15= CtrlPCInc=0                                            Premise(F117)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlGPR=0                                              Premise(F135)
	S18= GPR[rs]=a                                              GPR-Hold(S3,S17)
	S19= GPR[rt]=b                                              GPR-Hold(S4,S17)
	S20= CtrlIAddrReg=1                                         Premise(F136)
	S21= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S20)
	S22= CtrlIMem=0                                             Premise(F137)
	S23= IMem[{pid,addr}]={0,rs,rt,code,51}                     IMem-Hold(S2,S22)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S21)
	S26= PC.Out=>ICache.IEA                                     Premise(F200)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IMem.MEM8WordOut=>ICache.WData                         Premise(F202)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F206)
	S30= IMem.RAddr={pid,addr}                                  Path(S25,S29)
	S31= IMem.Out={0,rs,rt,code,51}                             IMem-Read(S30,S23)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S23)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S28)
	S34= IMem.Out=>IRMux.MemData                                Premise(F209)
	S35= IRMux.MemData={0,rs,rt,code,51}                        Path(S31,S34)
	S36= IRMux.Out={0,rs,rt,code,51}                            IRMux-Select2(S35)
	S37= IRMux.Out=>IR_ID.In                                    Premise(F215)
	S38= IR_ID.In={0,rs,rt,code,51}                             Path(S36,S37)
	S39= CtrlICache=1                                           Premise(F258)
	S40= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S33,S39)
	S41= CtrlIR_ID=1                                            Premise(F267)
	S42= [IR_ID]={0,rs,rt,code,51}                              IR_ID-Write(S38,S41)
	S43= CtrlGPR=0                                              Premise(F271)
	S44= GPR[rs]=a                                              GPR-Hold(S18,S43)
	S45= GPR[rt]=b                                              GPR-Hold(S19,S43)

ID	S46= IR_ID.Out25_21=rs                                      IR-Out(S42)
	S47= IR_ID.Out20_16=rt                                      IR-Out(S42)
	S48= FU.OutID1=>A_EX.In                                     Premise(F277)
	S49= FU.OutID2=>B_EX.In                                     Premise(F279)
	S50= GPR.Rdata1=>FU.InID1                                   Premise(F329)
	S51= GPR.Rdata2=>FU.InID2                                   Premise(F331)
	S52= IR_ID.Out25_21=>GPR.RReg1                              Premise(F333)
	S53= GPR.RReg1=rs                                           Path(S46,S52)
	S54= GPR.Rdata1=a                                           GPR-Read(S53,S44)
	S55= FU.InID1=a                                             Path(S54,S50)
	S56= FU.OutID1=FU(a)                                        FU-Forward(S55)
	S57= A_EX.In=FU(a)                                          Path(S56,S48)
	S58= IR_ID.Out20_16=>GPR.RReg2                              Premise(F334)
	S59= GPR.RReg2=rt                                           Path(S47,S58)
	S60= GPR.Rdata2=b                                           GPR-Read(S59,S45)
	S61= FU.InID2=b                                             Path(S60,S51)
	S62= FU.OutID2=FU(b)                                        FU-Forward(S61)
	S63= B_EX.In=FU(b)                                          Path(S62,S49)
	S64= CtrlA_EX=1                                             Premise(F382)
	S65= [A_EX]=FU(a)                                           A_EX-Write(S57,S64)
	S66= CtrlB_EX=1                                             Premise(F385)
	S67= [B_EX]=FU(b)                                           B_EX-Write(S63,S66)
	S68= CtrlICache=0                                           Premise(F394)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S40,S68)

EX	S70= A_EX.Out=FU(a)                                         A_EX-Out(S65)
	S71= B_EX.Out=FU(b)                                         B_EX-Out(S67)
	S72= A_EX.Out=>CMPU.A                                       Premise(F417)
	S73= CMPU.A=FU(a)                                           Path(S70,S72)
	S74= B_EX.Out=>CMPU.B                                       Premise(F418)
	S75= CMPU.B=FU(b)                                           Path(S71,S74)
	S76= CMPU.lt=CompareU(FU(a),FU(b))                          CMPU-CMPU(S73,S75)
	S77= CMPU.lt=>ConditionReg_MEM.In                           Premise(F454)
	S78= ConditionReg_MEM.In=CompareU(FU(a),FU(b))              Path(S76,S77)
	S79= CtrlICache=0                                           Premise(F532)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S69,S79)
	S81= CtrlConditionReg_MEM=1                                 Premise(F534)
	S82= [ConditionReg_MEM]=CompareU(FU(a),FU(b))               ConditionReg_MEM-Write(S78,S81)

MEM	S83= ConditionReg_MEM.Out=CompareU(FU(a),FU(b))             ConditionReg_MEM-Out(S82)
	S84= ConditionReg_MEM.Out=>ConditionReg_DMMU1.In            Premise(F590)
	S85= ConditionReg_DMMU1.In=CompareU(FU(a),FU(b))            Path(S83,S84)
	S86= CtrlICache=0                                           Premise(F670)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S80,S86)
	S88= CtrlConditionReg_DMMU1=1                               Premise(F673)
	S89= [ConditionReg_DMMU1]=CompareU(FU(a),FU(b))             ConditionReg_DMMU1-Write(S85,S88)

DMMU1	S90= ConditionReg_DMMU1.Out=CompareU(FU(a),FU(b))           ConditionReg_DMMU1-Out(S89)
	S91= ConditionReg_DMMU1.Out=>ConditionReg_DMMU2.In          Premise(F728)
	S92= ConditionReg_DMMU2.In=CompareU(FU(a),FU(b))            Path(S90,S91)
	S93= CtrlICache=0                                           Premise(F807)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S93)
	S95= CtrlConditionReg_DMMU2=1                               Premise(F811)
	S96= [ConditionReg_DMMU2]=CompareU(FU(a),FU(b))             ConditionReg_DMMU2-Write(S92,S95)

DMMU2	S97= ConditionReg_DMMU2.Out=CompareU(FU(a),FU(b))           ConditionReg_DMMU2-Out(S96)
	S98= ConditionReg_DMMU2.Out=>ConditionReg_WB.In             Premise(F867)
	S99= ConditionReg_WB.In=CompareU(FU(a),FU(b))               Path(S97,S98)
	S100= CtrlICache=0                                          Premise(F944)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S100)
	S102= CtrlConditionReg_WB=1                                 Premise(F949)
	S103= [ConditionReg_WB]=CompareU(FU(a),FU(b))               ConditionReg_WB-Write(S99,S102)

WB	S104= CtrlICache=0                                          Premise(F1081)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S104)
	S106= CtrlConditionReg_WB=0                                 Premise(F1086)
	S107= [ConditionReg_WB]=CompareU(FU(a),FU(b))               ConditionReg_WB-Hold(S103,S106)

POST	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S104)
	S107= [ConditionReg_WB]=CompareU(FU(a),FU(b))               ConditionReg_WB-Hold(S103,S106)

