
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={9,rS,rT,SIMM}                         Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={9,rS,rT,SIMM}                        IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F49)

IF(IMMU)	S20= PC.Out=addr                                            PC-Out(S14)
	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S22= IAddrReg.Out=>IMem.RAddr                               Premise(F53)
	S23= IMem.RAddr={pid,addr}                                  Path(S21,S22)
	S24= IMem.Out={9,rS,rT,SIMM}                                IMem-Read(S23,S18)
	S25= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S23,S18)
	S26= IMem.Out=>IRMux.MemData                                Premise(F54)
	S27= IRMux.MemData={9,rS,rT,SIMM}                           Path(S24,S26)
	S28= IRMux.Out={9,rS,rT,SIMM}                               IRMux-Select2(S27)
	S29= IRMux.Out=>IR_ID.In                                    Premise(F58)
	S30= IR_ID.In={9,rS,rT,SIMM}                                Path(S28,S29)
	S31= IMem.MEM8WordOut=>ICache.WData                         Premise(F59)
	S32= ICache.WData=IMemGet8Word({pid,addr})                  Path(S25,S31)
	S33= PC.Out=>ICache.IEA                                     Premise(F60)
	S34= ICache.IEA=addr                                        Path(S20,S33)
	S35= CtrlPC=0                                               Premise(F68)
	S36= CtrlPCInc=1                                            Premise(F69)
	S37= PC[Out]=addr+4                                         PC-Inc(S14,S35,S36)
	S38= CtrlICache=1                                           Premise(F71)
	S39= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S34,S32,S38)
	S40= CtrlIR_ID=1                                            Premise(F74)
	S41= [IR_ID]={9,rS,rT,SIMM}                                 IR_ID-Write(S30,S40)
	S42= CtrlGPR=0                                              Premise(F77)
	S43= GPR[rS]=a                                              GPR-Hold(S19,S42)

ID	S44= IR_ID.Out={9,rS,rT,SIMM}                               IR-Out(S41)
	S45= IR_ID.Out25_21=rS                                      IR-Out(S41)
	S46= IR_ID.Out15_0=SIMM                                     IR-Out(S41)
	S47= IR_ID.Out25_21=>GPR.RReg1                              Premise(F97)
	S48= GPR.RReg1=rS                                           Path(S45,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S43)
	S50= IR_ID.Out15_0=>IMMEXT.In                               Premise(F98)
	S51= IMMEXT.In=SIMM                                         Path(S46,S50)
	S52= IMMEXT.Out={16{SIMM[15]},SIMM}                         IMMEXT(S51)
	S53= GPR.Rdata1=>FU.InID1                                   Premise(F99)
	S54= FU.InID1=a                                             Path(S49,S53)
	S55= FU.OutID1=FU(a)                                        FU-Forward(S54)
	S56= FU.OutID1=>A_EX.In                                     Premise(F101)
	S57= A_EX.In=FU(a)                                          Path(S55,S56)
	S58= IMMEXT.Out=>B_EX.In                                    Premise(F102)
	S59= B_EX.In={16{SIMM[15]},SIMM}                            Path(S52,S58)
	S60= IR_ID.Out=>IR_EX.In                                    Premise(F103)
	S61= IR_EX.In={9,rS,rT,SIMM}                                Path(S44,S60)
	S62= CtrlPC=0                                               Premise(F112)
	S63= CtrlPCInc=0                                            Premise(F113)
	S64= PC[Out]=addr+4                                         PC-Hold(S37,S62,S63)
	S65= CtrlICache=0                                           Premise(F115)
	S66= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S39,S65)
	S67= CtrlA_EX=1                                             Premise(F122)
	S68= [A_EX]=FU(a)                                           A_EX-Write(S57,S67)
	S69= CtrlB_EX=1                                             Premise(F123)
	S70= [B_EX]={16{SIMM[15]},SIMM}                             B_EX-Write(S59,S69)
	S71= CtrlIR_EX=1                                            Premise(F124)
	S72= [IR_EX]={9,rS,rT,SIMM}                                 IR_EX-Write(S61,S71)

EX	S73= A_EX.Out=FU(a)                                         A_EX-Out(S68)
	S74= B_EX.Out={16{SIMM[15]},SIMM}                           B_EX-Out(S70)
	S75= IR_EX.Out={9,rS,rT,SIMM}                               IR_EX-Out(S72)
	S76= A_EX.Out=>ALU.A                                        Premise(F141)
	S77= ALU.A=FU(a)                                            Path(S73,S76)
	S78= B_EX.Out=>ALU.B                                        Premise(F142)
	S79= ALU.B={16{SIMM[15]},SIMM}                              Path(S74,S78)
	S80= ALU.Out=FU(a)+{16{SIMM[15]},SIMM}                      ALU(S77,S79)
	S81= ALU.Out=>ALUOut_MEM.In                                 Premise(F144)
	S82= ALUOut_MEM.In=FU(a)+{16{SIMM[15]},SIMM}                Path(S80,S81)
	S83= IR_EX.Out=>IR_MEM.In                                   Premise(F147)
	S84= IR_MEM.In={9,rS,rT,SIMM}                               Path(S75,S83)
	S85= CtrlPC=0                                               Premise(F153)
	S86= CtrlPCInc=0                                            Premise(F154)
	S87= PC[Out]=addr+4                                         PC-Hold(S64,S85,S86)
	S88= CtrlICache=0                                           Premise(F156)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S66,S88)
	S90= CtrlALUOut_MEM=1                                       Premise(F166)
	S91= [ALUOut_MEM]=FU(a)+{16{SIMM[15]},SIMM}                 ALUOut_MEM-Write(S82,S90)
	S92= CtrlIR_MEM=1                                           Premise(F167)
	S93= [IR_MEM]={9,rS,rT,SIMM}                                IR_MEM-Write(S84,S92)

MEM	S94= ALUOut_MEM.Out=FU(a)+{16{SIMM[15]},SIMM}               ALUOut_MEM-Out(S91)
	S95= IR_MEM.Out={9,rS,rT,SIMM}                              IR_MEM-Out(S93)
	S96= IR_MEM.Out=>IR_WB.In                                   Premise(F185)
	S97= IR_WB.In={9,rS,rT,SIMM}                                Path(S95,S96)
	S98= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F191)
	S99= ALUOut_WB.In=FU(a)+{16{SIMM[15]},SIMM}                 Path(S94,S98)
	S100= CtrlPC=0                                              Premise(F199)
	S101= CtrlPCInc=0                                           Premise(F200)
	S102= PC[Out]=addr+4                                        PC-Hold(S87,S100,S101)
	S103= CtrlICache=0                                          Premise(F202)
	S104= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S89,S103)
	S105= CtrlIR_WB=1                                           Premise(F215)
	S106= [IR_WB]={9,rS,rT,SIMM}                                IR_WB-Write(S97,S105)
	S107= CtrlALUOut_WB=1                                       Premise(F221)
	S108= [ALUOut_WB]=FU(a)+{16{SIMM[15]},SIMM}                 ALUOut_WB-Write(S99,S107)

WB	S109= IR_WB.Out20_16=rT                                     IR-Out(S106)
	S110= ALUOut_WB.Out=FU(a)+{16{SIMM[15]},SIMM}               ALUOut_WB-Out(S108)
	S111= IR_WB.Out20_16=>GPR.WReg                              Premise(F305)
	S112= GPR.WReg=rT                                           Path(S109,S111)
	S113= ALUOut_WB.Out=>GPR.WData                              Premise(F306)
	S114= GPR.WData=FU(a)+{16{SIMM[15]},SIMM}                   Path(S110,S113)
	S115= CtrlPC=0                                              Premise(F314)
	S116= CtrlPCInc=0                                           Premise(F315)
	S117= PC[Out]=addr+4                                        PC-Hold(S102,S115,S116)
	S118= CtrlICache=0                                          Premise(F317)
	S119= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S104,S118)
	S120= CtrlGPR=1                                             Premise(F323)
	S121= GPR[rT]=FU(a)+{16{SIMM[15]},SIMM}                     GPR-Write(S112,S114,S120)

POST	S117= PC[Out]=addr+4                                        PC-Hold(S102,S115,S116)
	S119= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S104,S118)
	S121= GPR[rT]=FU(a)+{16{SIMM[15]},SIMM}                     GPR-Write(S112,S114,S120)

