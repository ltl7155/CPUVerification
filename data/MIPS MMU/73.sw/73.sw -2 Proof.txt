
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= ICache[addr]={43,rS,rT,offset}                          Premise(F3)
	S3= GPR[rS]=base                                            Premise(F4)
	S4= GPR[rT]=a                                               Premise(F5)

IF	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>ICache.IEA                                      Premise(F10)
	S7= ICache.IEA=addr                                         Path(S5,S6)
	S8= ICache.Out={43,rS,rT,offset}                            ICache-Search(S7,S2)
	S9= ICache.Out=>IR.In                                       Premise(F11)
	S10= IR.In={43,rS,rT,offset}                                Path(S8,S9)
	S11= CtrlCP0=0                                              Premise(F15)
	S12= CP0[ASID]=pid                                          CP0-Hold(S0,S11)
	S13= CtrlPC=0                                               Premise(F19)
	S14= CtrlPCInc=1                                            Premise(F20)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F23)
	S17= [IR]={43,rS,rT,offset}                                 IR-Write(S10,S16)
	S18= CtrlGPR=0                                              Premise(F27)
	S19= GPR[rS]=base                                           GPR-Hold(S3,S18)
	S20= GPR[rT]=a                                              GPR-Hold(S4,S18)

ID	S21= IR.Out25_21=rS                                         IR-Out(S17)
	S22= IR.Out15_0=offset                                      IR-Out(S17)
	S23= IR.Out25_21=>GPR.RReg1                                 Premise(F61)
	S24= GPR.RReg1=rS                                           Path(S21,S23)
	S25= GPR.Rdata1=base                                        GPR-Read(S24,S19)
	S26= IR.Out15_0=>IMMEXT.In                                  Premise(F62)
	S27= IMMEXT.In=offset                                       Path(S22,S26)
	S28= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S27)
	S29= GPR.Rdata1=>A.In                                       Premise(F63)
	S30= A.In=base                                              Path(S25,S29)
	S31= IMMEXT.Out=>B.In                                       Premise(F64)
	S32= B.In={16{offset[15]},offset}                           Path(S28,S31)
	S33= CtrlCP0=0                                              Premise(F66)
	S34= CP0[ASID]=pid                                          CP0-Hold(S12,S33)
	S35= CtrlPC=0                                               Premise(F70)
	S36= CtrlPCInc=0                                            Premise(F71)
	S37= PC[Out]=addr+4                                         PC-Hold(S15,S35,S36)
	S38= CtrlIR=0                                               Premise(F74)
	S39= [IR]={43,rS,rT,offset}                                 IR-Hold(S17,S38)
	S40= CtrlGPR=0                                              Premise(F78)
	S41= GPR[rT]=a                                              GPR-Hold(S20,S40)
	S42= CtrlA=1                                                Premise(F79)
	S43= [A]=base                                               A-Write(S30,S42)
	S44= CtrlB=1                                                Premise(F80)
	S45= [B]={16{offset[15]},offset}                            B-Write(S32,S44)

EX	S46= IR.Out20_16=rT                                         IR-Out(S39)
	S47= A.Out=base                                             A-Out(S43)
	S48= B.Out={16{offset[15]},offset}                          B-Out(S45)
	S49= A.Out=>ALU.A                                           Premise(F88)
	S50= ALU.A=base                                             Path(S47,S49)
	S51= B.Out=>ALU.B                                           Premise(F89)
	S52= ALU.B={16{offset[15]},offset}                          Path(S48,S51)
	S53= ALU.Out=base+{16{offset[15]},offset}                   ALU(S50,S52)
	S54= ALU.Out1_0={base+{16{offset[15]},offset}}[1:0]         ALU(S50,S52)
	S55= ALU.Out=>ALUOut.In                                     Premise(F91)
	S56= ALUOut.In=base+{16{offset[15]},offset}                 Path(S53,S55)
	S57= IR.Out20_16=>GPR.RReg2                                 Premise(F92)
	S58= GPR.RReg2=rT                                           Path(S46,S57)
	S59= GPR.Rdata2=a                                           GPR-Read(S58,S41)
	S60= GPR.Rdata2=>MemDataSelS.In                             Premise(F93)
	S61= MemDataSelS.In=a                                       Path(S59,S60)
	S62= ALU.Out1_0=>MemDataSelS.Addr                           Premise(F94)
	S63= MemDataSelS.Addr={base+{16{offset[15]},offset}}[1:0]   Path(S54,S62)
	S64= MemDataSelS.Out=a                                      MemDataSelS(S61,S63)
	S65= MemDataSelS.Out=>DR.In                                 Premise(F96)
	S66= DR.In=a                                                Path(S64,S65)
	S67= CtrlCP0=0                                              Premise(F98)
	S68= CP0[ASID]=pid                                          CP0-Hold(S34,S67)
	S69= CtrlPC=0                                               Premise(F102)
	S70= CtrlPCInc=0                                            Premise(F103)
	S71= PC[Out]=addr+4                                         PC-Hold(S37,S69,S70)
	S72= CtrlALUOut=1                                           Premise(F113)
	S73= [ALUOut]=base+{16{offset[15]},offset}                  ALUOut-Write(S56,S72)
	S74= CtrlDR=1                                               Premise(F114)
	S75= [DR]=a                                                 DR-Write(S66,S74)

MEM	S76= CP0.ASID=pid                                           CP0-Read-ASID(S68)
	S77= ALUOut.Out=base+{16{offset[15]},offset}                ALUOut-Out(S73)
	S78= CP0.ASID=>DMMU.PID                                     Premise(F120)
	S79= DMMU.PID=pid                                           Path(S76,S78)
	S80= ALUOut.Out=>DMMU.IEA                                   Premise(F121)
	S81= DMMU.IEA=base+{16{offset[15]},offset}                  Path(S77,S80)
	S82= DMMU.Addr={pid,base+{16{offset[15]},offset}}           DMMU-Search(S79,S81)
	S83= DMMU.Addr=>DAddrReg.In                                 Premise(F122)
	S84= DAddrReg.In={pid,base+{16{offset[15]},offset}}         Path(S82,S83)
	S85= CtrlPC=0                                               Premise(F132)
	S86= CtrlPCInc=0                                            Premise(F133)
	S87= PC[Out]=addr+4                                         PC-Hold(S71,S85,S86)
	S88= CtrlDR=0                                               Premise(F144)
	S89= [DR]=a                                                 DR-Hold(S75,S88)
	S90= CtrlDAddrReg=1                                         Premise(F146)
	S91= [DAddrReg]={pid,base+{16{offset[15]},offset}}          DAddrReg-Write(S84,S90)

MEM(DMMU1)	S92= CtrlPC=0                                               Premise(F155)
	S93= CtrlPCInc=0                                            Premise(F156)
	S94= PC[Out]=addr+4                                         PC-Hold(S87,S92,S93)
	S95= CtrlDR=0                                               Premise(F167)
	S96= [DR]=a                                                 DR-Hold(S89,S95)
	S97= CtrlDAddrReg=0                                         Premise(F169)
	S98= [DAddrReg]={pid,base+{16{offset[15]},offset}}          DAddrReg-Hold(S91,S97)

MEM(DMMU2)	S99= DR.Out=a                                               DR-Out(S96)
	S100= DAddrReg.Out={pid,base+{16{offset[15]},offset}}       DAddrReg-Out(S98)
	S101= DAddrReg.Out=>DMem.WAddr                              Premise(F175)
	S102= DMem.WAddr={pid,base+{16{offset[15]},offset}}         Path(S100,S101)
	S103= DR.Out=>DMem.WData                                    Premise(F176)
	S104= DMem.WData=a                                          Path(S99,S103)
	S105= CtrlPC=0                                              Premise(F184)
	S106= CtrlPCInc=0                                           Premise(F185)
	S107= PC[Out]=addr+4                                        PC-Hold(S94,S105,S106)
	S108= CtrlDMem=1                                            Premise(F200)
	S109= DMem[{pid,base+{16{offset[15]},offset}}]=a            DMem-Write(S102,S104,S108)

WB	S110= CtrlPC=0                                              Premise(F207)
	S111= CtrlPCInc=0                                           Premise(F208)
	S112= PC[Out]=addr+4                                        PC-Hold(S107,S110,S111)
	S113= CtrlDMem=0                                            Premise(F223)
	S114= DMem[{pid,base+{16{offset[15]},offset}}]=a            DMem-Hold(S109,S113)

POST	S112= PC[Out]=addr+4                                        PC-Hold(S107,S110,S111)
	S114= DMem[{pid,base+{16{offset[15]},offset}}]=a            DMem-Hold(S109,S113)

