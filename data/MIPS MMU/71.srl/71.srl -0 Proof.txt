
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,0,rT,rD,sa,3}                       Premise(F2)
	S3= GPR[rT]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F17)
	S14= CtrlPCInc=0                                            Premise(F18)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F19)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F23)
	S19= IMem[{pid,addr}]={0,0,rT,rD,sa,3}                      IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F25)
	S21= GPR[rT]=a                                              GPR-Hold(S3,S20)

IF(IMMU)	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= IAddrReg.Out=>IMem.RAddr                               Premise(F30)
	S25= IMem.RAddr={pid,addr}                                  Path(S23,S24)
	S26= IMem.Out={0,0,rT,rD,sa,3}                              IMem-Read(S25,S19)
	S27= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S25,S19)
	S28= IMem.Out=>IRMux.MemData                                Premise(F31)
	S29= IRMux.MemData={0,0,rT,rD,sa,3}                         Path(S26,S28)
	S30= IRMux.Out={0,0,rT,rD,sa,3}                             IRMux-Select2(S29)
	S31= IRMux.Out=>IR.In                                       Premise(F35)
	S32= IR.In={0,0,rT,rD,sa,3}                                 Path(S30,S31)
	S33= IMem.MEM8WordOut=>ICache.WData                         Premise(F36)
	S34= ICache.WData=IMemGet8Word({pid,addr})                  Path(S27,S33)
	S35= PC.Out=>ICache.IEA                                     Premise(F37)
	S36= ICache.IEA=addr                                        Path(S22,S35)
	S37= CtrlPC=0                                               Premise(F43)
	S38= CtrlPCInc=1                                            Premise(F44)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F46)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S36,S34,S40)
	S42= CtrlIR=1                                               Premise(F47)
	S43= [IR]={0,0,rT,rD,sa,3}                                  IR-Write(S32,S42)
	S44= CtrlGPR=0                                              Premise(F51)
	S45= GPR[rT]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out20_16=rT                                         IR-Out(S43)
	S47= IR.Out20_16=>GPR.RReg2                                 Premise(F55)
	S48= GPR.RReg2=rT                                           Path(S46,S47)
	S49= GPR.Rdata2=a                                           GPR-Read(S48,S45)
	S50= GPR.Rdata2=>B.In                                       Premise(F57)
	S51= B.In=a                                                 Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F63)
	S53= CtrlPCInc=0                                            Premise(F64)
	S54= PC[Out]=addr+4                                         PC-Hold(S39,S52,S53)
	S55= CtrlICache=0                                           Premise(F66)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S55)
	S57= CtrlIR=0                                               Premise(F67)
	S58= [IR]={0,0,rT,rD,sa,3}                                  IR-Hold(S43,S57)
	S59= CtrlB=1                                                Premise(F72)
	S60= [B]=a                                                  B-Write(S51,S59)

EX	S61= IR.Out10_6=sa                                          IR-Out(S58)
	S62= B.Out=a                                                B-Out(S60)
	S63= IR.Out10_6=>SU.Shamt                                   Premise(F74)
	S64= SU.Shamt=sa                                            Path(S61,S63)
	S65= B.Out=>SU.Data                                         Premise(F75)
	S66= SU.Data=a                                              Path(S62,S65)
	S67= SU.Out=a>>>sa                                          SU(S66,S64)
	S68= SU.Out=>ALUOut.In                                      Premise(F77)
	S69= ALUOut.In=a>>>sa                                       Path(S67,S68)
	S70= CtrlPC=0                                               Premise(F83)
	S71= CtrlPCInc=0                                            Premise(F84)
	S72= PC[Out]=addr+4                                         PC-Hold(S54,S70,S71)
	S73= CtrlICache=0                                           Premise(F86)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S73)
	S75= CtrlIR=0                                               Premise(F87)
	S76= [IR]={0,0,rT,rD,sa,3}                                  IR-Hold(S58,S75)
	S77= CtrlALUOut=1                                           Premise(F93)
	S78= [ALUOut]=a>>>sa                                        ALUOut-Write(S69,S77)

MEM	S79= CtrlPC=0                                               Premise(F99)
	S80= CtrlPCInc=0                                            Premise(F100)
	S81= PC[Out]=addr+4                                         PC-Hold(S72,S79,S80)
	S82= CtrlICache=0                                           Premise(F102)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S82)
	S84= CtrlIR=0                                               Premise(F103)
	S85= [IR]={0,0,rT,rD,sa,3}                                  IR-Hold(S76,S84)
	S86= CtrlALUOut=0                                           Premise(F109)
	S87= [ALUOut]=a>>>sa                                        ALUOut-Hold(S78,S86)

MEM(DMMU1)	S88= CtrlPC=0                                               Premise(F115)
	S89= CtrlPCInc=0                                            Premise(F116)
	S90= PC[Out]=addr+4                                         PC-Hold(S81,S88,S89)
	S91= CtrlICache=0                                           Premise(F118)
	S92= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S83,S91)
	S93= CtrlIR=0                                               Premise(F119)
	S94= [IR]={0,0,rT,rD,sa,3}                                  IR-Hold(S85,S93)
	S95= CtrlALUOut=0                                           Premise(F125)
	S96= [ALUOut]=a>>>sa                                        ALUOut-Hold(S87,S95)

MEM(DMMU2)	S97= CtrlPC=0                                               Premise(F131)
	S98= CtrlPCInc=0                                            Premise(F132)
	S99= PC[Out]=addr+4                                         PC-Hold(S90,S97,S98)
	S100= CtrlICache=0                                          Premise(F134)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S92,S100)
	S102= CtrlIR=0                                              Premise(F135)
	S103= [IR]={0,0,rT,rD,sa,3}                                 IR-Hold(S94,S102)
	S104= CtrlALUOut=0                                          Premise(F141)
	S105= [ALUOut]=a>>>sa                                       ALUOut-Hold(S96,S104)

WB	S106= IR.Out15_11=rD                                        IR-Out(S103)
	S107= ALUOut.Out=a>>>sa                                     ALUOut-Out(S105)
	S108= IR.Out15_11=>GPR.WReg                                 Premise(F142)
	S109= GPR.WReg=rD                                           Path(S106,S108)
	S110= ALUOut.Out=>GPR.WData                                 Premise(F143)
	S111= GPR.WData=a>>>sa                                      Path(S107,S110)
	S112= CtrlPC=0                                              Premise(F149)
	S113= CtrlPCInc=0                                           Premise(F150)
	S114= PC[Out]=addr+4                                        PC-Hold(S99,S112,S113)
	S115= CtrlICache=0                                          Premise(F152)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S115)
	S117= CtrlGPR=1                                             Premise(F157)
	S118= GPR[rD]=a>>>sa                                        GPR-Write(S109,S111,S117)

POST	S114= PC[Out]=addr+4                                        PC-Hold(S99,S112,S113)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S115)
	S118= GPR[rD]=a>>>sa                                        GPR-Write(S109,S111,S117)

