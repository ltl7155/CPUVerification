
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={43,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= GPR[rT]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F18)
	S15= CtrlPCInc=0                                            Premise(F19)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F20)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F24)
	S20= IMem[{pid,addr}]={43,rS,rT,offset}                     IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F26)
	S22= GPR[rS]=base                                           GPR-Hold(S3,S21)
	S23= GPR[rT]=a                                              GPR-Hold(S4,S21)

IF(IMMU)	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F38)
	S27= IMem.RAddr={pid,addr}                                  Path(S25,S26)
	S28= IMem.Out={43,rS,rT,offset}                             IMem-Read(S27,S20)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S20)
	S30= IMem.Out=>IRMux.MemData                                Premise(F39)
	S31= IRMux.MemData={43,rS,rT,offset}                        Path(S28,S30)
	S32= IRMux.Out={43,rS,rT,offset}                            IRMux-Select2(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F43)
	S34= IR.In={43,rS,rT,offset}                                Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F44)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= PC.Out=>ICache.IEA                                     Premise(F45)
	S38= ICache.IEA=addr                                        Path(S24,S37)
	S39= CtrlPC=0                                               Premise(F51)
	S40= CtrlPCInc=1                                            Premise(F52)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F54)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S38,S36,S42)
	S44= CtrlIR=1                                               Premise(F55)
	S45= [IR]={43,rS,rT,offset}                                 IR-Write(S34,S44)
	S46= CtrlGPR=0                                              Premise(F59)
	S47= GPR[rS]=base                                           GPR-Hold(S22,S46)
	S48= GPR[rT]=a                                              GPR-Hold(S23,S46)

ID	S49= IR.Out25_21=rS                                         IR-Out(S45)
	S50= IR.Out15_0=offset                                      IR-Out(S45)
	S51= IR.Out25_21=>GPR.RReg1                                 Premise(F70)
	S52= GPR.RReg1=rS                                           Path(S49,S51)
	S53= GPR.Rdata1=base                                        GPR-Read(S52,S47)
	S54= IR.Out15_0=>IMMEXT.In                                  Premise(F71)
	S55= IMMEXT.In=offset                                       Path(S50,S54)
	S56= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S55)
	S57= GPR.Rdata1=>A.In                                       Premise(F72)
	S58= A.In=base                                              Path(S53,S57)
	S59= IMMEXT.Out=>B.In                                       Premise(F73)
	S60= B.In={16{offset[15]},offset}                           Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F79)
	S62= CtrlPCInc=0                                            Premise(F80)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F82)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlIR=0                                               Premise(F83)
	S67= [IR]={43,rS,rT,offset}                                 IR-Hold(S45,S66)
	S68= CtrlGPR=0                                              Premise(F87)
	S69= GPR[rT]=a                                              GPR-Hold(S48,S68)
	S70= CtrlA=1                                                Premise(F88)
	S71= [A]=base                                               A-Write(S58,S70)
	S72= CtrlB=1                                                Premise(F89)
	S73= [B]={16{offset[15]},offset}                            B-Write(S60,S72)

EX	S74= IR.Out20_16=rT                                         IR-Out(S67)
	S75= A.Out=base                                             A-Out(S71)
	S76= B.Out={16{offset[15]},offset}                          B-Out(S73)
	S77= A.Out=>ALU.A                                           Premise(F97)
	S78= ALU.A=base                                             Path(S75,S77)
	S79= B.Out=>ALU.B                                           Premise(F98)
	S80= ALU.B={16{offset[15]},offset}                          Path(S76,S79)
	S81= ALU.Out=base+{16{offset[15]},offset}                   ALU(S78,S80)
	S82= ALU.Out1_0={base+{16{offset[15]},offset}}[1:0]         ALU(S78,S80)
	S83= ALU.Out=>ALUOut.In                                     Premise(F100)
	S84= ALUOut.In=base+{16{offset[15]},offset}                 Path(S81,S83)
	S85= IR.Out20_16=>GPR.RReg2                                 Premise(F101)
	S86= GPR.RReg2=rT                                           Path(S74,S85)
	S87= GPR.Rdata2=a                                           GPR-Read(S86,S69)
	S88= GPR.Rdata2=>MemDataSelS.In                             Premise(F102)
	S89= MemDataSelS.In=a                                       Path(S87,S88)
	S90= ALU.Out1_0=>MemDataSelS.Addr                           Premise(F103)
	S91= MemDataSelS.Addr={base+{16{offset[15]},offset}}[1:0]   Path(S82,S90)
	S92= MemDataSelS.Out=a                                      MemDataSelS(S89,S91)
	S93= MemDataSelS.Out=>DR.In                                 Premise(F105)
	S94= DR.In=a                                                Path(S92,S93)
	S95= CtrlPC=0                                               Premise(F111)
	S96= CtrlPCInc=0                                            Premise(F112)
	S97= PC[Out]=addr+4                                         PC-Hold(S63,S95,S96)
	S98= CtrlICache=0                                           Premise(F114)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S98)
	S100= CtrlALUOut=1                                          Premise(F122)
	S101= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Write(S84,S100)
	S102= CtrlDR=1                                              Premise(F123)
	S103= [DR]=a                                                DR-Write(S94,S102)

MEM	S104= ALUOut.Out=base+{16{offset[15]},offset}               ALUOut-Out(S101)
	S105= DR.Out=a                                              DR-Out(S103)
	S106= ALUOut.Out=>DCache.IEA                                Premise(F133)
	S107= DCache.IEA=base+{16{offset[15]},offset}               Path(S104,S106)
	S108= DR.Out=>DCache.In                                     Premise(F135)
	S109= DCache.In=a                                           Path(S105,S108)
	S110= CtrlPC=0                                              Premise(F141)
	S111= CtrlPCInc=0                                           Premise(F142)
	S112= PC[Out]=addr+4                                        PC-Hold(S97,S110,S111)
	S113= CtrlICache=0                                          Premise(F144)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S113)
	S115= CtrlDCache=1                                          Premise(F156)
	S116= DCache[base+{16{offset[15]},offset}]=a                DCache-Write(S107,S109,S115)

WB	S117= CtrlPC=0                                              Premise(F216)
	S118= CtrlPCInc=0                                           Premise(F217)
	S119= PC[Out]=addr+4                                        PC-Hold(S112,S117,S118)
	S120= CtrlICache=0                                          Premise(F219)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S120)
	S122= CtrlDCache=0                                          Premise(F231)
	S123= DCache[base+{16{offset[15]},offset}]=a                DCache-Hold(S116,S122)

POST	S119= PC[Out]=addr+4                                        PC-Hold(S112,S117,S118)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S120)
	S123= DCache[base+{16{offset[15]},offset}]=a                DCache-Hold(S116,S122)

