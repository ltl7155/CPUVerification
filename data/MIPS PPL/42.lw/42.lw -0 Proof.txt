
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={35,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a          Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PC.Out=>IMem.RAddr                                      Premise(F5)
	S8= IMem.RAddr=addr                                         Path(S6,S7)
	S9= CP0.ASID=>IMem.ASID                                     Premise(F6)
	S10= IMem.ASID=pid                                          Path(S5,S9)
	S11= IMem.Out={35,rS,rT,offset}                             IMem-Read(S10,S8,S2)
	S12= IMem.Out=>IR_ID.In                                     Premise(F8)
	S13= IR_ID.In={35,rS,rT,offset}                             Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F44)
	S15= CtrlPCInc=1                                            Premise(F45)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlCP0=0                                              Premise(F48)
	S18= CP0[ASID]=pid                                          CP0-Hold(S0,S17)
	S19= CtrlIR_ID=1                                            Premise(F51)
	S20= [IR_ID]={35,rS,rT,offset}                              IR_ID-Write(S13,S19)
	S21= CtrlGPR=0                                              Premise(F52)
	S22= GPR[rS]=base                                           GPR-Hold(S3,S21)
	S23= CtrlDMem=0                                             Premise(F57)
	S24= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a         DMem-Hold(S4,S23)

ID	S25= IR_ID.Out={35,rS,rT,offset}                            IR-Out(S20)
	S26= IR_ID.Out25_21=rS                                      IR-Out(S20)
	S27= IR_ID.Out25_21=>GPR.RReg1                              Premise(F70)
	S28= GPR.RReg1=rS                                           Path(S26,S27)
	S29= GPR.Rdata1=base                                        GPR-Read(S28,S22)
	S30= GPR.Rdata1=>FU.InID1                                   Premise(F71)
	S31= FU.InID1=base                                          Path(S29,S30)
	S32= FU.OutID1=FU(base)                                     FU-Forward(S31)
	S33= FU.OutID1=>A_EX.In                                     Premise(F73)
	S34= A_EX.In=FU(base)                                       Path(S32,S33)
	S35= IR_ID.Out=>IR_EX.In                                    Premise(F74)
	S36= IR_EX.In={35,rS,rT,offset}                             Path(S25,S35)
	S37= CtrlPC=0                                               Premise(F102)
	S38= CtrlPCInc=0                                            Premise(F103)
	S39= PC[Out]=addr+4                                         PC-Hold(S16,S37,S38)
	S40= CtrlCP0=0                                              Premise(F106)
	S41= CP0[ASID]=pid                                          CP0-Hold(S18,S40)
	S42= CtrlA_EX=1                                             Premise(F111)
	S43= [A_EX]=FU(base)                                        A_EX-Write(S34,S42)
	S44= CtrlIR_EX=1                                            Premise(F112)
	S45= [IR_EX]={35,rS,rT,offset}                              IR_EX-Write(S36,S44)
	S46= CtrlDMem=0                                             Premise(F115)
	S47= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a         DMem-Hold(S24,S46)

EX	S48= A_EX.Out=FU(base)                                      A_EX-Out(S43)
	S49= IR_EX.Out={35,rS,rT,offset}                            IR_EX-Out(S45)
	S50= IR_EX.Out15_0=offset                                   IR_EX-Out(S45)
	S51= A_EX.Out=>ALU.A                                        Premise(F137)
	S52= ALU.A=FU(base)                                         Path(S48,S51)
	S53= IR_EX.Out15_0=>IMMEXT.In                               Premise(F138)
	S54= IMMEXT.In=offset                                       Path(S50,S53)
	S55= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S54)
	S56= IMMEXT.Out=>ALU.B                                      Premise(F139)
	S57= ALU.B={16{offset[15]},offset}                          Path(S55,S56)
	S58= ALU.Out=FU(base)+{16{offset[15]},offset}               ALU(S52,S57)
	S59= ALU.Out=>ALUOut_MEM.In                                 Premise(F141)
	S60= ALUOut_MEM.In=FU(base)+{16{offset[15]},offset}         Path(S58,S59)
	S61= IR_EX.Out=>IR_MEM.In                                   Premise(F142)
	S62= IR_MEM.In={35,rS,rT,offset}                            Path(S49,S61)
	S63= CtrlPC=0                                               Premise(F160)
	S64= CtrlPCInc=0                                            Premise(F161)
	S65= PC[Out]=addr+4                                         PC-Hold(S39,S63,S64)
	S66= CtrlCP0=0                                              Premise(F164)
	S67= CP0[ASID]=pid                                          CP0-Hold(S41,S66)
	S68= CtrlALUOut_MEM=1                                       Premise(F171)
	S69= [ALUOut_MEM]=FU(base)+{16{offset[15]},offset}          ALUOut_MEM-Write(S60,S68)
	S70= CtrlIR_MEM=1                                           Premise(F172)
	S71= [IR_MEM]={35,rS,rT,offset}                             IR_MEM-Write(S62,S70)
	S72= CtrlDMem=0                                             Premise(F173)
	S73= DMem[{pid,FU(base)+{16{offset[15]},offset}}]=a         DMem-Hold(S47,S72)

MEM	S74= CP0.ASID=pid                                           CP0-Read-ASID(S67)
	S75= ALUOut_MEM.Out=FU(base)+{16{offset[15]},offset}        ALUOut_MEM-Out(S69)
	S76= IR_MEM.Out={35,rS,rT,offset}                           IR_MEM-Out(S71)
	S77= ALUOut_MEM.Out=>DMem.RAddr                             Premise(F203)
	S78= DMem.RAddr=FU(base)+{16{offset[15]},offset}            Path(S75,S77)
	S79= CP0.ASID=>DMem.ASID                                    Premise(F204)
	S80= DMem.ASID=pid                                          Path(S74,S79)
	S81= DMem.Out=>DR_WB.In                                     Premise(F205)
	S82= IR_MEM.Out=>IR_WB.In                                   Premise(F206)
	S83= IR_WB.In={35,rS,rT,offset}                             Path(S76,S82)
	S84= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F207)
	S85= ALUOut_WB.In=FU(base)+{16{offset[15]},offset}          Path(S75,S84)
	S86= CtrlPC=0                                               Premise(F217)
	S87= CtrlPCInc=0                                            Premise(F218)
	S88= PC[Out]=addr+4                                         PC-Hold(S65,S86,S87)
	S89= CtrlDMem=0                                             Premise(F230)
	S90= DMem.Out=a                                             DMem-Read(S80,S78,S73,S89)
	S91= DR_WB.In=a                                             Path(S90,S81)
	S92= CtrlDR_WB=1                                            Premise(F232)
	S93= [DR_WB]=a                                              DR_WB-Write(S91,S92)
	S94= CtrlIR_WB=1                                            Premise(F233)
	S95= [IR_WB]={35,rS,rT,offset}                              IR_WB-Write(S83,S94)
	S96= CtrlALUOut_WB=1                                        Premise(F234)
	S97= [ALUOut_WB]=FU(base)+{16{offset[15]},offset}           ALUOut_WB-Write(S85,S96)

WB	S98= DR_WB.Out=a                                            DR_WB-Out(S93)
	S99= IR_WB.Out20_16=rT                                      IR-Out(S95)
	S100= ALUOut_WB.Out1_0={FU(base)+{16{offset[15]},offset}}[1:0]ALUOut_WB-Out(S97)
	S101= IR_WB.Out20_16=>GPR.WReg                              Premise(F268)
	S102= GPR.WReg=rT                                           Path(S99,S101)
	S103= DR_WB.Out=>MemDataSelL.In                             Premise(F269)
	S104= MemDataSelL.In=a                                      Path(S98,S103)
	S105= ALUOut_WB.Out1_0=>MemDataSelL.Addr                    Premise(F270)
	S106= MemDataSelL.Addr={FU(base)+{16{offset[15]},offset}}[1:0]Path(S100,S105)
	S107= MemDataSelL.Out=a                                     MemDataSelL(S104,S106)
	S108= MemDataSelL.Out=>GPR.WData                            Premise(F272)
	S109= GPR.WData=a                                           Path(S107,S108)
	S110= CtrlPC=0                                              Premise(F275)
	S111= CtrlPCInc=0                                           Premise(F276)
	S112= PC[Out]=addr+4                                        PC-Hold(S88,S110,S111)
	S113= CtrlGPR=1                                             Premise(F283)
	S114= GPR[rT]=a                                             GPR-Write(S102,S109,S113)

POST	S112= PC[Out]=addr+4                                        PC-Hold(S88,S110,S111)
	S114= GPR[rT]=a                                             GPR-Write(S102,S109,S113)

