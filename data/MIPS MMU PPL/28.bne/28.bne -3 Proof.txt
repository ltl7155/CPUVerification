
------------------------------------- Proof -------------------------------------

PRE	S0= PC[Out]=addr                                            Premise(F1)
	S1= ICache[addr]={5,rS,rT,offset}                           Premise(F3)

IF	S2= PC.Out=addr                                             PC-Out(S0)
	S3= PC.Out=>ICache.IEA                                      Premise(F8)
	S4= ICache.IEA=addr                                         Path(S2,S3)
	S5= ICache.Out={5,rS,rT,offset}                             ICache-Search(S4,S1)
	S6= ICache.Out=>IR_ID.In                                    Premise(F12)
	S7= IR_ID.In={5,rS,rT,offset}                               Path(S5,S6)
	S8= CtrlPC=0                                                Premise(F25)
	S9= CtrlPCInc=1                                             Premise(F26)
	S10= PC[CIA]=addr                                           PC-Inc(S0,S8,S9)
	S11= CtrlIR_ID=1                                            Premise(F31)
	S12= [IR_ID]={5,rS,rT,offset}                               IR_ID-Write(S7,S11)
	S13= GPR[rS]=a                                              Premise(F52)
	S14= GPR[rT]=b                                              Premise(F53)

ID	S15= IR_ID.Out={5,rS,rT,offset}                             IR-Out(S12)
	S16= IR_ID.Out25_21=rS                                      IR-Out(S12)
	S17= IR_ID.Out20_16=rT                                      IR-Out(S12)
	S18= IR_ID.Out25_21=>GPR.RReg1                              Premise(F90)
	S19= GPR.RReg1=rS                                           Path(S16,S18)
	S20= GPR.Rdata1=a                                           GPR-Read(S19,S13)
	S21= IR_ID.Out20_16=>GPR.RReg2                              Premise(F91)
	S22= GPR.RReg2=rT                                           Path(S17,S21)
	S23= GPR.Rdata2=b                                           GPR-Read(S22,S14)
	S24= GPR.Rdata1=>FU.InID1                                   Premise(F92)
	S25= FU.InID1=a                                             Path(S20,S24)
	S26= FU.OutID1=FU(a)                                        FU-Forward(S25)
	S27= FU.OutID1=>A_EX.In                                     Premise(F94)
	S28= A_EX.In=FU(a)                                          Path(S26,S27)
	S29= GPR.Rdata2=>FU.InID2                                   Premise(F95)
	S30= FU.InID2=b                                             Path(S23,S29)
	S31= FU.OutID2=FU(b)                                        FU-Forward(S30)
	S32= FU.OutID2=>B_EX.In                                     Premise(F97)
	S33= B_EX.In=FU(b)                                          Path(S31,S32)
	S34= IR_ID.Out=>IR_EX.In                                    Premise(F98)
	S35= IR_EX.In={5,rS,rT,offset}                              Path(S15,S34)
	S36= CtrlPCInc=0                                            Premise(F107)
	S37= PC[CIA]=addr                                           PC-Hold(S10,S36)
	S38= CtrlA_EX=1                                             Premise(F116)
	S39= [A_EX]=FU(a)                                           A_EX-Write(S28,S38)
	S40= CtrlB_EX=1                                             Premise(F117)
	S41= [B_EX]=FU(b)                                           B_EX-Write(S33,S40)
	S42= CtrlIR_EX=1                                            Premise(F118)
	S43= [IR_EX]={5,rS,rT,offset}                               IR_EX-Write(S35,S42)

EX	S44= PC.CIA=addr                                            PC-Out(S37)
	S45= A_EX.Out=FU(a)                                         A_EX-Out(S39)
	S46= B_EX.Out=FU(b)                                         B_EX-Out(S41)
	S47= IR_EX.Out15_0=offset                                   IR_EX-Out(S43)
	S48= IR_EX.Out15_0=>SEXT.In                                 Premise(F137)
	S49= SEXT.In=offset                                         Path(S47,S48)
	S50= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S49)
	S51= PC.CIA=>ALU.A                                          Premise(F138)
	S52= ALU.A=addr                                             Path(S44,S51)
	S53= SEXT.Out=>ALU.B                                        Premise(F139)
	S54= ALU.B={14{offset[15]},offset,2{0}}                     Path(S50,S53)
	S55= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S52,S54)
	S56= ALU.Out=>ALUOut_MEM.In                                 Premise(F141)
	S57= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S55,S56)
	S58= A_EX.Out=>CMPU.A                                       Premise(F142)
	S59= CMPU.A=FU(a)                                           Path(S45,S58)
	S60= B_EX.Out=>CMPU.B                                       Premise(F143)
	S61= CMPU.B=FU(b)                                           Path(S46,S60)
	S62= CMPU.zero=CompareS(FU(a),FU(b))                        CMPU-CMPS(S59,S61)
	S63= CMPU.zero=>ConditionReg_MEM.In                         Premise(F145)
	S64= ConditionReg_MEM.In=CompareS(FU(a),FU(b))              Path(S62,S63)
	S65= CtrlALUOut_MEM=1                                       Premise(F166)
	S66= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S57,S65)
	S67= CtrlConditionReg_MEM=1                                 Premise(F167)
	S68= [ConditionReg_MEM]=CompareS(FU(a),FU(b))               ConditionReg_MEM-Write(S64,S67)

MEM	S69= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S66)
	S70= ConditionReg_MEM.Out=CompareS(FU(a),FU(b))             ConditionReg_MEM-Out(S68)
	S71= ALUOut_MEM.Out=>PC.In                                  Premise(F186)
	S72= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S69,S71)
	S73= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F194)
	S74= ConditionReg_WB.In=CompareS(FU(a),FU(b))               Path(S70,S73)
	S75= CtrlPC=1                                               Premise(F203)
	S76= CtrlPCInc=0                                            Premise(F204)
	S77= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S72,S75,S76)
	S78= CtrlConditionReg_WB=1                                  Premise(F227)
	S79= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Write(S74,S78)

WB	S80= CtrlPC=0                                               Premise(F319)
	S81= CtrlPCInc=0                                            Premise(F320)
	S82= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S77,S80,S81)
	S83= CtrlConditionReg_WB=0                                  Premise(F343)
	S84= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Hold(S79,S83)

POST	S82= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S77,S80,S81)
	S84= [ConditionReg_WB]=CompareS(FU(a),FU(b))                ConditionReg_WB-Hold(S79,S83)

