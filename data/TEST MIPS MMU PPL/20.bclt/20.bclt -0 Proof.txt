
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F24)
	S13= CtrlPCInc=0                                            Premise(F25)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F26)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F31)
	S18= IMem[{pid,addr}]={17,8,cc,0,1,offset}                  IMem-Hold(S2,S17)

IF(IMMU)	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= IAddrReg.Out=>IMem.RAddr                               Premise(F53)
	S22= IMem.RAddr={pid,addr}                                  Path(S20,S21)
	S23= IMem.Out={17,8,cc,0,1,offset}                          IMem-Read(S22,S18)
	S24= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S22,S18)
	S25= IMem.Out=>IRMux.MemData                                Premise(F54)
	S26= IRMux.MemData={17,8,cc,0,1,offset}                     Path(S23,S25)
	S27= IRMux.Out={17,8,cc,0,1,offset}                         IRMux-Select2(S26)
	S28= IRMux.Out=>IR_ID.In                                    Premise(F58)
	S29= IR_ID.In={17,8,cc,0,1,offset}                          Path(S27,S28)
	S30= IMem.MEM8WordOut=>ICache.WData                         Premise(F59)
	S31= ICache.WData=IMemGet8Word({pid,addr})                  Path(S24,S30)
	S32= PC.Out=>ICache.IEA                                     Premise(F60)
	S33= ICache.IEA=addr                                        Path(S19,S32)
	S34= CtrlPC=0                                               Premise(F68)
	S35= CtrlPCInc=1                                            Premise(F69)
	S36= PC[CIA]=addr                                           PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F71)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S31,S37)
	S39= CtrlIR_ID=1                                            Premise(F74)
	S40= [IR_ID]={17,8,cc,0,1,offset}                           IR_ID-Write(S29,S39)

ID	S41= IR_ID.Out15_0=offset                                   IR-Out(S40)
	S42= IR_ID.Out15_0=>SEXT.In                                 Premise(F99)
	S43= SEXT.In=offset                                         Path(S41,S42)
	S44= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S43)
	S45= SEXT.Out=>A_EX.In                                      Premise(F100)
	S46= A_EX.In={14{offset[15]},offset,2{0}}                   Path(S44,S45)
	S47= CtrlPCInc=0                                            Premise(F112)
	S48= PC[CIA]=addr                                           PC-Hold(S36,S47)
	S49= CtrlICache=0                                           Premise(F114)
	S50= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S49)
	S51= CtrlA_EX=1                                             Premise(F120)
	S52= [A_EX]={14{offset[15]},offset,2{0}}                    A_EX-Write(S46,S51)

EX	S53= PC.CIA=addr                                            PC-Out(S48)
	S54= A_EX.Out={14{offset[15]},offset,2{0}}                  A_EX-Out(S52)
	S55= PC.CIA=>ALU.A                                          Premise(F142)
	S56= ALU.A=addr                                             Path(S53,S55)
	S57= A_EX.Out=>ALU.B                                        Premise(F143)
	S58= ALU.B={14{offset[15]},offset,2{0}}                     Path(S54,S57)
	S59= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S56,S58)
	S60= ALU.Out=>ALUOut_MEM.In                                 Premise(F145)
	S61= ALUOut_MEM.In=addr+{14{offset[15]},offset,2{0}}        Path(S59,S60)
	S62= CtrlICache=0                                           Premise(F156)
	S63= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S50,S62)
	S64= CtrlALUOut_MEM=1                                       Premise(F164)
	S65= [ALUOut_MEM]=addr+{14{offset[15]},offset,2{0}}         ALUOut_MEM-Write(S61,S64)

MEM	S66= ALUOut_MEM.Out=addr+{14{offset[15]},offset,2{0}}       ALUOut_MEM-Out(S65)
	S67= ALUOut_MEM.Out=>ALUOut_WB.In                           Premise(F193)
	S68= ALUOut_WB.In=addr+{14{offset[15]},offset,2{0}}         Path(S66,S67)
	S69= CtrlICache=0                                           Premise(F206)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S63,S69)
	S71= CtrlALUOut_WB=1                                        Premise(F223)
	S72= [ALUOut_WB]=addr+{14{offset[15]},offset,2{0}}          ALUOut_WB-Write(S68,S71)

WB	S73= ALUOut_WB.Out=addr+{14{offset[15]},offset,2{0}}        ALUOut_WB-Out(S72)
	S74= ALUOut_WB.Out=>PC.In                                   Premise(F315)
	S75= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S73,S74)
	S76= CtrlPC=1                                               Premise(F323)
	S77= CtrlPCInc=0                                            Premise(F324)
	S78= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S75,S76,S77)
	S79= CtrlICache=0                                           Premise(F326)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S79)

POST	S78= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S75,S76,S77)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S79)

