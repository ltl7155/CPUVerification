
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={7,rS,0,offset}                        Premise(F2)

IF	S3= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= IMMU.Addr=>IAddrReg.In                                  Premise(F64)
	S6= PC.Out=>IMMU.IEA                                        Premise(F69)
	S7= IMMU.IEA=addr                                           Path(S4,S6)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F70)
	S9= IMMU.PID=pid                                            Path(S3,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S7)
	S11= IAddrReg.In={pid,addr}                                 Path(S10,S5)
	S12= CtrlPC=0                                               Premise(F111)
	S13= CtrlPCInc=0                                            Premise(F112)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F135)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F136)
	S18= IMem[{pid,addr}]={7,rS,0,offset}                       IMem-Hold(S2,S17)
	S19= GPR[rS]=a                                              Premise(F143)

IMMU	S20= PC.Out=addr                                            PC-Out(S14)
	S21= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S22= PC.Out=>ICache.IEA                                     Premise(F206)
	S23= ICache.IEA=addr                                        Path(S20,S22)
	S24= IMem.MEM8WordOut=>ICache.WData                         Premise(F208)
	S25= IAddrReg.Out=>IMem.RAddr                               Premise(F212)
	S26= IMem.RAddr={pid,addr}                                  Path(S21,S25)
	S27= IMem.Out={7,rS,0,offset}                               IMem-Read(S26,S18)
	S28= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S26,S18)
	S29= ICache.WData=IMemGet8Word({pid,addr})                  Path(S28,S24)
	S30= IMem.Out=>IRMux.MemData                                Premise(F215)
	S31= IRMux.MemData={7,rS,0,offset}                          Path(S27,S30)
	S32= IRMux.Out={7,rS,0,offset}                              IRMux-Select2(S31)
	S33= IRMux.Out=>IR_ID.In                                    Premise(F221)
	S34= IR_ID.In={7,rS,0,offset}                               Path(S32,S33)
	S35= CtrlICache=1                                           Premise(F262)
	S36= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S23,S29,S35)
	S37= CtrlIR_ID=1                                            Premise(F271)
	S38= [IR_ID]={7,rS,0,offset}                                IR_ID-Write(S34,S37)
	S39= CtrlGPR=0                                              Premise(F275)
	S40= GPR[rS]=a                                              GPR-Hold(S19,S39)

ID	S41= IR_ID.Out25_21=rS                                      IR-Out(S38)
	S42= FU.OutID1=>A_EX.In                                     Premise(F288)
	S43= FU.OutID2=>B_EX.In                                     Premise(F290)
	S44= GPR.Rdata1=>FU.InID1                                   Premise(F339)
	S45= GPR.Rdata2=>FU.InID2                                   Premise(F341)
	S46= IR_ID.Out25_21=>GPR.RReg1                              Premise(F343)
	S47= GPR.RReg1=rS                                           Path(S41,S46)
	S48= GPR.Rdata1=a                                           GPR-Read(S47,S40)
	S49= FU.InID1=a                                             Path(S48,S44)
	S50= FU.OutID1=FU(a)                                        FU-Forward(S49)
	S51= A_EX.In=FU(a)                                          Path(S50,S42)
	S52= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S53= FU.InID2=32'b0                                         Path(S52,S45)
	S54= FU.OutID2=FU(32'b0)                                    FU-Forward(S53)
	S55= B_EX.In=FU(32'b0)                                      Path(S54,S43)
	S56= CtrlA_EX=1                                             Premise(F396)
	S57= [A_EX]=FU(a)                                           A_EX-Write(S51,S56)
	S58= CtrlB_EX=1                                             Premise(F399)
	S59= [B_EX]=FU(32'b0)                                       B_EX-Write(S55,S58)
	S60= CtrlICache=0                                           Premise(F402)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S36,S60)

EX	S62= A_EX.Out=FU(a)                                         A_EX-Out(S57)
	S63= B_EX.Out=FU(32'b0)                                     B_EX-Out(S59)
	S64= A_EX.Out=>CMPU.A                                       Premise(F433)
	S65= CMPU.A=FU(a)                                           Path(S62,S64)
	S66= B_EX.Out=>CMPU.B                                       Premise(F434)
	S67= CMPU.B=FU(32'b0)                                       Path(S63,S66)
	S68= CMPU.gt=CompareS(FU(a),FU(32'b0))                      CMPU-CMPS(S65,S67)
	S69= CMPU.gt=>ConditionReg_MEM.In                           Premise(F469)
	S70= ConditionReg_MEM.In=CompareS(FU(a),FU(32'b0))          Path(S68,S69)
	S71= CtrlICache=0                                           Premise(F545)
	S72= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S71)
	S73= CtrlConditionReg_MEM=1                                 Premise(F547)
	S74= [ConditionReg_MEM]=CompareS(FU(a),FU(32'b0))           ConditionReg_MEM-Write(S70,S73)

MEM	S75= ConditionReg_MEM.Out=CompareS(FU(a),FU(32'b0))         ConditionReg_MEM-Out(S74)
	S76= ConditionReg_MEM.Out=>ConditionReg_WB.In               Premise(F612)
	S77= ConditionReg_WB.In=CompareS(FU(a),FU(32'b0))           Path(S75,S76)
	S78= CtrlICache=0                                           Premise(F686)
	S79= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S72,S78)
	S80= CtrlConditionReg_WB=1                                  Premise(F691)
	S81= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Write(S77,S80)

WB	S82= CtrlICache=0                                           Premise(F1109)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S79,S82)
	S84= CtrlConditionReg_WB=0                                  Premise(F1114)
	S85= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Hold(S81,S84)

POST	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S79,S82)
	S85= [ConditionReg_WB]=CompareS(FU(a),FU(32'b0))            ConditionReg_WB-Hold(S81,S84)

