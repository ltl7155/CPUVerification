
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            CP0-Read-ASID(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PC.Out=>IMem.RAddr                                      Premise(F5)
	S8= IMem.RAddr=addr                                         Path(S6,S7)
	S9= CP0.ASID=>IMem.ASID                                     Premise(F6)
	S10= IMem.ASID=pid                                          Path(S5,S9)
	S11= IMem.Out={5,rS,rT,offset}                              IMem-Read(S10,S8,S2)
	S12= IMem.Out=>IR.In                                        Premise(F7)
	S13= IR.In={5,rS,rT,offset}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F8)
	S15= CtrlPCInc=1                                            Premise(F9)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= PC[CIA]=addr                                           PC-Inc(S1,S14,S15)
	S18= CtrlIMem=0                                             Premise(F10)
	S19= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S18)
	S20= CtrlASIDIn=0                                           Premise(F11)
	S21= CtrlCP0=0                                              Premise(F12)
	S22= CP0[ASID]=pid                                          CP0-Hold(S0,S21)
	S23= CtrlEPCIn=0                                            Premise(F13)
	S24= CtrlExCodeIn=0                                         Premise(F14)
	S25= CtrlIR=1                                               Premise(F15)
	S26= [IR]={5,rS,rT,offset}                                  IR-Write(S13,S25)
	S27= CtrlGPR=0                                              Premise(F16)
	S28= GPR[rS]=a                                              GPR-Hold(S3,S27)
	S29= GPR[rT]=b                                              GPR-Hold(S4,S27)
	S30= CtrlA=0                                                Premise(F17)
	S31= CtrlB=0                                                Premise(F18)
	S32= CtrlALUOut=0                                           Premise(F19)
	S33= CtrlConditionReg=0                                     Premise(F20)

ID	S34= PC.Out=addr+4                                          PC-Out(S16)
	S35= PC.CIA=addr                                            PC-Out(S17)
	S36= PC.CIA31_28=addr[31:28]                                PC-Out(S17)
	S37= CP0.ASID=pid                                           CP0-Read-ASID(S22)
	S38= IR.Out={5,rS,rT,offset}                                IR-Out(S26)
	S39= IR.Out31_26=5                                          IR-Out(S26)
	S40= IR.Out25_21=rS                                         IR-Out(S26)
	S41= IR.Out20_16=rT                                         IR-Out(S26)
	S42= IR.Out15_0=offset                                      IR-Out(S26)
	S43= IR.Out31_26=>CU.Op                                     Premise(F21)
	S44= CU.Op=5                                                Path(S39,S43)
	S45= IR.Out25_21=>GPR.RReg1                                 Premise(F22)
	S46= GPR.RReg1=rS                                           Path(S40,S45)
	S47= GPR.Rdata1=a                                           GPR-Read(S46,S28)
	S48= IR.Out20_16=>GPR.RReg2                                 Premise(F23)
	S49= GPR.RReg2=rT                                           Path(S41,S48)
	S50= GPR.Rdata2=b                                           GPR-Read(S49,S29)
	S51= GPR.Rdata1=>A.In                                       Premise(F24)
	S52= A.In=a                                                 Path(S47,S51)
	S53= GPR.Rdata2=>B.In                                       Premise(F25)
	S54= B.In=b                                                 Path(S50,S53)
	S55= CtrlPC=0                                               Premise(F26)
	S56= CtrlPCInc=0                                            Premise(F27)
	S57= PC[CIA]=addr                                           PC-Hold(S17,S56)
	S58= PC[Out]=addr+4                                         PC-Hold(S16,S55,S56)
	S59= CtrlIMem=0                                             Premise(F28)
	S60= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S19,S59)
	S61= CtrlASIDIn=0                                           Premise(F29)
	S62= CtrlCP0=0                                              Premise(F30)
	S63= CP0[ASID]=pid                                          CP0-Hold(S22,S62)
	S64= CtrlEPCIn=0                                            Premise(F31)
	S65= CtrlExCodeIn=0                                         Premise(F32)
	S66= CtrlIR=0                                               Premise(F33)
	S67= [IR]={5,rS,rT,offset}                                  IR-Hold(S26,S66)
	S68= CtrlGPR=0                                              Premise(F34)
	S69= GPR[rS]=a                                              GPR-Hold(S28,S68)
	S70= GPR[rT]=b                                              GPR-Hold(S29,S68)
	S71= CtrlA=1                                                Premise(F35)
	S72= [A]=a                                                  A-Write(S52,S71)
	S73= CtrlB=1                                                Premise(F36)
	S74= [B]=b                                                  B-Write(S54,S73)
	S75= CtrlALUOut=0                                           Premise(F37)
	S76= CtrlConditionReg=0                                     Premise(F38)

EX	S77= PC.CIA=addr                                            PC-Out(S57)
	S78= PC.CIA31_28=addr[31:28]                                PC-Out(S57)
	S79= PC.Out=addr+4                                          PC-Out(S58)
	S80= CP0.ASID=pid                                           CP0-Read-ASID(S63)
	S81= IR.Out={5,rS,rT,offset}                                IR-Out(S67)
	S82= IR.Out31_26=5                                          IR-Out(S67)
	S83= IR.Out25_21=rS                                         IR-Out(S67)
	S84= IR.Out20_16=rT                                         IR-Out(S67)
	S85= IR.Out15_0=offset                                      IR-Out(S67)
	S86= A.Out=a                                                A-Out(S72)
	S87= A.Out1_0={a}[1:0]                                      A-Out(S72)
	S88= A.Out4_0={a}[4:0]                                      A-Out(S72)
	S89= B.Out=b                                                B-Out(S74)
	S90= B.Out1_0={b}[1:0]                                      B-Out(S74)
	S91= B.Out4_0={b}[4:0]                                      B-Out(S74)
	S92= IR.Out15_0=>SEXT.In                                    Premise(F39)
	S93= SEXT.In=offset                                         Path(S85,S92)
	S94= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S93)
	S95= PC.CIA=>ALU.A                                          Premise(F40)
	S96= ALU.A=addr                                             Path(S77,S95)
	S97= SEXT.Out=>ALU.B                                        Premise(F41)
	S98= ALU.B={14{offset[15]},offset,2{0}}                     Path(S94,S97)
	S99= ALU.Func=6'b010010                                     Premise(F42)
	S100= ALU.Out=addr+{14{offset[15]},offset,2{0}}             ALU(S96,S98)
	S101= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]   ALU(S96,S98)
	S102= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})   ALU(S96,S98)
	S103= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})    ALU(S96,S98)
	S104= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})       ALU(S96,S98)
	S105= ALU.Out=>ALUOut.In                                    Premise(F43)
	S106= ALUOut.In=addr+{14{offset[15]},offset,2{0}}           Path(S100,S105)
	S107= A.Out=>CMPU.A                                         Premise(F44)
	S108= CMPU.A=a                                              Path(S86,S107)
	S109= B.Out=>CMPU.B                                         Premise(F45)
	S110= CMPU.B=b                                              Path(S89,S109)
	S111= CMPU.Func=6'b000011                                   Premise(F46)
	S112= CMPU.Out=CompareS(a,b)                                CMPU-CMPS(S108,S110)
	S113= CMPU.zero=CompareS(a,b)                               CMPU-CMPS(S108,S110)
	S114= CMPU.gt=CompareS(a,b)                                 CMPU-CMPS(S108,S110)
	S115= CMPU.lt=CompareS(a,b)                                 CMPU-CMPS(S108,S110)
	S116= CMPU.zero=>ConditionReg.In                            Premise(F47)
	S117= ConditionReg.In=CompareS(a,b)                         Path(S113,S116)
	S118= CtrlPC=0                                              Premise(F48)
	S119= CtrlPCInc=0                                           Premise(F49)
	S120= PC[CIA]=addr                                          PC-Hold(S57,S119)
	S121= PC[Out]=addr+4                                        PC-Hold(S58,S118,S119)
	S122= CtrlIMem=0                                            Premise(F50)
	S123= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S60,S122)
	S124= CtrlASIDIn=0                                          Premise(F51)
	S125= CtrlCP0=0                                             Premise(F52)
	S126= CP0[ASID]=pid                                         CP0-Hold(S63,S125)
	S127= CtrlEPCIn=0                                           Premise(F53)
	S128= CtrlExCodeIn=0                                        Premise(F54)
	S129= CtrlIR=0                                              Premise(F55)
	S130= [IR]={5,rS,rT,offset}                                 IR-Hold(S67,S129)
	S131= CtrlGPR=0                                             Premise(F56)
	S132= GPR[rS]=a                                             GPR-Hold(S69,S131)
	S133= GPR[rT]=b                                             GPR-Hold(S70,S131)
	S134= CtrlA=0                                               Premise(F57)
	S135= [A]=a                                                 A-Hold(S72,S134)
	S136= CtrlB=0                                               Premise(F58)
	S137= [B]=b                                                 B-Hold(S74,S136)
	S138= CtrlALUOut=1                                          Premise(F59)
	S139= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Write(S106,S138)
	S140= CtrlConditionReg=1                                    Premise(F60)
	S141= [ConditionReg]=CompareS(a,b)                          ConditionReg-Write(S117,S140)

MEM	S142= PC.CIA=addr                                           PC-Out(S120)
	S143= PC.CIA31_28=addr[31:28]                               PC-Out(S120)
	S144= PC.Out=addr+4                                         PC-Out(S121)
	S145= CP0.ASID=pid                                          CP0-Read-ASID(S126)
	S146= IR.Out={5,rS,rT,offset}                               IR-Out(S130)
	S147= IR.Out31_26=5                                         IR-Out(S130)
	S148= IR.Out25_21=rS                                        IR-Out(S130)
	S149= IR.Out20_16=rT                                        IR-Out(S130)
	S150= IR.Out15_0=offset                                     IR-Out(S130)
	S151= A.Out=a                                               A-Out(S135)
	S152= A.Out1_0={a}[1:0]                                     A-Out(S135)
	S153= A.Out4_0={a}[4:0]                                     A-Out(S135)
	S154= B.Out=b                                               B-Out(S137)
	S155= B.Out1_0={b}[1:0]                                     B-Out(S137)
	S156= B.Out4_0={b}[4:0]                                     B-Out(S137)
	S157= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S139)
	S158= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S139)
	S159= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S139)
	S160= ConditionReg.Out=CompareS(a,b)                        ConditionReg-Out(S141)
	S161= ConditionReg.Out1_0={CompareS(a,b)}[1:0]              ConditionReg-Out(S141)
	S162= ConditionReg.Out4_0={CompareS(a,b)}[4:0]              ConditionReg-Out(S141)
	S163= ALUOut.Out=>PC.In                                     Premise(F61)
	S164= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S157,S163)
	S165= ConditionReg.Out=>CU.zero                             Premise(F62)
	S166= CU.zero=CompareS(a,b)                                 Path(S160,S165)
	S167= CtrlPC=0                                              Premise(F63)
	S168= CtrlPCInc=0                                           Premise(F64)
	S169= PC[CIA]=addr                                          PC-Hold(S120,S168)
	S170= PC[Out]=addr+4                                        PC-Hold(S121,S167,S168)
	S171= CtrlIMem=0                                            Premise(F65)
	S172= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S123,S171)
	S173= CtrlASIDIn=0                                          Premise(F66)
	S174= CtrlCP0=0                                             Premise(F67)
	S175= CP0[ASID]=pid                                         CP0-Hold(S126,S174)
	S176= CtrlEPCIn=0                                           Premise(F68)
	S177= CtrlExCodeIn=0                                        Premise(F69)
	S178= CtrlIR=0                                              Premise(F70)
	S179= [IR]={5,rS,rT,offset}                                 IR-Hold(S130,S178)
	S180= CtrlGPR=0                                             Premise(F71)
	S181= GPR[rS]=a                                             GPR-Hold(S132,S180)
	S182= GPR[rT]=b                                             GPR-Hold(S133,S180)
	S183= CtrlA=0                                               Premise(F72)
	S184= [A]=a                                                 A-Hold(S135,S183)
	S185= CtrlB=0                                               Premise(F73)
	S186= [B]=b                                                 B-Hold(S137,S185)
	S187= CtrlALUOut=0                                          Premise(F74)
	S188= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S139,S187)
	S189= CtrlConditionReg=0                                    Premise(F75)
	S190= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S141,S189)

WB	S191= PC.CIA=addr                                           PC-Out(S169)
	S192= PC.CIA31_28=addr[31:28]                               PC-Out(S169)
	S193= PC.Out=addr+4                                         PC-Out(S170)
	S194= CP0.ASID=pid                                          CP0-Read-ASID(S175)
	S195= IR.Out={5,rS,rT,offset}                               IR-Out(S179)
	S196= IR.Out31_26=5                                         IR-Out(S179)
	S197= IR.Out25_21=rS                                        IR-Out(S179)
	S198= IR.Out20_16=rT                                        IR-Out(S179)
	S199= IR.Out15_0=offset                                     IR-Out(S179)
	S200= A.Out=a                                               A-Out(S184)
	S201= A.Out1_0={a}[1:0]                                     A-Out(S184)
	S202= A.Out4_0={a}[4:0]                                     A-Out(S184)
	S203= B.Out=b                                               B-Out(S186)
	S204= B.Out1_0={b}[1:0]                                     B-Out(S186)
	S205= B.Out4_0={b}[4:0]                                     B-Out(S186)
	S206= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S188)
	S207= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]ALUOut-Out(S188)
	S208= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]ALUOut-Out(S188)
	S209= ConditionReg.Out=CompareS(a,b)                        ConditionReg-Out(S190)
	S210= ConditionReg.Out1_0={CompareS(a,b)}[1:0]              ConditionReg-Out(S190)
	S211= ConditionReg.Out4_0={CompareS(a,b)}[4:0]              ConditionReg-Out(S190)
	S212= CtrlPC=0                                              Premise(F76)
	S213= CtrlPCInc=0                                           Premise(F77)
	S214= PC[CIA]=addr                                          PC-Hold(S169,S213)
	S215= PC[Out]=addr+4                                        PC-Hold(S170,S212,S213)
	S216= CtrlIMem=0                                            Premise(F78)
	S217= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S172,S216)
	S218= CtrlASIDIn=0                                          Premise(F79)
	S219= CtrlCP0=0                                             Premise(F80)
	S220= CP0[ASID]=pid                                         CP0-Hold(S175,S219)
	S221= CtrlEPCIn=0                                           Premise(F81)
	S222= CtrlExCodeIn=0                                        Premise(F82)
	S223= CtrlIR=0                                              Premise(F83)
	S224= [IR]={5,rS,rT,offset}                                 IR-Hold(S179,S223)
	S225= CtrlGPR=0                                             Premise(F84)
	S226= GPR[rS]=a                                             GPR-Hold(S181,S225)
	S227= GPR[rT]=b                                             GPR-Hold(S182,S225)
	S228= CtrlA=0                                               Premise(F85)
	S229= [A]=a                                                 A-Hold(S184,S228)
	S230= CtrlB=0                                               Premise(F86)
	S231= [B]=b                                                 B-Hold(S186,S230)
	S232= CtrlALUOut=0                                          Premise(F87)
	S233= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S188,S232)
	S234= CtrlConditionReg=0                                    Premise(F88)
	S235= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S190,S234)

POST	S214= PC[CIA]=addr                                          PC-Hold(S169,S213)
	S215= PC[Out]=addr+4                                        PC-Hold(S170,S212,S213)
	S217= IMem[{pid,addr}]={5,rS,rT,offset}                     IMem-Hold(S172,S216)
	S220= CP0[ASID]=pid                                         CP0-Hold(S175,S219)
	S224= [IR]={5,rS,rT,offset}                                 IR-Hold(S179,S223)
	S226= GPR[rS]=a                                             GPR-Hold(S181,S225)
	S227= GPR[rT]=b                                             GPR-Hold(S182,S225)
	S229= [A]=a                                                 A-Hold(S184,S228)
	S231= [B]=b                                                 B-Hold(S186,S230)
	S233= [ALUOut]=addr+{14{offset[15]},offset,2{0}}            ALUOut-Hold(S188,S232)
	S235= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S190,S234)

